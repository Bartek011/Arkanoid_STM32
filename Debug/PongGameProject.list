
PongGameProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe0  08004fe0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000000c  08004ff4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08004ff4  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010462  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002294  00000000  00000000  0003049e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00032738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00033520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f01  00000000  00000000  00034258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa53  00000000  00000000  0005c159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fce42  00000000  00000000  0006bbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001689ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a60  00000000  00000000  00168a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f78 	.word	0x08004f78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f78 	.word	0x08004f78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fdfd 	bl	80010d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_setRST(LCD_RST_GPIO_Port, LCD_RST_Pin);
 80004d6:	2108      	movs	r1, #8
 80004d8:	4828      	ldr	r0, [pc, #160]	; (800057c <main+0xb0>)
 80004da:	f000 fa3f 	bl	800095c <LCD_setRST>
  LCD_setCE(LCD_CE_GPIO_Port, LCD_CE_Pin);
 80004de:	2104      	movs	r1, #4
 80004e0:	4826      	ldr	r0, [pc, #152]	; (800057c <main+0xb0>)
 80004e2:	f000 fa4f 	bl	8000984 <LCD_setCE>
  LCD_setDC(LCD_DC_GPIO_Port, LCD_DC_Pin);
 80004e6:	2102      	movs	r1, #2
 80004e8:	4824      	ldr	r0, [pc, #144]	; (800057c <main+0xb0>)
 80004ea:	f000 fa5f 	bl	80009ac <LCD_setDC>
  LCD_setDIN(LCD_DIN_GPIO_Port, LCD_DIN_Pin);
 80004ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f2:	4822      	ldr	r0, [pc, #136]	; (800057c <main+0xb0>)
 80004f4:	f000 fa6e 	bl	80009d4 <LCD_setDIN>
  LCD_setCLK(LCD_CLK_GPIO_Port, LCD_CLK_Pin);
 80004f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fc:	481f      	ldr	r0, [pc, #124]	; (800057c <main+0xb0>)
 80004fe:	f000 fa7d 	bl	80009fc <LCD_setCLK>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f841 	bl	8000588 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f967 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800050a:	f000 f947 	bl	800079c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f915 	bl	800073c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000512:	f000 f88b 	bl	800062c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, joystick, 2);
 8000516:	2202      	movs	r2, #2
 8000518:	4919      	ldr	r1, [pc, #100]	; (8000580 <main+0xb4>)
 800051a:	481a      	ldr	r0, [pc, #104]	; (8000584 <main+0xb8>)
 800051c:	f001 f9a4 	bl	8001868 <HAL_ADC_Start_DMA>
  LCD_init();
 8000520:	f000 fb04 	bl	8000b2c <LCD_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_drawHLine(0, PLATFORM_LVL, 20); // poczatkowe polozenie platformy
 8000524:	2214      	movs	r2, #20
 8000526:	212f      	movs	r1, #47	; 0x2f
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fbfd 	bl	8000d28 <LCD_drawHLine>
  LCD_refreshArea(0, PLATFORM_LVL, 21, PLATFORM_LVL);
 800052e:	232f      	movs	r3, #47	; 0x2f
 8000530:	2215      	movs	r2, #21
 8000532:	212f      	movs	r1, #47	; 0x2f
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fb4d 	bl	8000bd4 <LCD_refreshArea>
			  LCD_drawHLine(i, 47, 20);
			  LCD_refreshArea(i-1, 47, i+21, 47);
			  HAL_Delay(50);
			  LCD_clrScr();
		  }*/
	  	  for (int i = 0; i < 64; i++){
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	e009      	b.n	8000554 <main+0x88>
			  PlatformMoveRight(i, 20);
 8000540:	2114      	movs	r1, #20
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f9ae 	bl	80008a4 <PlatformMoveRight>
			  HAL_Delay(50);
 8000548:	2032      	movs	r0, #50	; 0x32
 800054a:	f000 fe3d 	bl	80011c8 <HAL_Delay>
	  	  for (int i = 0; i < 64; i++){
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b3f      	cmp	r3, #63	; 0x3f
 8000558:	ddf2      	ble.n	8000540 <main+0x74>
		  }
		  for (int i = 64; i > 0; i--){
 800055a:	2340      	movs	r3, #64	; 0x40
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	e009      	b.n	8000574 <main+0xa8>
			  PlatformMoveLeft(i, 20);
 8000560:	2114      	movs	r1, #20
 8000562:	6838      	ldr	r0, [r7, #0]
 8000564:	f000 f9c7 	bl	80008f6 <PlatformMoveLeft>
			  HAL_Delay(50);
 8000568:	2032      	movs	r0, #50	; 0x32
 800056a:	f000 fe2d 	bl	80011c8 <HAL_Delay>
		  for (int i = 64; i > 0; i--){
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	dcf2      	bgt.n	8000560 <main+0x94>
	  	  for (int i = 0; i < 64; i++){
 800057a:	e7de      	b.n	800053a <main+0x6e>
 800057c:	48000800 	.word	0x48000800
 8000580:	20000158 	.word	0x20000158
 8000584:	20000028 	.word	0x20000028

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	; 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f004 fce6 	bl	8004f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ae:	f002 fcef 	bl	8002f90 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f9ca 	bl	8000950 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fd26 	bl	800303c <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f6:	f000 f9ab 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	2104      	movs	r1, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f8ee 	bl	80037f4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f997 	bl	8000950 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3758      	adds	r7, #88	; 0x58
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <MX_ADC1_Init+0x100>)
 8000650:	4a37      	ldr	r2, [pc, #220]	; (8000730 <MX_ADC1_Init+0x104>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <MX_ADC1_Init+0x100>)
 8000656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b33      	ldr	r3, [pc, #204]	; (800072c <MX_ADC1_Init+0x100>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000662:	4b32      	ldr	r3, [pc, #200]	; (800072c <MX_ADC1_Init+0x100>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000668:	4b30      	ldr	r3, [pc, #192]	; (800072c <MX_ADC1_Init+0x100>)
 800066a:	2201      	movs	r2, #1
 800066c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_ADC1_Init+0x100>)
 8000670:	2204      	movs	r2, #4
 8000672:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000674:	4b2d      	ldr	r3, [pc, #180]	; (800072c <MX_ADC1_Init+0x100>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_ADC1_Init+0x100>)
 800067c:	2201      	movs	r2, #1
 800067e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_ADC1_Init+0x100>)
 8000682:	2202      	movs	r2, #2
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_ADC1_Init+0x100>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC1_Init+0x100>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_ADC1_Init+0x100>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_ADC1_Init+0x100>)
 800069c:	2201      	movs	r2, #1
 800069e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_ADC1_Init+0x100>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_ADC1_Init+0x100>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	481e      	ldr	r0, [pc, #120]	; (800072c <MX_ADC1_Init+0x100>)
 80006b2:	f000 ff83 	bl	80015bc <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006bc:	f000 f948 	bl	8000950 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <MX_ADC1_Init+0x100>)
 80006cc:	f001 fed6 	bl	800247c <HAL_ADCEx_MultiModeConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80006d6:	f000 f93b 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_ADC1_Init+0x108>)
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006de:	2306      	movs	r3, #6
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006e2:	2307      	movs	r3, #7
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e6:	237f      	movs	r3, #127	; 0x7f
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ea:	2304      	movs	r3, #4
 80006ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_ADC1_Init+0x100>)
 80006f8:	f001 f990 	bl	8001a1c <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000702:	f000 f925 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_ADC1_Init+0x10c>)
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070a:	230c      	movs	r3, #12
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC1_Init+0x100>)
 8000714:	f001 f982 	bl	8001a1c <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800071e:	f000 f917 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	50040000 	.word	0x50040000
 8000734:	25b00200 	.word	0x25b00200
 8000738:	2e300800 	.word	0x2e300800

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000780:	f003 ff18 	bl	80045b4 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f8e1 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000d4 	.word	0x200000d4
 8000798:	40004400 	.word	0x40004400

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6493      	str	r3, [r2, #72]	; 0x48
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x38>)
 80007b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	200b      	movs	r0, #11
 80007c0:	f001 ffe7 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007c4:	200b      	movs	r0, #11
 80007c6:	f002 f800 	bl	80027ca <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a2a      	ldr	r2, [pc, #168]	; (800089c <MX_GPIO_Init+0xc4>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <MX_GPIO_Init+0xc4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a1e      	ldr	r2, [pc, #120]	; (800089c <MX_GPIO_Init+0xc4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <MX_GPIO_Init+0xc4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 800084e:	2200      	movs	r2, #0
 8000850:	f640 410e 	movw	r1, #3086	; 0xc0e
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000856:	f002 fb75 	bl	8002f44 <HAL_GPIO_WritePin>
                          |LCD_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000860:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000872:	f002 f9bd 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin LCD_DIN_Pin
                           LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 8000876:	f640 430e 	movw	r3, #3086	; 0xc0e
 800087a:	617b      	str	r3, [r7, #20]
                          |LCD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000890:	f002 f9ae 	bl	8002bf0 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000800 	.word	0x48000800

080008a4 <PlatformMoveRight>:

/* USER CODE BEGIN 4 */
static void PlatformMoveRight(int startPoint, int length){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint, PLATFORM_LVL, 0); // zgaś lewy skrajny pxl
 80008ae:	2200      	movs	r2, #0
 80008b0:	212f      	movs	r1, #47	; 0x2f
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f9dc 	bl	8000c70 <LCD_setPixel>
	LCD_refreshArea(startPoint, PLATFORM_LVL, startPoint, PLATFORM_LVL);
 80008b8:	232f      	movs	r3, #47	; 0x2f
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	212f      	movs	r1, #47	; 0x2f
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f988 	bl	8000bd4 <LCD_refreshArea>
	LCD_setPixel(startPoint+length+1, PLATFORM_LVL, 1); // zapal prawy skrajny pxl
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	212f      	movs	r1, #47	; 0x2f
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f9cd 	bl	8000c70 <LCD_setPixel>
	LCD_refreshArea(startPoint+length+1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	1c58      	adds	r0, r3, #1
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	232f      	movs	r3, #47	; 0x2f
 80008e8:	212f      	movs	r1, #47	; 0x2f
 80008ea:	f000 f973 	bl	8000bd4 <LCD_refreshArea>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <PlatformMoveLeft>:
static void PlatformMoveLeft(int startPoint, int length){
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint+length, PLATFORM_LVL, 0); // zgas prawy skrajny pxl
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	4413      	add	r3, r2
 8000906:	2200      	movs	r2, #0
 8000908:	212f      	movs	r1, #47	; 0x2f
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f9b0 	bl	8000c70 <LCD_setPixel>
	LCD_refreshArea(startPoint+length, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	18d0      	adds	r0, r2, r3
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	4413      	add	r3, r2
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	232f      	movs	r3, #47	; 0x2f
 8000920:	212f      	movs	r1, #47	; 0x2f
 8000922:	f000 f957 	bl	8000bd4 <LCD_refreshArea>
	LCD_setPixel(startPoint-1, PLATFORM_LVL, 1); // zapal lewy skrajny pxl
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
 800092a:	2201      	movs	r2, #1
 800092c:	212f      	movs	r1, #47	; 0x2f
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f99e 	bl	8000c70 <LCD_setPixel>
	LCD_refreshArea(startPoint-1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	1e58      	subs	r0, r3, #1
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	4413      	add	r3, r2
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	232f      	movs	r3, #47	; 0x2f
 8000942:	212f      	movs	r1, #47	; 0x2f
 8000944:	f000 f946 	bl	8000bd4 <LCD_refreshArea>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000968:	4a05      	ldr	r2, [pc, #20]	; (8000980 <LCD_setRST+0x24>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <LCD_setRST+0x24>)
 8000970:	887b      	ldrh	r3, [r7, #2]
 8000972:	8093      	strh	r3, [r2, #4]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	20000358 	.word	0x20000358

08000984 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <LCD_setCE+0x24>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <LCD_setCE+0x24>)
 8000998:	887b      	ldrh	r3, [r7, #2]
 800099a:	8193      	strh	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	20000358 	.word	0x20000358

080009ac <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <LCD_setDC+0x24>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <LCD_setDC+0x24>)
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	8293      	strh	r3, [r2, #20]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000358 	.word	0x20000358

080009d4 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 80009e0:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <LCD_setDIN+0x24>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <LCD_setDIN+0x24>)
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	8393      	strh	r3, [r2, #28]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20000358 	.word	0x20000358

080009fc <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <LCD_setCLK+0x24>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <LCD_setCLK+0x24>)
 8000a10:	887b      	ldrh	r3, [r7, #2]
 8000a12:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000358 	.word	0x20000358

08000a24 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e026      	b.n	8000a82 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <LCD_send+0x70>)
 8000a36:	6998      	ldr	r0, [r3, #24]
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <LCD_send+0x70>)
 8000a3a:	8b99      	ldrh	r1, [r3, #28]
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	f1c3 0307 	rsb	r3, r3, #7
 8000a44:	fa42 f303 	asr.w	r3, r2, r3
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	f002 fa74 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <LCD_send+0x70>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <LCD_send+0x70>)
 8000a62:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000a64:	2201      	movs	r2, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fa6c 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <LCD_send+0x70>)
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <LCD_send+0x70>)
 8000a72:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000a74:	2200      	movs	r2, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fa64 	bl	8002f44 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d9d5      	bls.n	8000a34 <LCD_send+0x10>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000358 	.word	0x20000358

08000a98 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d11c      	bne.n	8000ae8 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <LCD_write+0x90>)
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <LCD_write+0x90>)
 8000ab4:	8a91      	ldrh	r1, [r2, #20]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 fa43 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <LCD_write+0x90>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <LCD_write+0x90>)
 8000ac4:	8991      	ldrh	r1, [r2, #12]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fa3b 	bl	8002f44 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ffa7 	bl	8000a24 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <LCD_write+0x90>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <LCD_write+0x90>)
 8000adc:	8991      	ldrh	r1, [r2, #12]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fa2f 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000ae6:	e01b      	b.n	8000b20 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <LCD_write+0x90>)
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <LCD_write+0x90>)
 8000aee:	8a91      	ldrh	r1, [r2, #20]
 8000af0:	2201      	movs	r2, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fa26 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <LCD_write+0x90>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <LCD_write+0x90>)
 8000afe:	8991      	ldrh	r1, [r2, #12]
 8000b00:	2200      	movs	r2, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fa1e 	bl	8002f44 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff8a 	bl	8000a24 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <LCD_write+0x90>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <LCD_write+0x90>)
 8000b16:	8991      	ldrh	r1, [r2, #12]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fa12 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000358 	.word	0x20000358

08000b2c <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <LCD_init+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <LCD_init+0x64>)
 8000b36:	8891      	ldrh	r1, [r2, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fa02 	bl	8002f44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <LCD_init+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <LCD_init+0x64>)
 8000b46:	8891      	ldrh	r1, [r2, #4]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 f9fa 	bl	8002f44 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000b50:	2100      	movs	r1, #0
 8000b52:	2021      	movs	r0, #33	; 0x21
 8000b54:	f7ff ffa0 	bl	8000a98 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000b58:	2100      	movs	r1, #0
 8000b5a:	20b8      	movs	r0, #184	; 0xb8
 8000b5c:	f7ff ff9c 	bl	8000a98 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000b60:	2100      	movs	r1, #0
 8000b62:	2004      	movs	r0, #4
 8000b64:	f7ff ff98 	bl	8000a98 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f7ff ff94 	bl	8000a98 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000b70:	2100      	movs	r1, #0
 8000b72:	2020      	movs	r0, #32
 8000b74:	f7ff ff90 	bl	8000a98 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000b78:	2100      	movs	r1, #0
 8000b7a:	200c      	movs	r0, #12
 8000b7c:	f7ff ff8c 	bl	8000a98 <LCD_write>
  LCD_clrScr();
 8000b80:	f000 f80a 	bl	8000b98 <LCD_clrScr>
  lcd.inverttext = false;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <LCD_init+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000358 	.word	0x20000358
 8000b94:	2000015c 	.word	0x2000015c

08000b98 <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	e00b      	b.n	8000bbc <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff ff76 	bl	8000a98 <LCD_write>
    lcd.buffer[i] = 0;
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <LCD_clrScr+0x38>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000bc2:	dbef      	blt.n	8000ba4 <LCD_clrScr+0xc>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000015c 	.word	0x2000015c

08000bd4 <LCD_refreshArea>:
 * @param xmin: starting point on the x-axis
 * @param xmax: ending point on the x-axis
 * @param ymin: starting point on the y-axis
 * @param ymax: ending point on the y-axis
 */
void LCD_refreshArea(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax){
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4608      	mov	r0, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	4623      	mov	r3, r4
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	4603      	mov	r3, r0
 8000be8:	71bb      	strb	r3, [r7, #6]
 8000bea:	460b      	mov	r3, r1
 8000bec:	717b      	strb	r3, [r7, #5]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	713b      	strb	r3, [r7, #4]
  for(int i = 0; i < 6; i++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e02f      	b.n	8000c58 <LCD_refreshArea+0x84>
    if(i * 8 > ymax){
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	00da      	lsls	r2, r3, #3
 8000bfc:	793b      	ldrb	r3, [r7, #4]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dc2e      	bgt.n	8000c60 <LCD_refreshArea+0x8c>
      break;
    }
    //LCD_goXY(xmin, i);
    LCD_write(LCD_SETYADDR | i, LCD_COMMAND);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff41 	bl	8000a98 <LCD_write>
    LCD_write(LCD_SETXADDR | xmin, LCD_COMMAND);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff39 	bl	8000a98 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	e00e      	b.n	8000c4a <LCD_refreshArea+0x76>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2254      	movs	r2, #84	; 0x54
 8000c30:	fb03 f202 	mul.w	r2, r3, r2
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <LCD_refreshArea+0x98>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff2a 	bl	8000a98 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	ddec      	ble.n	8000c2c <LCD_refreshArea+0x58>
  for(int i = 0; i < 6; i++){
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	ddcc      	ble.n	8000bf8 <LCD_refreshArea+0x24>
    }
  }
}
 8000c5e:	e000      	b.n	8000c62 <LCD_refreshArea+0x8e>
      break;
 8000c60:	bf00      	nop
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000015c 	.word	0x2000015c

08000c70 <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	717b      	strb	r3, [r7, #5]
  if(x >= LCD_WIDTH)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b53      	cmp	r3, #83	; 0x53
 8000c86:	d901      	bls.n	8000c8c <LCD_setPixel+0x1c>
    x = LCD_WIDTH - 1;
 8000c88:	2353      	movs	r3, #83	; 0x53
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if(y >= LCD_HEIGHT)
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c90:	d901      	bls.n	8000c96 <LCD_setPixel+0x26>
    y = LCD_HEIGHT - 1;
 8000c92:	232f      	movs	r3, #47	; 0x2f
 8000c94:	71bb      	strb	r3, [r7, #6]
    
  if(pixel != false){
 8000c96:	797b      	ldrb	r3, [r7, #5]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d01d      	beq.n	8000cd8 <LCD_setPixel+0x68>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	b2d8      	uxtb	r0, r3
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	2354      	movs	r3, #84	; 0x54
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <LCD_setPixel+0xb4>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	b25a      	sxtb	r2, r3
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b259      	sxtb	r1, r3
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	2354      	movs	r3, #84	; 0x54
 8000cca:	fb00 f303 	mul.w	r3, r0, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b2c9      	uxtb	r1, r1
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <LCD_setPixel+0xb4>)
 8000cd4:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8000cd6:	e01e      	b.n	8000d16 <LCD_setPixel+0xa6>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	b2d8      	uxtb	r0, r3
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	2354      	movs	r3, #84	; 0x54
 8000ce4:	fb01 f303 	mul.w	r3, r1, r3
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LCD_setPixel+0xb4>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	b25a      	sxtb	r2, r3
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	4013      	ands	r3, r2
 8000d04:	b259      	sxtb	r1, r3
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	2354      	movs	r3, #84	; 0x54
 8000d0a:	fb00 f303 	mul.w	r3, r0, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2c9      	uxtb	r1, r1
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <LCD_setPixel+0xb4>)
 8000d14:	54d1      	strb	r1, [r2, r3]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2000015c 	.word	0x2000015c

08000d28 <LCD_drawHLine>:
 * @brief Draws a horizontal line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void LCD_drawHLine(int x, int y, int l){
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  int by, bi;

  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT)){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db3a      	blt.n	8000db0 <LCD_drawHLine+0x88>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b53      	cmp	r3, #83	; 0x53
 8000d3e:	dc37      	bgt.n	8000db0 <LCD_drawHLine+0x88>
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db34      	blt.n	8000db0 <LCD_drawHLine+0x88>
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b2f      	cmp	r3, #47	; 0x2f
 8000d4a:	dc31      	bgt.n	8000db0 <LCD_drawHLine+0x88>
    for (int cx=0; cx<l; cx++){
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	e02a      	b.n	8000da8 <LCD_drawHLine+0x80>
      by=((y/8)*84)+x;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	da00      	bge.n	8000d5a <LCD_drawHLine+0x32>
 8000d58:	3307      	adds	r3, #7
 8000d5a:	10db      	asrs	r3, r3, #3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2354      	movs	r3, #84	; 0x54
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
      bi=y % 8;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	425a      	negs	r2, r3
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	f002 0207 	and.w	r2, r2, #7
 8000d76:	bf58      	it	pl
 8000d78:	4253      	negpl	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]
      lcd.buffer[by+cx] |= (1<<bi);
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LCD_drawHLine+0x94>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	b25a      	sxtb	r2, r3
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b259      	sxtb	r1, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2c9      	uxtb	r1, r1
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <LCD_drawHLine+0x94>)
 8000da0:	54d1      	strb	r1, [r2, r3]
    for (int cx=0; cx<l; cx++){
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3301      	adds	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbd0      	blt.n	8000d52 <LCD_drawHLine+0x2a>
    }
  }
}
 8000db0:	bf00      	nop
 8000db2:	3724      	adds	r7, #36	; 0x24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	2000015c 	.word	0x2000015c

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x44>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x44>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x44>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ac      	sub	sp, #176	; 0xb0
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2288      	movs	r2, #136	; 0x88
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 f89d 	bl	8004f68 <memset>
  if(hadc->Instance==ADC1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a3d      	ldr	r2, [pc, #244]	; (8000f28 <HAL_ADC_MspInit+0x120>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d172      	bne.n	8000f1e <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e52:	2307      	movs	r3, #7
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fee7 	bl	8003c3c <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e74:	f7ff fd6c 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <HAL_ADC_MspInit+0x124>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <HAL_ADC_MspInit+0x124>)
 8000e7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <HAL_ADC_MspInit+0x124>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <HAL_ADC_MspInit+0x124>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_ADC_MspInit+0x124>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_ADC_MspInit+0x124>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ea8:	2350      	movs	r3, #80	; 0x50
 8000eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f001 fe94 	bl	8002bf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000eca:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <HAL_ADC_MspInit+0x12c>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000ef8:	2220      	movs	r2, #32
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000f04:	f001 fc7c 	bl	8002800 <HAL_DMA_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000f0e:	f7ff fd1f 	bl	8000950 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000f16:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <HAL_ADC_MspInit+0x128>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	37b0      	adds	r7, #176	; 0xb0
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	50040000 	.word	0x50040000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	2000008c 	.word	0x2000008c
 8000f34:	40020008 	.word	0x40020008

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0ac      	sub	sp, #176	; 0xb0
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2288      	movs	r2, #136	; 0x88
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f805 	bl	8004f68 <memset>
  if(huart->Instance==USART2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <HAL_UART_MspInit+0xb0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d13b      	bne.n	8000fe0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fe61 	bl	8003c3c <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f80:	f7ff fce6 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_UART_MspInit+0xb4>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f88:	4a18      	ldr	r2, [pc, #96]	; (8000fec <HAL_UART_MspInit+0xb4>)
 8000f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_UART_MspInit+0xb4>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <HAL_UART_MspInit+0xb4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_UART_MspInit+0xb4>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_UART_MspInit+0xb4>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f001 fe08 	bl	8002bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	37b0      	adds	r7, #176	; 0xb0
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40021000 	.word	0x40021000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f8a4 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA1_Channel1_IRQHandler+0x10>)
 800104a:	f001 fcf1 	bl	8002a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000008c 	.word	0x2000008c

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f003 ff39 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff fa0d 	bl	80004cc <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c0:	08004fe8 	.word	0x08004fe8
  ldr r2, =_sbss
 80010c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010c8:	20000384 	.word	0x20000384

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_Init+0x3c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_Init+0x3c>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f001 fb48 	bl	800277c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 f80f 	bl	8001110 <HAL_InitTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	e001      	b.n	8001102 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010fe:	f7ff fe5f 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001102:	79fb      	ldrb	r3, [r7, #7]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d023      	beq.n	800116c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_InitTick+0x70>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_InitTick+0x6c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fb53 	bl	80027e6 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10f      	bne.n	8001166 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d809      	bhi.n	8001160 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f001 fb1d 	bl	8002792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_InitTick+0x74>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e007      	b.n	8001170 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e004      	b.n	8001170 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e001      	b.n	8001170 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	20000000 	.word	0x20000000
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000380 	.word	0x20000380

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000380 	.word	0x20000380

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3360      	adds	r3, #96	; 0x60
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LL_ADC_SetOffset+0x44>)
 800129a:	4013      	ands	r3, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	03fff000 	.word	0x03fff000

080012c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3360      	adds	r3, #96	; 0x60
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3360      	adds	r3, #96	; 0x60
 80012fc:	461a      	mov	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	431a      	orrs	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3330      	adds	r3, #48	; 0x30
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	211f      	movs	r1, #31
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0e9b      	lsrs	r3, r3, #26
 8001380:	f003 011f 	and.w	r1, r3, #31
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	431a      	orrs	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3314      	adds	r3, #20
 80013b0:	461a      	mov	r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	0e5b      	lsrs	r3, r3, #25
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	0d1b      	lsrs	r3, r3, #20
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2107      	movs	r1, #7
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	401a      	ands	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	0d1b      	lsrs	r3, r3, #20
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0318 	and.w	r3, r3, #24
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <LL_ADC_SetChannelSingleDiff+0x44>)
 800141c:	40d9      	lsrs	r1, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	400b      	ands	r3, r1
 8001422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	0007ffff 	.word	0x0007ffff

08001440 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 031f 	and.w	r3, r3, #31
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800146c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6093      	str	r3, [r2, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001494:	d101      	bne.n	800149a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014e4:	d101      	bne.n	80014ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <LL_ADC_IsEnabled+0x18>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <LL_ADC_IsEnabled+0x1a>
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001556:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800155a:	f043 0204 	orr.w	r2, r3, #4
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b04      	cmp	r3, #4
 8001580:	d101      	bne.n	8001586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d101      	bne.n	80015ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e136      	b.n	8001844 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fc0f 	bl	8000e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff3f 	bl	8001480 <LL_ADC_IsDeepPowerDownEnabled>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff25 	bl	800145c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff5a 	bl	80014d0 <LL_ADC_IsInternalRegulatorEnabled>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d115      	bne.n	800164e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff3e 	bl	80014a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800162c:	4b87      	ldr	r3, [pc, #540]	; (800184c <HAL_ADC_Init+0x290>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	4a87      	ldr	r2, [pc, #540]	; (8001850 <HAL_ADC_Init+0x294>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	3301      	adds	r3, #1
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001640:	e002      	b.n	8001648 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f9      	bne.n	8001642 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff3c 	bl	80014d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f043 0210 	orr.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff75 	bl	800156e <LL_ADC_REG_IsConversionOngoing>
 8001684:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 80cf 	bne.w	8001832 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 80cb 	bne.w	8001832 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016a4:	f043 0202 	orr.w	r2, r3, #2
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff35 	bl	8001520 <LL_ADC_IsEnabled>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d115      	bne.n	80016e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016bc:	4865      	ldr	r0, [pc, #404]	; (8001854 <HAL_ADC_Init+0x298>)
 80016be:	f7ff ff2f 	bl	8001520 <LL_ADC_IsEnabled>
 80016c2:	4604      	mov	r4, r0
 80016c4:	4864      	ldr	r0, [pc, #400]	; (8001858 <HAL_ADC_Init+0x29c>)
 80016c6:	f7ff ff2b 	bl	8001520 <LL_ADC_IsEnabled>
 80016ca:	4603      	mov	r3, r0
 80016cc:	431c      	orrs	r4, r3
 80016ce:	4863      	ldr	r0, [pc, #396]	; (800185c <HAL_ADC_Init+0x2a0>)
 80016d0:	f7ff ff26 	bl	8001520 <LL_ADC_IsEnabled>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4323      	orrs	r3, r4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4619      	mov	r1, r3
 80016e2:	485f      	ldr	r0, [pc, #380]	; (8001860 <HAL_ADC_Init+0x2a4>)
 80016e4:	f7ff fd94 	bl	8001210 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7e5b      	ldrb	r3, [r3, #25]
 80016ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001706:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d106      	bne.n	8001724 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	3b01      	subs	r3, #1
 800171c:	045b      	lsls	r3, r3, #17
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d009      	beq.n	8001740 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_ADC_Init+0x2a8>)
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	430b      	orrs	r3, r1
 8001752:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff08 	bl	800156e <LL_ADC_REG_IsConversionOngoing>
 800175e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff15 	bl	8001594 <LL_ADC_INJ_IsConversionOngoing>
 800176a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d13d      	bne.n	80017ee <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d13a      	bne.n	80017ee <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800177c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001784:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001794:	f023 0302 	bic.w	r3, r3, #2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	69b9      	ldr	r1, [r7, #24]
 800179e:	430b      	orrs	r3, r1
 80017a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d118      	bne.n	80017de <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017b6:	f023 0304 	bic.w	r3, r3, #4
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017c2:	4311      	orrs	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ce:	430a      	orrs	r2, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	e007      	b.n	80017ee <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10c      	bne.n	8001810 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	f023 010f 	bic.w	r1, r3, #15
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	1e5a      	subs	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
 800180e:	e007      	b.n	8001820 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020f 	bic.w	r2, r2, #15
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f023 0303 	bic.w	r3, r3, #3
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
 8001830:	e007      	b.n	8001842 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001842:	7ffb      	ldrb	r3, [r7, #31]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3724      	adds	r7, #36	; 0x24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd90      	pop	{r4, r7, pc}
 800184c:	20000000 	.word	0x20000000
 8001850:	053e2d63 	.word	0x053e2d63
 8001854:	50040000 	.word	0x50040000
 8001858:	50040100 	.word	0x50040100
 800185c:	50040200 	.word	0x50040200
 8001860:	50040300 	.word	0x50040300
 8001864:	fff0c007 	.word	0xfff0c007

08001868 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001874:	4853      	ldr	r0, [pc, #332]	; (80019c4 <HAL_ADC_Start_DMA+0x15c>)
 8001876:	f7ff fde3 	bl	8001440 <LL_ADC_GetMultimode>
 800187a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe74 	bl	800156e <LL_ADC_REG_IsConversionOngoing>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 8093 	bne.w	80019b4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ADC_Start_DMA+0x34>
 8001898:	2302      	movs	r3, #2
 800189a:	e08e      	b.n	80019ba <HAL_ADC_Start_DMA+0x152>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <HAL_ADC_Start_DMA+0x160>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d008      	beq.n	80018c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d002      	beq.n	80018c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	d172      	bne.n	80019a6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fc9b 	bl	80021fc <ADC_Enable>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d165      	bne.n	800199c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_ADC_Start_DMA+0x164>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d002      	beq.n	80018f4 <HAL_ADC_Start_DMA+0x8c>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_Start_DMA+0x8e>
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_ADC_Start_DMA+0x168>)
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d002      	beq.n	8001904 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	f023 0206 	bic.w	r2, r3, #6
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	659a      	str	r2, [r3, #88]	; 0x58
 8001928:	e002      	b.n	8001930 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <HAL_ADC_Start_DMA+0x16c>)
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_ADC_Start_DMA+0x170>)
 800193e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <HAL_ADC_Start_DMA+0x174>)
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	221c      	movs	r2, #28
 800194e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0210 	orr.w	r2, r2, #16
 8001966:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3340      	adds	r3, #64	; 0x40
 8001982:	4619      	mov	r1, r3
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f000 fff2 	bl	8002970 <HAL_DMA_Start_IT>
 800198c:	4603      	mov	r3, r0
 800198e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fdd6 	bl	8001546 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800199a:	e00d      	b.n	80019b8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80019a4:	e008      	b.n	80019b8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019b2:	e001      	b.n	80019b8 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
 80019b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	50040300 	.word	0x50040300
 80019c8:	50040200 	.word	0x50040200
 80019cc:	50040100 	.word	0x50040100
 80019d0:	50040000 	.word	0x50040000
 80019d4:	08002309 	.word	0x08002309
 80019d8:	080023e1 	.word	0x080023e1
 80019dc:	080023fd 	.word	0x080023fd

080019e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0b6      	sub	sp, #216	; 0xd8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x22>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e3c7      	b.n	80021ce <HAL_ADC_ConfigChannel+0x7b2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fd8f 	bl	800156e <LL_ADC_REG_IsConversionOngoing>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 83a8 	bne.w	80021a8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d824      	bhi.n	8001aaa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	3b02      	subs	r3, #2
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d81b      	bhi.n	8001aa2 <HAL_ADC_ConfigChannel+0x86>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <HAL_ADC_ConfigChannel+0x54>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001a81 	.word	0x08001a81
 8001a74:	08001a89 	.word	0x08001a89
 8001a78:	08001a91 	.word	0x08001a91
 8001a7c:	08001a99 	.word	0x08001a99
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	220c      	movs	r2, #12
 8001a84:	605a      	str	r2, [r3, #4]
          break;
 8001a86:	e011      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2212      	movs	r2, #18
 8001a8c:	605a      	str	r2, [r3, #4]
          break;
 8001a8e:	e00d      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2218      	movs	r2, #24
 8001a94:	605a      	str	r2, [r3, #4]
          break;
 8001a96:	e009      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9e:	605a      	str	r2, [r3, #4]
          break;
 8001aa0:	e004      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2206      	movs	r2, #6
 8001aa6:	605a      	str	r2, [r3, #4]
          break;
 8001aa8:	e000      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001aaa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f7ff fc45 	bl	8001348 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fd53 	bl	800156e <LL_ADC_REG_IsConversionOngoing>
 8001ac8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fd5f 	bl	8001594 <LL_ADC_INJ_IsConversionOngoing>
 8001ad6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 81a6 	bne.w	8001e30 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 81a1 	bne.w	8001e30 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f7ff fc50 	bl	80013a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d00a      	beq.n	8001b38 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b32:	f7ff fba1 	bl	8001278 <LL_ADC_SetOffset>
 8001b36:	e17b      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fbbe 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x148>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fbb3 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	0e9b      	lsrs	r3, r3, #26
 8001b5e:	f003 021f 	and.w	r2, r3, #31
 8001b62:	e01e      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x186>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fba8 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b92:	2320      	movs	r3, #32
 8001b94:	e004      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x19e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	e018      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001bde:	2320      	movs	r3, #32
 8001be0:	e004      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001be2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d106      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb77 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fb5b 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x20e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fb50 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	e01e      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x24c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fb45 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	e004      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x264>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	e018      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x296>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e004      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fb14 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff faf8 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x2d4>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff faed 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	0e9b      	lsrs	r3, r3, #26
 8001cea:	f003 021f 	and.w	r2, r3, #31
 8001cee:	e01e      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x312>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fae2 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e004      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x32a>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	e016      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x358>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d66:	2320      	movs	r3, #32
 8001d68:	e004      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d106      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2102      	movs	r1, #2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fab3 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fa97 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x396>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2103      	movs	r1, #3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fa8c 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	0e9b      	lsrs	r3, r3, #26
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	e017      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x3c6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2103      	movs	r1, #3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fa81 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dcc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	e003      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x3de>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0e9b      	lsrs	r3, r3, #26
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	e011      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x402>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d106      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2103      	movs	r1, #3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fa5e 	bl	80012ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fb73 	bl	8001520 <LL_ADC_IsEnabled>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f040 813f 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f7ff fad2 	bl	80013f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a8e      	ldr	r2, [pc, #568]	; (8002094 <HAL_ADC_ConfigChannel+0x678>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f040 8130 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x46c>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	bf94      	ite	ls
 8001e80:	2301      	movls	r3, #1
 8001e82:	2300      	movhi	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e019      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x4a0>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e003      	b.n	8001eac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2b09      	cmp	r3, #9
 8001eb4:	bf94      	ite	ls
 8001eb6:	2301      	movls	r3, #1
 8001eb8:	2300      	movhi	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d079      	beq.n	8001fb4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x4c0>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	069b      	lsls	r3, r3, #26
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eda:	e015      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x4ec>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	e003      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x50c>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	e017      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x53c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	ea42 0103 	orr.w	r1, r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x562>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	051b      	lsls	r3, r3, #20
 8001f7c:	e018      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x594>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	e003      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	e080      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x5b4>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	069b      	lsls	r3, r3, #26
 8001fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fce:	e015      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x5e0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	069b      	lsls	r3, r3, #26
 8001ff8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_ConfigChannel+0x600>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	3301      	adds	r3, #1
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	e017      	b.n	800204c <HAL_ADC_ConfigChannel+0x630>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	61fb      	str	r3, [r7, #28]
  return result;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e003      	b.n	8002040 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	ea42 0103 	orr.w	r1, r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10d      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x65c>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	3301      	adds	r3, #1
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	3b1e      	subs	r3, #30
 8002070:	051b      	lsls	r3, r3, #20
 8002072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002076:	e01d      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x698>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	613b      	str	r3, [r7, #16]
  return result;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e005      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x684>
 8002094:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	3b1e      	subs	r3, #30
 80020ae:	051b      	lsls	r3, r3, #20
 80020b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b4:	430b      	orrs	r3, r1
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	6892      	ldr	r2, [r2, #8]
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7ff f970 	bl	80013a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d07a      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020cc:	4843      	ldr	r0, [pc, #268]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 80020ce:	f7ff f8c5 	bl	800125c <LL_ADC_GetCommonPathInternalCh>
 80020d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a41      	ldr	r2, [pc, #260]	; (80021e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d12c      	bne.n	800213a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d126      	bne.n	800213a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a3c      	ldr	r2, [pc, #240]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x6e4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a3b      	ldr	r2, [pc, #236]	; (80021e8 <HAL_ADC_ConfigChannel+0x7cc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d15d      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002108:	4619      	mov	r1, r3
 800210a:	4834      	ldr	r0, [pc, #208]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 800210c:	f7ff f893 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_ADC_ConfigChannel+0x7d0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	4a36      	ldr	r2, [pc, #216]	; (80021f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800212a:	e002      	b.n	8002132 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3b01      	subs	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002138:	e040      	b.n	80021bc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2d      	ldr	r2, [pc, #180]	; (80021f4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d118      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x75a>
 8002144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x748>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d12d      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216c:	4619      	mov	r1, r3
 800216e:	481b      	ldr	r0, [pc, #108]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 8002170:	f7ff f861 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002174:	e024      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d120      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11a      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d115      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800219a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800219e:	4619      	mov	r1, r3
 80021a0:	480e      	ldr	r0, [pc, #56]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 80021a2:	f7ff f848 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
 80021a6:	e00c      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021ba:	e002      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	37d8      	adds	r7, #216	; 0xd8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	80080000 	.word	0x80080000
 80021dc:	50040300 	.word	0x50040300
 80021e0:	c7520000 	.word	0xc7520000
 80021e4:	50040000 	.word	0x50040000
 80021e8:	50040200 	.word	0x50040200
 80021ec:	20000000 	.word	0x20000000
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	cb840000 	.word	0xcb840000
 80021f8:	80000001 	.word	0x80000001

080021fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f987 	bl	8001520 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d169      	bne.n	80022ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <ADC_Enable+0xfc>)
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e055      	b.n	80022ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f956 	bl	80014f8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800224c:	482b      	ldr	r0, [pc, #172]	; (80022fc <ADC_Enable+0x100>)
 800224e:	f7ff f805 	bl	800125c <LL_ADC_GetCommonPathInternalCh>
 8002252:	4603      	mov	r3, r0
 8002254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <ADC_Enable+0x104>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <ADC_Enable+0x108>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002276:	e002      	b.n	800227e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3b01      	subs	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002284:	f7fe ff94 	bl	80011b0 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800228a:	e028      	b.n	80022de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f945 	bl	8001520 <LL_ADC_IsEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff f929 	bl	80014f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022a6:	f7fe ff83 	bl	80011b0 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d914      	bls.n	80022de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d00d      	beq.n	80022de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d1cf      	bne.n	800228c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	8000003f 	.word	0x8000003f
 80022fc:	50040300 	.word	0x50040300
 8002300:	20000000 	.word	0x20000000
 8002304:	053e2d63 	.word	0x053e2d63

08002308 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800231e:	2b00      	cmp	r3, #0
 8002320:	d14b      	bne.n	80023ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d021      	beq.n	8002380 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe ffee 	bl	8001322 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d032      	beq.n	80023b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d12b      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11f      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
 800237e:	e018      	b.n	80023b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d111      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff fb14 	bl	80019e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023b8:	e00e      	b.n	80023d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fb1e 	bl	8001a08 <HAL_ADC_ErrorCallback>
}
 80023cc:	e004      	b.n	80023d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff fb00 	bl	80019f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff faf0 	bl	8001a08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <LL_ADC_IsEnabled>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <LL_ADC_IsEnabled+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_ADC_IsEnabled+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_REG_IsConversionOngoing>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d101      	bne.n	800246e <LL_ADC_REG_IsConversionOngoing+0x18>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b09f      	sub	sp, #124	; 0x7c
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002496:	2302      	movs	r3, #2
 8002498:	e093      	b.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024a2:	2300      	movs	r3, #0
 80024a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024a6:	2300      	movs	r3, #0
 80024a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a47      	ldr	r2, [pc, #284]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	e001      	b.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e072      	b.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ffb9 	bl	8002456 <LL_ADC_REG_IsConversionOngoing>
 80024e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ffb3 	bl	8002456 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d154      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d151      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024fc:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80024fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02c      	beq.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800251a:	035b      	lsls	r3, r3, #13
 800251c:	430b      	orrs	r3, r1
 800251e:	431a      	orrs	r2, r3
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002524:	4829      	ldr	r0, [pc, #164]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002526:	f7ff ff83 	bl	8002430 <LL_ADC_IsEnabled>
 800252a:	4604      	mov	r4, r0
 800252c:	4828      	ldr	r0, [pc, #160]	; (80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800252e:	f7ff ff7f 	bl	8002430 <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	431c      	orrs	r4, r3
 8002536:	4828      	ldr	r0, [pc, #160]	; (80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002538:	f7ff ff7a 	bl	8002430 <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	4323      	orrs	r3, r4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d137      	bne.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800254c:	f023 030f 	bic.w	r3, r3, #15
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	6811      	ldr	r1, [r2, #0]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	6892      	ldr	r2, [r2, #8]
 8002558:	430a      	orrs	r2, r1
 800255a:	431a      	orrs	r2, r3
 800255c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002560:	e028      	b.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800256e:	4817      	ldr	r0, [pc, #92]	; (80025cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002570:	f7ff ff5e 	bl	8002430 <LL_ADC_IsEnabled>
 8002574:	4604      	mov	r4, r0
 8002576:	4816      	ldr	r0, [pc, #88]	; (80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002578:	f7ff ff5a 	bl	8002430 <LL_ADC_IsEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	431c      	orrs	r4, r3
 8002580:	4815      	ldr	r0, [pc, #84]	; (80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002582:	f7ff ff55 	bl	8002430 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	4323      	orrs	r3, r4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d112      	bne.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002596:	f023 030f 	bic.w	r3, r3, #15
 800259a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800259c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800259e:	e009      	b.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80025b2:	e000      	b.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	377c      	adds	r7, #124	; 0x7c
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	50040000 	.word	0x50040000
 80025d0:	50040100 	.word	0x50040100
 80025d4:	50040300 	.word	0x50040300
 80025d8:	50040200 	.word	0x50040200

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4907      	ldr	r1, [pc, #28]	; (8002678 <__NVIC_EnableIRQ+0x38>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000e100 	.word	0xe000e100

0800267c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	2b00      	cmp	r3, #0
 800268e:	db0a      	blt.n	80026a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	490c      	ldr	r1, [pc, #48]	; (80026c8 <__NVIC_SetPriority+0x4c>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	440b      	add	r3, r1
 80026a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a4:	e00a      	b.n	80026bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <__NVIC_SetPriority+0x50>)
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	3b04      	subs	r3, #4
 80026b4:	0112      	lsls	r2, r2, #4
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	440b      	add	r3, r1
 80026ba:	761a      	strb	r2, [r3, #24]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000e100 	.word	0xe000e100
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f1c3 0307 	rsb	r3, r3, #7
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	bf28      	it	cs
 80026ee:	2304      	movcs	r3, #4
 80026f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d902      	bls.n	8002700 <NVIC_EncodePriority+0x30>
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3b03      	subs	r3, #3
 80026fe:	e000      	b.n	8002702 <NVIC_EncodePriority+0x32>
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	401a      	ands	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	43d9      	mvns	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	4313      	orrs	r3, r2
         );
}
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	; 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d301      	bcc.n	800274e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <SysTick_Config+0x40>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002756:	210f      	movs	r1, #15
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f7ff ff8e 	bl	800267c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <SysTick_Config+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SysTick_Config+0x40>)
 8002768:	2207      	movs	r2, #7
 800276a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff29 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff3e 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff8e 	bl	80026d0 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5d 	bl	800267c <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff31 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa2 	bl	8002738 <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e098      	b.n	8002944 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_DMA_Init+0x150>)
 800281a:	429a      	cmp	r2, r3
 800281c:	d80f      	bhi.n	800283e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b4b      	ldr	r3, [pc, #300]	; (8002954 <HAL_DMA_Init+0x154>)
 8002826:	4413      	add	r3, r2
 8002828:	4a4b      	ldr	r2, [pc, #300]	; (8002958 <HAL_DMA_Init+0x158>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a48      	ldr	r2, [pc, #288]	; (800295c <HAL_DMA_Init+0x15c>)
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
 800283c:	e00e      	b.n	800285c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_DMA_Init+0x160>)
 8002846:	4413      	add	r3, r2
 8002848:	4a43      	ldr	r2, [pc, #268]	; (8002958 <HAL_DMA_Init+0x158>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	009a      	lsls	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a42      	ldr	r2, [pc, #264]	; (8002964 <HAL_DMA_Init+0x164>)
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b6:	d039      	beq.n	800292c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	4a27      	ldr	r2, [pc, #156]	; (800295c <HAL_DMA_Init+0x15c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d11a      	bne.n	80028f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_DMA_Init+0x168>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f003 031c 	and.w	r3, r3, #28
 80028ce:	210f      	movs	r1, #15
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4924      	ldr	r1, [pc, #144]	; (8002968 <HAL_DMA_Init+0x168>)
 80028d8:	4013      	ands	r3, r2
 80028da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_DMA_Init+0x168>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f003 031c 	and.w	r3, r3, #28
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	491d      	ldr	r1, [pc, #116]	; (8002968 <HAL_DMA_Init+0x168>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
 80028f6:	e019      	b.n	800292c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_DMA_Init+0x16c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	f003 031c 	and.w	r3, r3, #28
 8002904:	210f      	movs	r1, #15
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	4917      	ldr	r1, [pc, #92]	; (800296c <HAL_DMA_Init+0x16c>)
 800290e:	4013      	ands	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_DMA_Init+0x16c>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f003 031c 	and.w	r3, r3, #28
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	4911      	ldr	r1, [pc, #68]	; (800296c <HAL_DMA_Init+0x16c>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40020407 	.word	0x40020407
 8002954:	bffdfff8 	.word	0xbffdfff8
 8002958:	cccccccd 	.word	0xcccccccd
 800295c:	40020000 	.word	0x40020000
 8002960:	bffdfbf8 	.word	0xbffdfbf8
 8002964:	40020400 	.word	0x40020400
 8002968:	400200a8 	.word	0x400200a8
 800296c:	400204a8 	.word	0x400204a8

08002970 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_DMA_Start_IT+0x20>
 800298c:	2302      	movs	r3, #2
 800298e:	e04b      	b.n	8002a28 <HAL_DMA_Start_IT+0xb8>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d13a      	bne.n	8002a1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f8e0 	bl	8002b8e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 020e 	orr.w	r2, r2, #14
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e00f      	b.n	8002a08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 020a 	orr.w	r2, r2, #10
 8002a06:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e005      	b.n	8002a26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
 8002a24:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	f003 031c 	and.w	r3, r3, #28
 8002a50:	2204      	movs	r2, #4
 8002a52:	409a      	lsls	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d026      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x7a>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d021      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f003 021c 	and.w	r2, r3, #28
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2104      	movs	r1, #4
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d071      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002aa8:	e06c      	b.n	8002b84 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 031c 	and.w	r3, r3, #28
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0xec>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d029      	beq.n	8002b1c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 020a 	bic.w	r2, r2, #10
 8002ae4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f003 021c 	and.w	r2, r3, #28
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2102      	movs	r1, #2
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d038      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b1a:	e033      	b.n	8002b84 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	f003 031c 	and.w	r3, r3, #28
 8002b24:	2208      	movs	r2, #8
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02a      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x156>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d025      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 020e 	bic.w	r2, r2, #14
 8002b48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f003 021c 	and.w	r2, r3, #28
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
}
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f003 021c 	and.w	r2, r3, #28
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d108      	bne.n	8002bd2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bd0:	e007      	b.n	8002be2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	60da      	str	r2, [r3, #12]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfe:	e17f      	b.n	8002f00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8171 	beq.w	8002efa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d005      	beq.n	8002c30 <HAL_GPIO_Init+0x40>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d130      	bne.n	8002c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c66:	2201      	movs	r2, #1
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 0201 	and.w	r2, r3, #1
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d118      	bne.n	8002cd0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	08db      	lsrs	r3, r3, #3
 8002cba:	f003 0201 	and.w	r2, r3, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d017      	beq.n	8002d0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d123      	bne.n	8002d60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	6939      	ldr	r1, [r7, #16]
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80ac 	beq.w	8002efa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <HAL_GPIO_Init+0x330>)
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	4a5e      	ldr	r2, [pc, #376]	; (8002f20 <HAL_GPIO_Init+0x330>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6613      	str	r3, [r2, #96]	; 0x60
 8002dae:	4b5c      	ldr	r3, [pc, #368]	; (8002f20 <HAL_GPIO_Init+0x330>)
 8002db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dba:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_GPIO_Init+0x334>)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de4:	d025      	beq.n	8002e32 <HAL_GPIO_Init+0x242>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4f      	ldr	r2, [pc, #316]	; (8002f28 <HAL_GPIO_Init+0x338>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <HAL_GPIO_Init+0x23e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4e      	ldr	r2, [pc, #312]	; (8002f2c <HAL_GPIO_Init+0x33c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d019      	beq.n	8002e2a <HAL_GPIO_Init+0x23a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_GPIO_Init+0x340>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_GPIO_Init+0x236>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4c      	ldr	r2, [pc, #304]	; (8002f34 <HAL_GPIO_Init+0x344>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00d      	beq.n	8002e22 <HAL_GPIO_Init+0x232>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <HAL_GPIO_Init+0x348>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_GPIO_Init+0x22e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4a      	ldr	r2, [pc, #296]	; (8002f3c <HAL_GPIO_Init+0x34c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_GPIO_Init+0x22a>
 8002e16:	2306      	movs	r3, #6
 8002e18:	e00c      	b.n	8002e34 <HAL_GPIO_Init+0x244>
 8002e1a:	2307      	movs	r3, #7
 8002e1c:	e00a      	b.n	8002e34 <HAL_GPIO_Init+0x244>
 8002e1e:	2305      	movs	r3, #5
 8002e20:	e008      	b.n	8002e34 <HAL_GPIO_Init+0x244>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x244>
 8002e26:	2303      	movs	r3, #3
 8002e28:	e004      	b.n	8002e34 <HAL_GPIO_Init+0x244>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_Init+0x244>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x244>
 8002e32:	2300      	movs	r3, #0
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	f002 0203 	and.w	r2, r2, #3
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	4093      	lsls	r3, r2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e44:	4937      	ldr	r1, [pc, #220]	; (8002f24 <HAL_GPIO_Init+0x334>)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e76:	4a32      	ldr	r2, [pc, #200]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e7c:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ea0:	4a27      	ldr	r2, [pc, #156]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ef4:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f47f ae78 	bne.w	8002c00 <HAL_GPIO_Init+0x10>
  }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	48000800 	.word	0x48000800
 8002f30:	48000c00 	.word	0x48000c00
 8002f34:	48001000 	.word	0x48001000
 8002f38:	48001400 	.word	0x48001400
 8002f3c:	48001800 	.word	0x48001800
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9e:	d130      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa0:	4b23      	ldr	r3, [pc, #140]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fac:	d038      	beq.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2232      	movs	r2, #50	; 0x32
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9b      	lsrs	r3, r3, #18
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd4:	e002      	b.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d102      	bne.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f2      	bne.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffc:	d110      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e00f      	b.n	8003022 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d007      	beq.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003018:	4a05      	ldr	r2, [pc, #20]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40007000 	.word	0x40007000
 8003034:	20000000 	.word	0x20000000
 8003038:	431bde83 	.word	0x431bde83

0800303c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e3ca      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4b97      	ldr	r3, [pc, #604]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003058:	4b94      	ldr	r3, [pc, #592]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80e4 	beq.w	8003238 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_RCC_OscConfig+0x4a>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b0c      	cmp	r3, #12
 800307a:	f040 808b 	bne.w	8003194 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b01      	cmp	r3, #1
 8003082:	f040 8087 	bne.w	8003194 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_RCC_OscConfig+0x62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e3a2      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	4b82      	ldr	r3, [pc, #520]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <HAL_RCC_OscConfig+0x7c>
 80030ae:	4b7f      	ldr	r3, [pc, #508]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b6:	e005      	b.n	80030c4 <HAL_RCC_OscConfig+0x88>
 80030b8:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d223      	bcs.n	8003110 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fd55 	bl	8003b7c <RCC_SetFlashLatencyFromMSIRange>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e383      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030dc:	4b73      	ldr	r3, [pc, #460]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a72      	ldr	r2, [pc, #456]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030e2:	f043 0308 	orr.w	r3, r3, #8
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	496d      	ldr	r1, [pc, #436]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030fa:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	4968      	ldr	r1, [pc, #416]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
 800310e:	e025      	b.n	800315c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003110:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b63      	ldr	r3, [pc, #396]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4960      	ldr	r1, [pc, #384]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	495b      	ldr	r1, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fd15 	bl	8003b7c <RCC_SetFlashLatencyFromMSIRange>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e343      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800315c:	f000 fc4a 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b52      	ldr	r3, [pc, #328]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	4950      	ldr	r1, [pc, #320]	; (80032b0 <HAL_RCC_OscConfig+0x274>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	4a4e      	ldr	r2, [pc, #312]	; (80032b4 <HAL_RCC_OscConfig+0x278>)
 800317a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800317c:	4b4e      	ldr	r3, [pc, #312]	; (80032b8 <HAL_RCC_OscConfig+0x27c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd ffc5 	bl	8001110 <HAL_InitTick>
 8003186:	4603      	mov	r3, r0
 8003188:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d052      	beq.n	8003236 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	e327      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d032      	beq.n	8003202 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a42      	ldr	r2, [pc, #264]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a8:	f7fe f802 	bl	80011b0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b0:	f7fd fffe 	bl	80011b0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e310      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c2:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a36      	ldr	r2, [pc, #216]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	4931      	ldr	r1, [pc, #196]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ec:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	492c      	ldr	r1, [pc, #176]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
 8003200:	e01a      	b.n	8003238 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800320e:	f7fd ffcf 	bl	80011b0 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003216:	f7fd ffcb 	bl	80011b0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e2dd      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003228:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x1da>
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003236:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d074      	beq.n	800332e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b08      	cmp	r3, #8
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x21a>
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d10e      	bne.n	800326e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d064      	beq.n	800332c <HAL_RCC_OscConfig+0x2f0>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d160      	bne.n	800332c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e2ba      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x24a>
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e026      	b.n	80032d4 <HAL_RCC_OscConfig+0x298>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800328e:	d115      	bne.n	80032bc <HAL_RCC_OscConfig+0x280>
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a05      	ldr	r2, [pc, #20]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a02      	ldr	r2, [pc, #8]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e014      	b.n	80032d4 <HAL_RCC_OscConfig+0x298>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	08004f90 	.word	0x08004f90
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000004 	.word	0x20000004
 80032bc:	4ba0      	ldr	r3, [pc, #640]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a9f      	ldr	r2, [pc, #636]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b9d      	ldr	r3, [pc, #628]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a9c      	ldr	r2, [pc, #624]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80032ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fd ff68 	bl	80011b0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fd ff64 	bl	80011b0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e276      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	4b92      	ldr	r3, [pc, #584]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2a8>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd ff54 	bl	80011b0 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fd ff50 	bl	80011b0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e262      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x2d0>
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d060      	beq.n	80033fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x310>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d119      	bne.n	800337a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d116      	bne.n	800337a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334c:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_OscConfig+0x328>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e23f      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	4973      	ldr	r1, [pc, #460]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003378:	e040      	b.n	80033fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d023      	beq.n	80033ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003382:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fd ff0f 	bl	80011b0 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003396:	f7fd ff0b 	bl	80011b0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e21d      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a8:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b62      	ldr	r3, [pc, #392]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	495f      	ldr	r1, [pc, #380]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
 80033c8:	e018      	b.n	80033fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ca:	4b5d      	ldr	r3, [pc, #372]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5c      	ldr	r2, [pc, #368]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80033d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fd feeb 	bl	80011b0 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033de:	f7fd fee7 	bl	80011b0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e1f9      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d03c      	beq.n	8003482 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01c      	beq.n	800344a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003416:	4a4a      	ldr	r2, [pc, #296]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd fec6 	bl	80011b0 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003428:	f7fd fec2 	bl	80011b0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1d4      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 800343c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ef      	beq.n	8003428 <HAL_RCC_OscConfig+0x3ec>
 8003448:	e01b      	b.n	8003482 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344a:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 800344c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003450:	4a3b      	ldr	r2, [pc, #236]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fd fea9 	bl	80011b0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003462:	f7fd fea5 	bl	80011b0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1b7      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003474:	4b32      	ldr	r3, [pc, #200]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ef      	bne.n	8003462 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80a6 	beq.w	80035dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003490:	2300      	movs	r3, #0
 8003492:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003494:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6593      	str	r3, [r2, #88]	; 0x58
 80034ac:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b8:	2301      	movs	r3, #1
 80034ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_RCC_OscConfig+0x508>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d118      	bne.n	80034fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c8:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCC_OscConfig+0x508>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_RCC_OscConfig+0x508>)
 80034ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d4:	f7fd fe6c 	bl	80011b0 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034dc:	f7fd fe68 	bl	80011b0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e17a      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_RCC_OscConfig+0x508>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d108      	bne.n	8003514 <HAL_RCC_OscConfig+0x4d8>
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003512:	e029      	b.n	8003568 <HAL_RCC_OscConfig+0x52c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d115      	bne.n	8003548 <HAL_RCC_OscConfig+0x50c>
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	4a03      	ldr	r2, [pc, #12]	; (8003540 <HAL_RCC_OscConfig+0x504>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x52c>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
 8003548:	4b9c      	ldr	r3, [pc, #624]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	4a9b      	ldr	r2, [pc, #620]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003558:	4b98      	ldr	r3, [pc, #608]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	4a97      	ldr	r2, [pc, #604]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d016      	beq.n	800359e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fd fe1e 	bl	80011b0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	e00a      	b.n	800358e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003578:	f7fd fe1a 	bl	80011b0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e12a      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	4b8b      	ldr	r3, [pc, #556]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ed      	beq.n	8003578 <HAL_RCC_OscConfig+0x53c>
 800359c:	e015      	b.n	80035ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359e:	f7fd fe07 	bl	80011b0 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fd fe03 	bl	80011b0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e113      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035bc:	4b7f      	ldr	r3, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ed      	bne.n	80035a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ca:	7ffb      	ldrb	r3, [r7, #31]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d0:	4b7a      	ldr	r3, [pc, #488]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a79      	ldr	r2, [pc, #484]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 80035d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80fe 	beq.w	80037e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	f040 80d0 	bne.w	8003790 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035f0:	4b72      	ldr	r3, [pc, #456]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0203 	and.w	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	429a      	cmp	r2, r3
 8003602:	d130      	bne.n	8003666 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	3b01      	subs	r3, #1
 8003610:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d127      	bne.n	8003666 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d11f      	bne.n	8003666 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003630:	2a07      	cmp	r2, #7
 8003632:	bf14      	ite	ne
 8003634:	2201      	movne	r2, #1
 8003636:	2200      	moveq	r2, #0
 8003638:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363a:	4293      	cmp	r3, r2
 800363c:	d113      	bne.n	8003666 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	3b01      	subs	r3, #1
 800364c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d109      	bne.n	8003666 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	3b01      	subs	r3, #1
 8003660:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d06e      	beq.n	8003744 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d069      	beq.n	8003740 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800366c:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0ad      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800368e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003692:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003694:	f7fd fd8c 	bl	80011b0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fd88 	bl	80011b0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e09a      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ae:	4b43      	ldr	r3, [pc, #268]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ba:	4b40      	ldr	r3, [pc, #256]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_RCC_OscConfig+0x784>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036ca:	3a01      	subs	r2, #1
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036d4:	0212      	lsls	r2, r2, #8
 80036d6:	4311      	orrs	r1, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036dc:	0852      	lsrs	r2, r2, #1
 80036de:	3a01      	subs	r2, #1
 80036e0:	0552      	lsls	r2, r2, #21
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	0652      	lsls	r2, r2, #25
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f4:	0912      	lsrs	r2, r2, #4
 80036f6:	0452      	lsls	r2, r2, #17
 80036f8:	430a      	orrs	r2, r1
 80036fa:	4930      	ldr	r1, [pc, #192]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003700:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003718:	f7fd fd4a 	bl	80011b0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fd fd46 	bl	80011b0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e058      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373e:	e050      	b.n	80037e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e04f      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d148      	bne.n	80037e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003768:	f7fd fd22 	bl	80011b0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fd fd1e 	bl	80011b0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e030      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x734>
 800378e:	e028      	b.n	80037e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d023      	beq.n	80037de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a08      	ldr	r2, [pc, #32]	; (80037bc <HAL_RCC_OscConfig+0x780>)
 800379c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd fd05 	bl	80011b0 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a8:	e00c      	b.n	80037c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fd fd01 	bl	80011b0 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d905      	bls.n	80037c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e013      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
 80037bc:	40021000 	.word	0x40021000
 80037c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_OscConfig+0x7b0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ec      	bne.n	80037aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCC_OscConfig+0x7b0>)
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	4905      	ldr	r1, [pc, #20]	; (80037ec <HAL_RCC_OscConfig+0x7b0>)
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCC_OscConfig+0x7b4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
 80037dc:	e001      	b.n	80037e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	feeefffc 	.word	0xfeeefffc

080037f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0e7      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b75      	ldr	r3, [pc, #468]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d910      	bls.n	8003838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b72      	ldr	r3, [pc, #456]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4970      	ldr	r1, [pc, #448]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b6e      	ldr	r3, [pc, #440]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0cf      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b66      	ldr	r3, [pc, #408]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003850:	429a      	cmp	r2, r3
 8003852:	d908      	bls.n	8003866 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4960      	ldr	r1, [pc, #384]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d04c      	beq.n	800390c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	4b5a      	ldr	r3, [pc, #360]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d121      	bne.n	80038ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e0a6      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003892:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d115      	bne.n	80038ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e09a      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038aa:	4b4e      	ldr	r3, [pc, #312]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08e      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ba:	4b4a      	ldr	r3, [pc, #296]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e086      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4943      	ldr	r1, [pc, #268]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038dc:	f7fd fc68 	bl	80011b0 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fd fc64 	bl	80011b0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e06e      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003924:	429a      	cmp	r2, r3
 8003926:	d208      	bcs.n	800393a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003928:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	492b      	ldr	r1, [pc, #172]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d210      	bcs.n	800396a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 0207 	bic.w	r2, r3, #7
 8003950:	4923      	ldr	r1, [pc, #140]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCC_ClockConfig+0x1ec>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d001      	beq.n	800396a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e036      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4918      	ldr	r1, [pc, #96]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4910      	ldr	r1, [pc, #64]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a8:	f000 f824 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	490b      	ldr	r1, [pc, #44]	; (80039e8 <HAL_RCC_ClockConfig+0x1f4>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1f8>)
 80039c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1fc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd fb9f 	bl	8001110 <HAL_InitTick>
 80039d2:	4603      	mov	r3, r0
 80039d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80039d6:	7afb      	ldrb	r3, [r7, #11]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40021000 	.word	0x40021000
 80039e8:	08004f90 	.word	0x08004f90
 80039ec:	20000000 	.word	0x20000000
 80039f0:	20000004 	.word	0x20000004

080039f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b089      	sub	sp, #36	; 0x24
 80039f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a02:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x34>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d121      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d11e      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a28:	4b34      	ldr	r3, [pc, #208]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a34:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	e005      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a44:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a50:	4a2b      	ldr	r2, [pc, #172]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10d      	bne.n	8003a7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d102      	bne.n	8003a72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e004      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d134      	bne.n	8003aec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d003      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xac>
 8003a98:	e005      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a9c:	617b      	str	r3, [r7, #20]
      break;
 8003a9e:	e005      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aa2:	617b      	str	r3, [r7, #20]
      break;
 8003aa4:	e002      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	617b      	str	r3, [r7, #20]
      break;
 8003aaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	fb03 f202 	mul.w	r2, r3, r2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	0e5b      	lsrs	r3, r3, #25
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	3301      	adds	r3, #1
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aec:	69bb      	ldr	r3, [r7, #24]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08004fa8 	.word	0x08004fa8
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	007a1200 	.word	0x007a1200

08003b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b28:	f7ff fff0 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4904      	ldr	r1, [pc, #16]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08004fa0 	.word	0x08004fa0

08003b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b54:	f7ff ffda 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	0adb      	lsrs	r3, r3, #11
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4904      	ldr	r1, [pc, #16]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	08004fa0 	.word	0x08004fa0

08003b7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b88:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b94:	f7ff f9ee 	bl	8002f74 <HAL_PWREx_GetVoltageRange>
 8003b98:	6178      	str	r0, [r7, #20]
 8003b9a:	e014      	b.n	8003bc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bb4:	f7ff f9de 	bl	8002f74 <HAL_PWREx_GetVoltageRange>
 8003bb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bcc:	d10b      	bne.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d919      	bls.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2ba0      	cmp	r3, #160	; 0xa0
 8003bd8:	d902      	bls.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bda:	2302      	movs	r3, #2
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e013      	b.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be0:	2301      	movs	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e010      	b.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d902      	bls.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bec:	2303      	movs	r3, #3
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e00a      	b.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d102      	bne.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e004      	b.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d101      	bne.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c04:	2301      	movs	r3, #1
 8003c06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 0207 	bic.w	r2, r3, #7
 8003c10:	4909      	ldr	r1, [pc, #36]	; (8003c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40022000 	.word	0x40022000

08003c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c44:	2300      	movs	r3, #0
 8003c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c48:	2300      	movs	r3, #0
 8003c4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d041      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c60:	d02a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c66:	d824      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c6c:	d008      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c72:	d81e      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7c:	d010      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c7e:	e018      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c80:	4b86      	ldr	r3, [pc, #536]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a85      	ldr	r2, [pc, #532]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c8c:	e015      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fabb 	bl	8004210 <RCCEx_PLLSAI1_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c9e:	e00c      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3320      	adds	r3, #32
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fba6 	bl	80043f8 <RCCEx_PLLSAI2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb0:	e003      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	74fb      	strb	r3, [r7, #19]
      break;
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc0:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cce:	4973      	ldr	r1, [pc, #460]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cd6:	e001      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d041      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cf0:	d02a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cf6:	d824      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d02:	d81e      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d0e:	e018      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d10:	4b62      	ldr	r3, [pc, #392]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a61      	ldr	r2, [pc, #388]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d1c:	e015      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fa73 	bl	8004210 <RCCEx_PLLSAI1_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2e:	e00c      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3320      	adds	r3, #32
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fb5e 	bl	80043f8 <RCCEx_PLLSAI2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	74fb      	strb	r3, [r7, #19]
      break;
 8003d46:	e000      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d50:	4b52      	ldr	r3, [pc, #328]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5e:	494f      	ldr	r1, [pc, #316]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d66:	e001      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a0 	beq.w	8003eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003da0:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dac:	2301      	movs	r3, #1
 8003dae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db0:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3a      	ldr	r2, [pc, #232]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dbc:	f7fd f9f8 	bl	80011b0 <HAL_GetTick>
 8003dc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dc2:	e009      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc4:	f7fd f9f4 	bl	80011b0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d902      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	74fb      	strb	r3, [r7, #19]
        break;
 8003dd6:	e005      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd8:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ef      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d15c      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dea:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d019      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	4a20      	ldr	r2, [pc, #128]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fd f9b3 	bl	80011b0 <HAL_GetTick>
 8003e4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd f9af 	bl	80011b0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d902      	bls.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	74fb      	strb	r3, [r7, #19]
            break;
 8003e64:	e006      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ec      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8a:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e92:	e009      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	74bb      	strb	r3, [r7, #18]
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea8:	7c7b      	ldrb	r3, [r7, #17]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	4b9e      	ldr	r3, [pc, #632]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4a9d      	ldr	r2, [pc, #628]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec6:	4b98      	ldr	r3, [pc, #608]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 0203 	bic.w	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	4994      	ldr	r1, [pc, #592]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee8:	4b8f      	ldr	r3, [pc, #572]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 020c 	bic.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	498c      	ldr	r1, [pc, #560]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0a:	4b87      	ldr	r3, [pc, #540]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	4983      	ldr	r1, [pc, #524]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2c:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	497b      	ldr	r1, [pc, #492]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f4e:	4b76      	ldr	r3, [pc, #472]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5c:	4972      	ldr	r1, [pc, #456]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f70:	4b6d      	ldr	r3, [pc, #436]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7e:	496a      	ldr	r1, [pc, #424]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f92:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	4961      	ldr	r1, [pc, #388]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb4:	4b5c      	ldr	r3, [pc, #368]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc2:	4959      	ldr	r1, [pc, #356]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd6:	4b54      	ldr	r3, [pc, #336]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	4950      	ldr	r1, [pc, #320]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	4948      	ldr	r1, [pc, #288]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401a:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	493f      	ldr	r1, [pc, #252]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d028      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800403c:	4b3a      	ldr	r3, [pc, #232]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404a:	4937      	ldr	r1, [pc, #220]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405a:	d106      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a31      	ldr	r2, [pc, #196]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004066:	60d3      	str	r3, [r2, #12]
 8004068:	e011      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004072:	d10c      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f8c8 	bl	8004210 <RCCEx_PLLSAI1_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d028      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	491f      	ldr	r1, [pc, #124]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b8:	d106      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c4:	60d3      	str	r3, [r2, #12]
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2101      	movs	r1, #1
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f899 	bl	8004210 <RCCEx_PLLSAI1_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d02b      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	4908      	ldr	r1, [pc, #32]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004116:	d109      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a02      	ldr	r2, [pc, #8]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004122:	60d3      	str	r3, [r2, #12]
 8004124:	e014      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004134:	d10c      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	2101      	movs	r1, #1
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f867 	bl	8004210 <RCCEx_PLLSAI1_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02f      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800415c:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800416a:	4928      	ldr	r1, [pc, #160]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800417a:	d10d      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	2102      	movs	r1, #2
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f844 	bl	8004210 <RCCEx_PLLSAI1_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800418c:	7cfb      	ldrb	r3, [r7, #19]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d014      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	74bb      	strb	r3, [r7, #18]
 8004196:	e011      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3320      	adds	r3, #32
 80041a6:	2102      	movs	r1, #2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f925 	bl	80043f8 <RCCEx_PLLSAI2_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041c8:	4b10      	ldr	r3, [pc, #64]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d6:	490d      	ldr	r1, [pc, #52]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fa:	4904      	ldr	r1, [pc, #16]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004202:	7cbb      	ldrb	r3, [r7, #18]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000

08004210 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800421e:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d018      	beq.n	800425c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800422a:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0203 	and.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d10d      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
       ||
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004242:	4b6c      	ldr	r3, [pc, #432]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
       ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d047      	beq.n	80042e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e044      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d018      	beq.n	8004296 <RCCEx_PLLSAI1_Config+0x86>
 8004264:	2b03      	cmp	r3, #3
 8004266:	d825      	bhi.n	80042b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004268:	2b01      	cmp	r3, #1
 800426a:	d002      	beq.n	8004272 <RCCEx_PLLSAI1_Config+0x62>
 800426c:	2b02      	cmp	r3, #2
 800426e:	d009      	beq.n	8004284 <RCCEx_PLLSAI1_Config+0x74>
 8004270:	e020      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004272:	4b60      	ldr	r3, [pc, #384]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11d      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004282:	e01a      	b.n	80042ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004284:	4b5b      	ldr	r3, [pc, #364]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d116      	bne.n	80042be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004294:	e013      	b.n	80042be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004296:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042a2:	4b54      	ldr	r3, [pc, #336]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042b2:	e006      	b.n	80042c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      break;
 80042b8:	e004      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ba:	bf00      	nop
 80042bc:	e002      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ca:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	430b      	orrs	r3, r1
 80042e0:	4944      	ldr	r1, [pc, #272]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d17d      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a40      	ldr	r2, [pc, #256]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fc ff5a 	bl	80011b0 <HAL_GetTick>
 80042fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042fe:	e009      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004300:	f7fc ff56 	bl	80011b0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d902      	bls.n	8004314 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	73fb      	strb	r3, [r7, #15]
        break;
 8004312:	e005      	b.n	8004320 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004314:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ef      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d160      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d111      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6892      	ldr	r2, [r2, #8]
 800433c:	0211      	lsls	r1, r2, #8
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68d2      	ldr	r2, [r2, #12]
 8004342:	0912      	lsrs	r2, r2, #4
 8004344:	0452      	lsls	r2, r2, #17
 8004346:	430a      	orrs	r2, r1
 8004348:	492a      	ldr	r1, [pc, #168]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	610b      	str	r3, [r1, #16]
 800434e:	e027      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d112      	bne.n	800437c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004356:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800435e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6892      	ldr	r2, [r2, #8]
 8004366:	0211      	lsls	r1, r2, #8
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6912      	ldr	r2, [r2, #16]
 800436c:	0852      	lsrs	r2, r2, #1
 800436e:	3a01      	subs	r2, #1
 8004370:	0552      	lsls	r2, r2, #21
 8004372:	430a      	orrs	r2, r1
 8004374:	491f      	ldr	r1, [pc, #124]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	610b      	str	r3, [r1, #16]
 800437a:	e011      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004384:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6892      	ldr	r2, [r2, #8]
 800438c:	0211      	lsls	r1, r2, #8
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6952      	ldr	r2, [r2, #20]
 8004392:	0852      	lsrs	r2, r2, #1
 8004394:	3a01      	subs	r2, #1
 8004396:	0652      	lsls	r2, r2, #25
 8004398:	430a      	orrs	r2, r1
 800439a:	4916      	ldr	r1, [pc, #88]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fc ff00 	bl	80011b0 <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b2:	e009      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b4:	f7fc fefc 	bl	80011b0 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d902      	bls.n	80043c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	73fb      	strb	r3, [r7, #15]
          break;
 80043c6:	e005      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ef      	beq.n	80043b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000

080043f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d018      	beq.n	8004444 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004412:	4b67      	ldr	r3, [pc, #412]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d10d      	bne.n	800443e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
       ||
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800442a:	4b61      	ldr	r3, [pc, #388]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
       ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d047      	beq.n	80044ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e044      	b.n	80044ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d018      	beq.n	800447e <RCCEx_PLLSAI2_Config+0x86>
 800444c:	2b03      	cmp	r3, #3
 800444e:	d825      	bhi.n	800449c <RCCEx_PLLSAI2_Config+0xa4>
 8004450:	2b01      	cmp	r3, #1
 8004452:	d002      	beq.n	800445a <RCCEx_PLLSAI2_Config+0x62>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d009      	beq.n	800446c <RCCEx_PLLSAI2_Config+0x74>
 8004458:	e020      	b.n	800449c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800445a:	4b55      	ldr	r3, [pc, #340]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d11d      	bne.n	80044a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446a:	e01a      	b.n	80044a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e013      	b.n	80044a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800447e:	4b4c      	ldr	r3, [pc, #304]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800448a:	4b49      	ldr	r3, [pc, #292]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800449a:	e006      	b.n	80044aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      break;
 80044a0:	e004      	b.n	80044ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044a2:	bf00      	nop
 80044a4:	e002      	b.n	80044ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	430b      	orrs	r3, r1
 80044c8:	4939      	ldr	r1, [pc, #228]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d167      	bne.n	80045a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fc fe66 	bl	80011b0 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044e6:	e009      	b.n	80044fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044e8:	f7fc fe62 	bl	80011b0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	73fb      	strb	r3, [r7, #15]
        break;
 80044fa:	e005      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044fc:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ef      	bne.n	80044e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d14a      	bne.n	80045a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	0912      	lsrs	r2, r2, #4
 800452c:	0452      	lsls	r2, r2, #17
 800452e:	430a      	orrs	r2, r1
 8004530:	491f      	ldr	r1, [pc, #124]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	614b      	str	r3, [r1, #20]
 8004536:	e011      	b.n	800455c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004538:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004540:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6892      	ldr	r2, [r2, #8]
 8004548:	0211      	lsls	r1, r2, #8
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6912      	ldr	r2, [r2, #16]
 800454e:	0852      	lsrs	r2, r2, #1
 8004550:	3a01      	subs	r2, #1
 8004552:	0652      	lsls	r2, r2, #25
 8004554:	430a      	orrs	r2, r1
 8004556:	4916      	ldr	r1, [pc, #88]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fc fe22 	bl	80011b0 <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800456e:	e009      	b.n	8004584 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004570:	f7fc fe1e 	bl	80011b0 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d902      	bls.n	8004584 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	73fb      	strb	r3, [r7, #15]
          break;
 8004582:	e005      	b.n	8004590 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ef      	beq.n	8004570 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	4904      	ldr	r1, [pc, #16]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e040      	b.n	8004648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fcae 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f82c 	bl	8004650 <UART_SetConfig>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e022      	b.n	8004648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fad8 	bl	8004bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800461e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800462e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fb5f 	bl	8004d04 <UART_CheckIdleState>
 8004646:	4603      	mov	r3, r0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b08a      	sub	sp, #40	; 0x28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4313      	orrs	r3, r2
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4ba4      	ldr	r3, [pc, #656]	; (8004910 <UART_SetConfig+0x2c0>)
 8004680:	4013      	ands	r3, r2
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004688:	430b      	orrs	r3, r1
 800468a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a99      	ldr	r2, [pc, #612]	; (8004914 <UART_SetConfig+0x2c4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	4313      	orrs	r3, r2
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a90      	ldr	r2, [pc, #576]	; (8004918 <UART_SetConfig+0x2c8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d126      	bne.n	8004728 <UART_SetConfig+0xd8>
 80046da:	4b90      	ldr	r3, [pc, #576]	; (800491c <UART_SetConfig+0x2cc>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d81b      	bhi.n	8004720 <UART_SetConfig+0xd0>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0xa0>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004719 	.word	0x08004719
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e116      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e112      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e10e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e10a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e106      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7c      	ldr	r2, [pc, #496]	; (8004920 <UART_SetConfig+0x2d0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d138      	bne.n	80047a4 <UART_SetConfig+0x154>
 8004732:	4b7a      	ldr	r3, [pc, #488]	; (800491c <UART_SetConfig+0x2cc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d82d      	bhi.n	800479c <UART_SetConfig+0x14c>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0xf8>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800477d 	.word	0x0800477d
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800479d 	.word	0x0800479d
 8004754:	0800479d 	.word	0x0800479d
 8004758:	0800478d 	.word	0x0800478d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	0800479d 	.word	0x0800479d
 8004764:	0800479d 	.word	0x0800479d
 8004768:	08004785 	.word	0x08004785
 800476c:	0800479d 	.word	0x0800479d
 8004770:	0800479d 	.word	0x0800479d
 8004774:	0800479d 	.word	0x0800479d
 8004778:	08004795 	.word	0x08004795
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e0d8      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e0d4      	b.n	8004936 <UART_SetConfig+0x2e6>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e0d0      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e0cc      	b.n	8004936 <UART_SetConfig+0x2e6>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e0c8      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5e      	ldr	r2, [pc, #376]	; (8004924 <UART_SetConfig+0x2d4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d125      	bne.n	80047fa <UART_SetConfig+0x1aa>
 80047ae:	4b5b      	ldr	r3, [pc, #364]	; (800491c <UART_SetConfig+0x2cc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047b8:	2b30      	cmp	r3, #48	; 0x30
 80047ba:	d016      	beq.n	80047ea <UART_SetConfig+0x19a>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d818      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d00a      	beq.n	80047da <UART_SetConfig+0x18a>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d814      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <UART_SetConfig+0x182>
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d008      	beq.n	80047e2 <UART_SetConfig+0x192>
 80047d0:	e00f      	b.n	80047f2 <UART_SetConfig+0x1a2>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d8:	e0ad      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047da:	2302      	movs	r3, #2
 80047dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e0:	e0a9      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047e2:	2304      	movs	r3, #4
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e8:	e0a5      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047ea:	2308      	movs	r3, #8
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f0:	e0a1      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047f2:	2310      	movs	r3, #16
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f8:	e09d      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <UART_SetConfig+0x2d8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d125      	bne.n	8004850 <UART_SetConfig+0x200>
 8004804:	4b45      	ldr	r3, [pc, #276]	; (800491c <UART_SetConfig+0x2cc>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800480e:	2bc0      	cmp	r3, #192	; 0xc0
 8004810:	d016      	beq.n	8004840 <UART_SetConfig+0x1f0>
 8004812:	2bc0      	cmp	r3, #192	; 0xc0
 8004814:	d818      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d00a      	beq.n	8004830 <UART_SetConfig+0x1e0>
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d814      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <UART_SetConfig+0x1d8>
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d008      	beq.n	8004838 <UART_SetConfig+0x1e8>
 8004826:	e00f      	b.n	8004848 <UART_SetConfig+0x1f8>
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482e:	e082      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004830:	2302      	movs	r3, #2
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004836:	e07e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483e:	e07a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e076      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e072      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a35      	ldr	r2, [pc, #212]	; (800492c <UART_SetConfig+0x2dc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d12a      	bne.n	80048b0 <UART_SetConfig+0x260>
 800485a:	4b30      	ldr	r3, [pc, #192]	; (800491c <UART_SetConfig+0x2cc>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004868:	d01a      	beq.n	80048a0 <UART_SetConfig+0x250>
 800486a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486e:	d81b      	bhi.n	80048a8 <UART_SetConfig+0x258>
 8004870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004874:	d00c      	beq.n	8004890 <UART_SetConfig+0x240>
 8004876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487a:	d815      	bhi.n	80048a8 <UART_SetConfig+0x258>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <UART_SetConfig+0x238>
 8004880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0x248>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x258>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e052      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e04e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e04a      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e046      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e042      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <UART_SetConfig+0x2c4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d13a      	bne.n	8004930 <UART_SetConfig+0x2e0>
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <UART_SetConfig+0x2cc>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048c8:	d01a      	beq.n	8004900 <UART_SetConfig+0x2b0>
 80048ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ce:	d81b      	bhi.n	8004908 <UART_SetConfig+0x2b8>
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d4:	d00c      	beq.n	80048f0 <UART_SetConfig+0x2a0>
 80048d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048da:	d815      	bhi.n	8004908 <UART_SetConfig+0x2b8>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <UART_SetConfig+0x298>
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e4:	d008      	beq.n	80048f8 <UART_SetConfig+0x2a8>
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x2b8>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e022      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e01e      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e01a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e016      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e012      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40008000 	.word	0x40008000
 8004918:	40013800 	.word	0x40013800
 800491c:	40021000 	.word	0x40021000
 8004920:	40004400 	.word	0x40004400
 8004924:	40004800 	.word	0x40004800
 8004928:	40004c00 	.word	0x40004c00
 800492c:	40005000 	.word	0x40005000
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a9f      	ldr	r2, [pc, #636]	; (8004bb8 <UART_SetConfig+0x568>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d17a      	bne.n	8004a36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004944:	2b08      	cmp	r3, #8
 8004946:	d824      	bhi.n	8004992 <UART_SetConfig+0x342>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x300>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004975 	.word	0x08004975
 8004954:	08004993 	.word	0x08004993
 8004958:	0800497d 	.word	0x0800497d
 800495c:	08004993 	.word	0x08004993
 8004960:	08004983 	.word	0x08004983
 8004964:	08004993 	.word	0x08004993
 8004968:	08004993 	.word	0x08004993
 800496c:	08004993 	.word	0x08004993
 8004970:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004974:	f7ff f8d6 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8004978:	61f8      	str	r0, [r7, #28]
        break;
 800497a:	e010      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b8f      	ldr	r3, [pc, #572]	; (8004bbc <UART_SetConfig+0x56c>)
 800497e:	61fb      	str	r3, [r7, #28]
        break;
 8004980:	e00d      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7ff f837 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 8004986:	61f8      	str	r0, [r7, #28]
        break;
 8004988:	e009      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498e:	61fb      	str	r3, [r7, #28]
        break;
 8004990:	e005      	b.n	800499e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800499c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80fb 	beq.w	8004b9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d305      	bcc.n	80049c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d903      	bls.n	80049ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049c8:	e0e8      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2200      	movs	r2, #0
 80049ce:	461c      	mov	r4, r3
 80049d0:	4615      	mov	r5, r2
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	022b      	lsls	r3, r5, #8
 80049dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049e0:	0222      	lsls	r2, r4, #8
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	6849      	ldr	r1, [r1, #4]
 80049e6:	0849      	lsrs	r1, r1, #1
 80049e8:	2000      	movs	r0, #0
 80049ea:	4688      	mov	r8, r1
 80049ec:	4681      	mov	r9, r0
 80049ee:	eb12 0a08 	adds.w	sl, r2, r8
 80049f2:	eb43 0b09 	adc.w	fp, r3, r9
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a04:	4650      	mov	r0, sl
 8004a06:	4659      	mov	r1, fp
 8004a08:	f7fb fbde 	bl	80001c8 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4613      	mov	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1a:	d308      	bcc.n	8004a2e <UART_SetConfig+0x3de>
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d204      	bcs.n	8004a2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e0b6      	b.n	8004b9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a34:	e0b2      	b.n	8004b9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3e:	d15e      	bne.n	8004afe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d828      	bhi.n	8004a9a <UART_SetConfig+0x44a>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x400>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	08004a9b 	.word	0x08004a9b
 8004a60:	08004a8b 	.word	0x08004a8b
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004a9b 	.word	0x08004a9b
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004a93 	.word	0x08004a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7ff f856 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8004a78:	61f8      	str	r0, [r7, #28]
        break;
 8004a7a:	e014      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7ff f868 	bl	8003b50 <HAL_RCC_GetPCLK2Freq>
 8004a80:	61f8      	str	r0, [r7, #28]
        break;
 8004a82:	e010      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a84:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <UART_SetConfig+0x56c>)
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e00d      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8a:	f7fe ffb3 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 8004a8e:	61f8      	str	r0, [r7, #28]
        break;
 8004a90:	e009      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a96:	61fb      	str	r3, [r7, #28]
        break;
 8004a98:	e005      	b.n	8004aa6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004aa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d077      	beq.n	8004b9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005a      	lsls	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	441a      	add	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d916      	bls.n	8004af6 <UART_SetConfig+0x4a6>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d212      	bcs.n	8004af6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f023 030f 	bic.w	r3, r3, #15
 8004ad8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	8afb      	ldrh	r3, [r7, #22]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	8afa      	ldrh	r2, [r7, #22]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e052      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004afc:	e04e      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d827      	bhi.n	8004b56 <UART_SetConfig+0x506>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x4bc>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fff8 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61f8      	str	r0, [r7, #28]
        break;
 8004b36:	e014      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7ff f80a 	bl	8003b50 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61f8      	str	r0, [r7, #28]
        break;
 8004b3e:	e010      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <UART_SetConfig+0x56c>)
 8004b42:	61fb      	str	r3, [r7, #28]
        break;
 8004b44:	e00d      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe ff55 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61f8      	str	r0, [r7, #28]
        break;
 8004b4c:	e009      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	61fb      	str	r3, [r7, #28]
        break;
 8004b54:	e005      	b.n	8004b62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b60:	bf00      	nop
    }

    if (pclk != 0U)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d019      	beq.n	8004b9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	085a      	lsrs	r2, r3, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d909      	bls.n	8004b96 <UART_SetConfig+0x546>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d205      	bcs.n	8004b96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e002      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ba8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	; 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40008000 	.word	0x40008000
 8004bbc:	00f42400 	.word	0x00f42400

08004bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cbe:	d10a      	bne.n	8004cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d14:	f7fc fa4c 	bl	80011b0 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d10e      	bne.n	8004d46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f82d 	bl	8004d96 <UART_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e023      	b.n	8004d8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d10e      	bne.n	8004d72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f817 	bl	8004d96 <UART_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e00d      	b.n	8004d8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b09c      	sub	sp, #112	; 0x70
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	4613      	mov	r3, r2
 8004da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da6:	e0a5      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	f000 80a1 	beq.w	8004ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fc f9fd 	bl	80011b0 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d13e      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e6      	bne.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	663b      	str	r3, [r7, #96]	; 0x60
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e067      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d04f      	beq.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e62:	d147      	bne.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ec0:	623a      	str	r2, [r7, #32]
 8004ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e010      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	f43f af4a 	beq.w	8004da8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3770      	adds	r7, #112	; 0x70
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4d0d      	ldr	r5, [pc, #52]	; (8004f58 <__libc_init_array+0x38>)
 8004f24:	4c0d      	ldr	r4, [pc, #52]	; (8004f5c <__libc_init_array+0x3c>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	42a6      	cmp	r6, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	4d0b      	ldr	r5, [pc, #44]	; (8004f60 <__libc_init_array+0x40>)
 8004f32:	4c0c      	ldr	r4, [pc, #48]	; (8004f64 <__libc_init_array+0x44>)
 8004f34:	f000 f820 	bl	8004f78 <_init>
 8004f38:	1b64      	subs	r4, r4, r5
 8004f3a:	10a4      	asrs	r4, r4, #2
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	42a6      	cmp	r6, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f48:	4798      	blx	r3
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f52:	4798      	blx	r3
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	08004fe0 	.word	0x08004fe0
 8004f5c:	08004fe0 	.word	0x08004fe0
 8004f60:	08004fe0 	.word	0x08004fe0
 8004f64:	08004fe4 	.word	0x08004fe4

08004f68 <memset>:
 8004f68:	4402      	add	r2, r0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <memset+0xa>
 8004f70:	4770      	bx	lr
 8004f72:	f803 1b01 	strb.w	r1, [r3], #1
 8004f76:	e7f9      	b.n	8004f6c <memset+0x4>

08004f78 <_init>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr

08004f84 <_fini>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr
