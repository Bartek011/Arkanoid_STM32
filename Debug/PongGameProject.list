
PongGameProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005824  08005824  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800582c  0800582c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  080058a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080058a4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c12  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002504  00000000  00000000  00030cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  000331b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00034068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c8e  00000000  00000000  00034e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010706  00000000  00000000  0005dad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe5e6  00000000  00000000  0006e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c7c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d4  00000000  00000000  0016c814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005750 	.word	0x08005750

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005750 	.word	0x08005750

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc76 	bl	8000dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_setRST(LCD_RST_GPIO_Port, LCD_RST_Pin);
 80004d4:	2108      	movs	r1, #8
 80004d6:	4814      	ldr	r0, [pc, #80]	; (8000528 <main+0x5c>)
 80004d8:	f000 f9e2 	bl	80008a0 <LCD_setRST>
  LCD_setCE(LCD_CE_GPIO_Port, LCD_CE_Pin);
 80004dc:	2104      	movs	r1, #4
 80004de:	4812      	ldr	r0, [pc, #72]	; (8000528 <main+0x5c>)
 80004e0:	f000 f9f2 	bl	80008c8 <LCD_setCE>
  LCD_setDC(LCD_DC_GPIO_Port, LCD_DC_Pin);
 80004e4:	2102      	movs	r1, #2
 80004e6:	4810      	ldr	r0, [pc, #64]	; (8000528 <main+0x5c>)
 80004e8:	f000 fa02 	bl	80008f0 <LCD_setDC>
  LCD_setDIN(LCD_DIN_GPIO_Port, LCD_DIN_Pin);
 80004ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <main+0x5c>)
 80004f2:	f000 fa11 	bl	8000918 <LCD_setDIN>
  LCD_setCLK(LCD_CLK_GPIO_Port, LCD_CLK_Pin);
 80004f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x5c>)
 80004fc:	f000 fa20 	bl	8000940 <LCD_setCLK>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f81a 	bl	8000538 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f940 	bl	8000788 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f920 	bl	800074c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f8ee 	bl	80006ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000510:	f000 f864 	bl	80005dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, joystick, 2);
 8000514:	2202      	movs	r2, #2
 8000516:	4905      	ldr	r1, [pc, #20]	; (800052c <main+0x60>)
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x64>)
 800051a:	f000 fff9 	bl	8001510 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */
	  /*sprintf((char*)UartMessage, "X: %d, Y: %d\n\r", (int)joystick[0], (int)joystick[1]);
	  UART2_Print(UartMessage);*/
	  printf("Hello world!\r\n");
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <main+0x68>)
 8000520:	f004 fc86 	bl	8004e30 <puts>
 8000524:	e7fb      	b.n	800051e <main+0x52>
 8000526:	bf00      	nop
 8000528:	48000800 	.word	0x48000800
 800052c:	200001bc 	.word	0x200001bc
 8000530:	2000008c 	.word	0x2000008c
 8000534:	08005768 	.word	0x08005768

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	; 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	; 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fbfc 	bl	8004d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055e:	f002 fb6b 	bl	8002c38 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f994 	bl	8000894 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000586:	230a      	movs	r3, #10
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fba2 	bl	8002ce4 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005a6:	f000 f975 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2303      	movs	r3, #3
 80005b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 ff6a 	bl	800349c <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f961 	bl	8000894 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3758      	adds	r7, #88	; 0x58
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <MX_ADC1_Init+0x100>)
 8000600:	4a37      	ldr	r2, [pc, #220]	; (80006e0 <MX_ADC1_Init+0x104>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <MX_ADC1_Init+0x100>)
 8000606:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <MX_ADC1_Init+0x100>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_ADC1_Init+0x100>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <MX_ADC1_Init+0x100>)
 800061a:	2201      	movs	r2, #1
 800061c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <MX_ADC1_Init+0x100>)
 8000620:	2204      	movs	r2, #4
 8000622:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MX_ADC1_Init+0x100>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062a:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_ADC1_Init+0x100>)
 800062c:	2201      	movs	r2, #1
 800062e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_ADC1_Init+0x100>)
 8000632:	2202      	movs	r2, #2
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_ADC1_Init+0x100>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <MX_ADC1_Init+0x100>)
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_ADC1_Init+0x100>)
 8000646:	2200      	movs	r2, #0
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_ADC1_Init+0x100>)
 800064c:	2201      	movs	r2, #1
 800064e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_ADC1_Init+0x100>)
 8000654:	2200      	movs	r2, #0
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_ADC1_Init+0x100>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	481e      	ldr	r0, [pc, #120]	; (80006dc <MX_ADC1_Init+0x100>)
 8000662:	f000 fdff 	bl	8001264 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800066c:	f000 f912 	bl	8000894 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4818      	ldr	r0, [pc, #96]	; (80006dc <MX_ADC1_Init+0x100>)
 800067c:	f001 fd52 	bl	8002124 <HAL_ADCEx_MultiModeConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000686:	f000 f905 	bl	8000894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_ADC1_Init+0x108>)
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000692:	2307      	movs	r3, #7
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	; 0x7f
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_ADC1_Init+0x100>)
 80006a8:	f001 f80c 	bl	80016c4 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80006b2:	f000 f8ef 	bl	8000894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_ADC1_Init+0x10c>)
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ba:	230c      	movs	r3, #12
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0x100>)
 80006c4:	f000 fffe 	bl	80016c4 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80006ce:	f000 f8e1 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	50040000 	.word	0x50040000
 80006e4:	2a000400 	.word	0x2a000400
 80006e8:	2e300800 	.word	0x2e300800

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	f003 fd94 	bl	800425c <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8ab 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000138 	.word	0x20000138
 8000748:	40004400 	.word	0x40004400

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_DMA_Init+0x38>)
 8000754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <MX_DMA_Init+0x38>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6493      	str	r3, [r2, #72]	; 0x48
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_DMA_Init+0x38>)
 8000760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200b      	movs	r0, #11
 8000770:	f001 fe63 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000774:	200b      	movs	r0, #11
 8000776:	f001 fe7c 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b25      	ldr	r3, [pc, #148]	; (800084c <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f640 410e 	movw	r1, #3086	; 0xc0e
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_GPIO_Init+0xc8>)
 8000806:	f002 f9f1 	bl	8002bec <HAL_GPIO_WritePin>
                          |LCD_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000810:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0xc8>)
 8000822:	f002 f839 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin LCD_DIN_Pin
                           LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 8000826:	f640 430e 	movw	r3, #3086	; 0xc0e
 800082a:	617b      	str	r3, [r7, #20]
                          |LCD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0xc8>)
 8000840:	f002 f82a 	bl	8002898 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	48000800 	.word	0x48000800

08000854 <__io_putchar>:
	LCD_refreshArea(startPoint+length, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
	LCD_setPixel(startPoint-1, PLATFORM_LVL, 1); // zapal lewy skrajny pxl
	LCD_refreshArea(startPoint-1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
}
int __io_putchar(int ch)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b0a      	cmp	r3, #10
 8000860:	d109      	bne.n	8000876 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8000862:	230d      	movs	r3, #13
 8000864:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000866:	f107 010f 	add.w	r1, r7, #15
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	2201      	movs	r2, #1
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <__io_putchar+0x3c>)
 8000872:	f003 fd41 	bl	80042f8 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000876:	1d39      	adds	r1, r7, #4
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	2201      	movs	r2, #1
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <__io_putchar+0x3c>)
 8000880:	f003 fd3a 	bl	80042f8 <HAL_UART_Transmit>
	return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000138 	.word	0x20000138

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 80008ac:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <LCD_setRST+0x24>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <LCD_setRST+0x24>)
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	8093      	strh	r3, [r2, #4]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	200001c0 	.word	0x200001c0

080008c8 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <LCD_setCE+0x24>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <LCD_setCE+0x24>)
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	8193      	strh	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	200001c0 	.word	0x200001c0

080008f0 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <LCD_setDC+0x24>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <LCD_setDC+0x24>)
 8000904:	887b      	ldrh	r3, [r7, #2]
 8000906:	8293      	strh	r3, [r2, #20]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	200001c0 	.word	0x200001c0

08000918 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000924:	4a05      	ldr	r2, [pc, #20]	; (800093c <LCD_setDIN+0x24>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <LCD_setDIN+0x24>)
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	8393      	strh	r3, [r2, #28]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	200001c0 	.word	0x200001c0

08000940 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <LCD_setCLK+0x24>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <LCD_setCLK+0x24>)
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	200001c0 	.word	0x200001c0

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	; 0x58
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0ac      	sub	sp, #176	; 0xb0
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2288      	movs	r2, #136	; 0x88
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f004 f9b7 	bl	8004d44 <memset>
  if(hadc->Instance==ADC1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a3d      	ldr	r2, [pc, #244]	; (8000ad0 <HAL_ADC_MspInit+0x120>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d172      	bne.n	8000ac6 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009f6:	2308      	movs	r3, #8
 80009f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009fa:	2307      	movs	r3, #7
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 ff67 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a1c:	f7ff ff3a 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <HAL_ADC_MspInit+0x124>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <HAL_ADC_MspInit+0x124>)
 8000a26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <HAL_ADC_MspInit+0x124>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <HAL_ADC_MspInit+0x124>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <HAL_ADC_MspInit+0x124>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <HAL_ADC_MspInit+0x124>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a56:	230b      	movs	r3, #11
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f001 ff14 	bl	8002898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000a72:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <HAL_ADC_MspInit+0x12c>)
 8000a74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000aac:	f001 fcfc 	bl	80024a8 <HAL_DMA_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000ab6:	f7ff feed 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000abe:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <HAL_ADC_MspInit+0x128>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	37b0      	adds	r7, #176	; 0xb0
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	50040000 	.word	0x50040000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	200000f0 	.word	0x200000f0
 8000adc:	40020008 	.word	0x40020008

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b0ac      	sub	sp, #176	; 0xb0
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2288      	movs	r2, #136	; 0x88
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f91f 	bl	8004d44 <memset>
  if(huart->Instance==USART2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <HAL_UART_MspInit+0xb0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d13b      	bne.n	8000b88 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fee1 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b28:	f7ff feb4 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0xb4>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0xb4>)
 8000b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b36:	6593      	str	r3, [r2, #88]	; 0x58
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_UART_MspInit+0xb4>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_UART_MspInit+0xb4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_UART_MspInit+0xb4>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0xb4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b74:	2307      	movs	r3, #7
 8000b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f001 fe88 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	37b0      	adds	r7, #176	; 0xb0
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40021000 	.word	0x40021000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f948 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DMA1_Channel1_IRQHandler+0x10>)
 8000bf2:	f001 fd71 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000f0 	.word	0x200000f0

08000c00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e00a      	b.n	8000c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c12:	f3af 8000 	nop.w
 8000c16:	4601      	mov	r1, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf0      	blt.n	8000c12 <_read+0x12>
  }

  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e009      	b.n	8000c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fdfd 	bl	8000854 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf1      	blt.n	8000c4c <_write+0x12>
  }
  return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f003 fff0 	bl	8004cf0 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20018000 	.word	0x20018000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200001e8 	.word	0x200001e8
 8000d44:	20000200 	.word	0x20000200

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f003 ffaf 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fb95 	bl	80004cc <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000db0:	08005834 	.word	0x08005834
  ldr r2, =_sbss
 8000db4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db8:	20000200 	.word	0x20000200

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_Init+0x3c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_Init+0x3c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f001 fb24 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f80f 	bl	8000e00 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fdbb 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_InitTick+0x70>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fb2f 	bl	800248e <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d809      	bhi.n	8000e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f001 faf9 	bl	800243a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e001      	b.n	8000e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200001ec 	.word	0x200001ec

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001ec 	.word	0x200001ec

08000eb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3360      	adds	r3, #96	; 0x60
 8000f32:	461a      	mov	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <LL_ADC_SetOffset+0x44>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f58:	bf00      	nop
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	03fff000 	.word	0x03fff000

08000f68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3360      	adds	r3, #96	; 0x60
 8000f76:	461a      	mov	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3360      	adds	r3, #96	; 0x60
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fbe:	bf00      	nop
 8000fc0:	371c      	adds	r7, #28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3330      	adds	r3, #48	; 0x30
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	4413      	add	r3, r2
 800100e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	211f      	movs	r1, #31
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	401a      	ands	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0e9b      	lsrs	r3, r3, #26
 8001028:	f003 011f 	and.w	r1, r3, #31
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	431a      	orrs	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3314      	adds	r3, #20
 8001058:	461a      	mov	r2, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	0e5b      	lsrs	r3, r3, #25
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	4413      	add	r3, r2
 8001066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	0d1b      	lsrs	r3, r3, #20
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	2107      	movs	r1, #7
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	0d1b      	lsrs	r3, r3, #20
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001092:	bf00      	nop
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0318 	and.w	r3, r3, #24
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010c4:	40d9      	lsrs	r1, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	400b      	ands	r3, r1
 80010ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ce:	431a      	orrs	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	0007ffff 	.word	0x0007ffff

080010e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 031f 	and.w	r3, r3, #31
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001114:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6093      	str	r3, [r2, #8]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800113c:	d101      	bne.n	8001142 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001164:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800118c:	d101      	bne.n	8001192 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <LL_ADC_IsEnabled+0x18>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <LL_ADC_IsEnabled+0x1a>
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001202:	f043 0204 	orr.w	r2, r3, #4
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b04      	cmp	r3, #4
 8001228:	d101      	bne.n	800122e <LL_ADC_REG_IsConversionOngoing+0x18>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b08      	cmp	r3, #8
 800124e:	d101      	bne.n	8001254 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e136      	b.n	80014ec <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fb8f 	bl	80009b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff3f 	bl	8001128 <LL_ADC_IsDeepPowerDownEnabled>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff25 	bl	8001104 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff5a 	bl	8001178 <LL_ADC_IsInternalRegulatorEnabled>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d115      	bne.n	80012f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff3e 	bl	8001150 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012d4:	4b87      	ldr	r3, [pc, #540]	; (80014f4 <HAL_ADC_Init+0x290>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	099b      	lsrs	r3, r3, #6
 80012da:	4a87      	ldr	r2, [pc, #540]	; (80014f8 <HAL_ADC_Init+0x294>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	3301      	adds	r3, #1
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012e8:	e002      	b.n	80012f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f9      	bne.n	80012ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff3c 	bl	8001178 <LL_ADC_IsInternalRegulatorEnabled>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130a:	f043 0210 	orr.w	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff75 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 800132c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80cf 	bne.w	80014da <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 80cb 	bne.w	80014da <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800134c:	f043 0202 	orr.w	r2, r3, #2
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff35 	bl	80011c8 <LL_ADC_IsEnabled>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d115      	bne.n	8001390 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001364:	4865      	ldr	r0, [pc, #404]	; (80014fc <HAL_ADC_Init+0x298>)
 8001366:	f7ff ff2f 	bl	80011c8 <LL_ADC_IsEnabled>
 800136a:	4604      	mov	r4, r0
 800136c:	4864      	ldr	r0, [pc, #400]	; (8001500 <HAL_ADC_Init+0x29c>)
 800136e:	f7ff ff2b 	bl	80011c8 <LL_ADC_IsEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	431c      	orrs	r4, r3
 8001376:	4863      	ldr	r0, [pc, #396]	; (8001504 <HAL_ADC_Init+0x2a0>)
 8001378:	f7ff ff26 	bl	80011c8 <LL_ADC_IsEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	4323      	orrs	r3, r4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4619      	mov	r1, r3
 800138a:	485f      	ldr	r0, [pc, #380]	; (8001508 <HAL_ADC_Init+0x2a4>)
 800138c:	f7ff fd94 	bl	8000eb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e5b      	ldrb	r3, [r3, #25]
 8001394:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800139a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d106      	bne.n	80013cc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	3b01      	subs	r3, #1
 80013c4:	045b      	lsls	r3, r3, #17
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d009      	beq.n	80013e8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_ADC_Init+0x2a8>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff08 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 8001406:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff15 	bl	800123c <LL_ADC_INJ_IsConversionOngoing>
 8001412:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d13d      	bne.n	8001496 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d13a      	bne.n	8001496 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001424:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800142c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800143c:	f023 0302 	bic.w	r3, r3, #2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	69b9      	ldr	r1, [r7, #24]
 8001446:	430b      	orrs	r3, r1
 8001448:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001450:	2b01      	cmp	r3, #1
 8001452:	d118      	bne.n	8001486 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001470:	4311      	orrs	r1, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001476:	430a      	orrs	r2, r1
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	e007      	b.n	8001496 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10c      	bne.n	80014b8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f023 010f 	bic.w	r1, r3, #15
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
 80014b6:	e007      	b.n	80014c8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020f 	bic.w	r2, r2, #15
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	f023 0303 	bic.w	r3, r3, #3
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
 80014d8:	e007      	b.n	80014ea <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f043 0210 	orr.w	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	20000000 	.word	0x20000000
 80014f8:	053e2d63 	.word	0x053e2d63
 80014fc:	50040000 	.word	0x50040000
 8001500:	50040100 	.word	0x50040100
 8001504:	50040200 	.word	0x50040200
 8001508:	50040300 	.word	0x50040300
 800150c:	fff0c007 	.word	0xfff0c007

08001510 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800151c:	4853      	ldr	r0, [pc, #332]	; (800166c <HAL_ADC_Start_DMA+0x15c>)
 800151e:	f7ff fde3 	bl	80010e8 <LL_ADC_GetMultimode>
 8001522:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe74 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	f040 8093 	bne.w	800165c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_ADC_Start_DMA+0x34>
 8001540:	2302      	movs	r3, #2
 8001542:	e08e      	b.n	8001662 <HAL_ADC_Start_DMA+0x152>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a47      	ldr	r2, [pc, #284]	; (8001670 <HAL_ADC_Start_DMA+0x160>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d008      	beq.n	8001568 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	2b05      	cmp	r3, #5
 8001560:	d002      	beq.n	8001568 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b09      	cmp	r3, #9
 8001566:	d172      	bne.n	800164e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fc9b 	bl	8001ea4 <ADC_Enable>
 800156e:	4603      	mov	r3, r0
 8001570:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d165      	bne.n	8001644 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a38      	ldr	r2, [pc, #224]	; (8001674 <HAL_ADC_Start_DMA+0x164>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d002      	beq.n	800159c <HAL_ADC_Start_DMA+0x8c>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	e000      	b.n	800159e <HAL_ADC_Start_DMA+0x8e>
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_ADC_Start_DMA+0x168>)
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d002      	beq.n	80015ac <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	f023 0206 	bic.w	r2, r3, #6
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	659a      	str	r2, [r3, #88]	; 0x58
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a27      	ldr	r2, [pc, #156]	; (800167c <HAL_ADC_Start_DMA+0x16c>)
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_ADC_Start_DMA+0x170>)
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a25      	ldr	r2, [pc, #148]	; (8001684 <HAL_ADC_Start_DMA+0x174>)
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	221c      	movs	r2, #28
 80015f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0210 	orr.w	r2, r2, #16
 800160e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3340      	adds	r3, #64	; 0x40
 800162a:	4619      	mov	r1, r3
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f000 fff2 	bl	8002618 <HAL_DMA_Start_IT>
 8001634:	4603      	mov	r3, r0
 8001636:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fdd6 	bl	80011ee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001642:	e00d      	b.n	8001660 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800164c:	e008      	b.n	8001660 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800165a:	e001      	b.n	8001660 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800165c:	2302      	movs	r3, #2
 800165e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001660:	7dfb      	ldrb	r3, [r7, #23]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	50040300 	.word	0x50040300
 8001670:	50040200 	.word	0x50040200
 8001674:	50040100 	.word	0x50040100
 8001678:	50040000 	.word	0x50040000
 800167c:	08001fb1 	.word	0x08001fb1
 8001680:	08002089 	.word	0x08002089
 8001684:	080020a5 	.word	0x080020a5

08001688 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0b6      	sub	sp, #216	; 0xd8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x22>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e3c7      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x7b2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd8f 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 83a8 	bne.w	8001e50 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d824      	bhi.n	8001752 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	3b02      	subs	r3, #2
 800170e:	2b03      	cmp	r3, #3
 8001710:	d81b      	bhi.n	800174a <HAL_ADC_ConfigChannel+0x86>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_ADC_ConfigChannel+0x54>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001729 	.word	0x08001729
 800171c:	08001731 	.word	0x08001731
 8001720:	08001739 	.word	0x08001739
 8001724:	08001741 	.word	0x08001741
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	220c      	movs	r2, #12
 800172c:	605a      	str	r2, [r3, #4]
          break;
 800172e:	e011      	b.n	8001754 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2212      	movs	r2, #18
 8001734:	605a      	str	r2, [r3, #4]
          break;
 8001736:	e00d      	b.n	8001754 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2218      	movs	r2, #24
 800173c:	605a      	str	r2, [r3, #4]
          break;
 800173e:	e009      	b.n	8001754 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001746:	605a      	str	r2, [r3, #4]
          break;
 8001748:	e004      	b.n	8001754 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2206      	movs	r2, #6
 800174e:	605a      	str	r2, [r3, #4]
          break;
 8001750:	e000      	b.n	8001754 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001752:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	f7ff fc45 	bl	8000ff0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fd53 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 8001770:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fd5f 	bl	800123c <LL_ADC_INJ_IsConversionOngoing>
 800177e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001782:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 81a6 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800178c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001790:	2b00      	cmp	r3, #0
 8001792:	f040 81a1 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f7ff fc50 	bl	8001048 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	08db      	lsrs	r3, r3, #3
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d00a      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6919      	ldr	r1, [r3, #16]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017da:	f7ff fba1 	bl	8000f20 <LL_ADC_SetOffset>
 80017de:	e17b      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fbbe 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <HAL_ADC_ConfigChannel+0x148>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fbb3 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	0e9b      	lsrs	r3, r3, #26
 8001806:	f003 021f 	and.w	r2, r3, #31
 800180a:	e01e      	b.n	800184a <HAL_ADC_ConfigChannel+0x186>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fba8 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800182a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800182e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800183a:	2320      	movs	r3, #32
 800183c:	e004      	b.n	8001848 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800183e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x19e>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0e9b      	lsrs	r3, r3, #26
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	e018      	b.n	8001894 <HAL_ADC_ConfigChannel+0x1d0>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800187a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800187e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001886:	2320      	movs	r3, #32
 8001888:	e004      	b.n	8001894 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800188a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001894:	429a      	cmp	r2, r3
 8001896:	d106      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb77 	bl	8000f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2101      	movs	r1, #1
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fb5b 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10a      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x20e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb50 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	0e9b      	lsrs	r3, r3, #26
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	e01e      	b.n	8001910 <HAL_ADC_ConfigChannel+0x24c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fb45 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001900:	2320      	movs	r3, #32
 8001902:	e004      	b.n	800190e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x264>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0e9b      	lsrs	r3, r3, #26
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	e018      	b.n	800195a <HAL_ADC_ConfigChannel+0x296>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800193c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800194c:	2320      	movs	r3, #32
 800194e:	e004      	b.n	800195a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800195a:	429a      	cmp	r2, r3
 800195c:	d106      	bne.n	800196c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	2101      	movs	r1, #1
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fb14 	bl	8000f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2102      	movs	r1, #2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff faf8 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10a      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x2d4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2102      	movs	r1, #2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff faed 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	0e9b      	lsrs	r3, r3, #26
 8001992:	f003 021f 	and.w	r2, r3, #31
 8001996:	e01e      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x312>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2102      	movs	r1, #2
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fae2 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80019c6:	2320      	movs	r3, #32
 80019c8:	e004      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x32a>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	e016      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x358>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e004      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d106      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	2102      	movs	r1, #2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fab3 	bl	8000f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2103      	movs	r1, #3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa97 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10a      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x396>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2103      	movs	r1, #3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fa8c 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	e017      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x3c6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fa81 	bl	8000f68 <LL_ADC_GetOffsetChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a74:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e003      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x3de>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	e011      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x402>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e003      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d106      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2103      	movs	r1, #3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fa5e 	bl	8000f94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fb73 	bl	80011c8 <LL_ADC_IsEnabled>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 813f 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f7ff fad2 	bl	80010a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a8e      	ldr	r2, [pc, #568]	; (8001d3c <HAL_ADC_ConfigChannel+0x678>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f040 8130 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10b      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x46c>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	2b09      	cmp	r3, #9
 8001b26:	bf94      	ite	ls
 8001b28:	2301      	movls	r3, #1
 8001b2a:	2300      	movhi	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e019      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x4a0>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e003      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2b09      	cmp	r3, #9
 8001b5c:	bf94      	ite	ls
 8001b5e:	2301      	movls	r3, #1
 8001b60:	2300      	movhi	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d079      	beq.n	8001c5c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x4c0>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	069b      	lsls	r3, r3, #26
 8001b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b82:	e015      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x4ec>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	e003      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	069b      	lsls	r3, r3, #26
 8001bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x50c>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	e017      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x53c>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e003      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	ea42 0103 	orr.w	r1, r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x562>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0e9b      	lsrs	r3, r3, #26
 8001c16:	3301      	adds	r3, #1
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	051b      	lsls	r3, r3, #20
 8001c24:	e018      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x594>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e003      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	e080      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x5b4>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	3301      	adds	r3, #1
 8001c70:	069b      	lsls	r3, r3, #26
 8001c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c76:	e015      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x5e0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e003      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	069b      	lsls	r3, r3, #26
 8001ca0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x600>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	e017      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x630>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	61fb      	str	r3, [r7, #28]
  return result;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	e003      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	ea42 0103 	orr.w	r1, r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10d      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x65c>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	3b1e      	subs	r3, #30
 8001d18:	051b      	lsls	r3, r3, #20
 8001d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	e01d      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x698>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	613b      	str	r3, [r7, #16]
  return result;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	e005      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x684>
 8001d3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	051b      	lsls	r3, r3, #20
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	6892      	ldr	r2, [r2, #8]
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7ff f970 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d07a      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d74:	4843      	ldr	r0, [pc, #268]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d76:	f7ff f8c5 	bl	8000f04 <LL_ADC_GetCommonPathInternalCh>
 8001d7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a41      	ldr	r2, [pc, #260]	; (8001e88 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d12c      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d126      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <HAL_ADC_ConfigChannel+0x7c8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d004      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0x6e4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a3b      	ldr	r2, [pc, #236]	; (8001e90 <HAL_ADC_ConfigChannel+0x7cc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d15d      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db0:	4619      	mov	r1, r3
 8001db2:	4834      	ldr	r0, [pc, #208]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c0>)
 8001db4:	f7ff f893 	bl	8000ede <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_ADC_ConfigChannel+0x7d0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	4a36      	ldr	r2, [pc, #216]	; (8001e98 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	099b      	lsrs	r3, r3, #6
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dd2:	e002      	b.n	8001dda <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f9      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001de0:	e040      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <HAL_ADC_ConfigChannel+0x7d8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d118      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x75a>
 8001dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d112      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_ADC_ConfigChannel+0x7c8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d004      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x748>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d12d      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e14:	4619      	mov	r1, r3
 8001e16:	481b      	ldr	r0, [pc, #108]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e18:	f7ff f861 	bl	8000ede <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e1c:	e024      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d120      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d11a      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_ADC_ConfigChannel+0x7c8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d115      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e46:	4619      	mov	r1, r3
 8001e48:	480e      	ldr	r0, [pc, #56]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e4a:	f7ff f848 	bl	8000ede <LL_ADC_SetCommonPathInternalCh>
 8001e4e:	e00c      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001e62:	e002      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e72:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	37d8      	adds	r7, #216	; 0xd8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	80080000 	.word	0x80080000
 8001e84:	50040300 	.word	0x50040300
 8001e88:	c7520000 	.word	0xc7520000
 8001e8c:	50040000 	.word	0x50040000
 8001e90:	50040200 	.word	0x50040200
 8001e94:	20000000 	.word	0x20000000
 8001e98:	053e2d63 	.word	0x053e2d63
 8001e9c:	cb840000 	.word	0xcb840000
 8001ea0:	80000001 	.word	0x80000001

08001ea4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f987 	bl	80011c8 <LL_ADC_IsEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d169      	bne.n	8001f94 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <ADC_Enable+0xfc>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00d      	beq.n	8001eea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e055      	b.n	8001f96 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f956 	bl	80011a0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ef4:	482b      	ldr	r0, [pc, #172]	; (8001fa4 <ADC_Enable+0x100>)
 8001ef6:	f7ff f805 	bl	8000f04 <LL_ADC_GetCommonPathInternalCh>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <ADC_Enable+0x104>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	4a28      	ldr	r2, [pc, #160]	; (8001fac <ADC_Enable+0x108>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f1e:	e002      	b.n	8001f26 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f9      	bne.n	8001f20 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f2c:	f7fe ffb8 	bl	8000ea0 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f32:	e028      	b.n	8001f86 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f945 	bl	80011c8 <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d104      	bne.n	8001f4e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f929 	bl	80011a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f4e:	f7fe ffa7 	bl	8000ea0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d914      	bls.n	8001f86 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d00d      	beq.n	8001f86 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f043 0210 	orr.w	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e007      	b.n	8001f96 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d1cf      	bne.n	8001f34 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	8000003f 	.word	0x8000003f
 8001fa4:	50040300 	.word	0x50040300
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	053e2d63 	.word	0x053e2d63

08001fb0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d14b      	bne.n	8002062 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d021      	beq.n	8002028 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe ffee 	bl	8000fca <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d032      	beq.n	800205a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d12b      	bne.n	800205a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11f      	bne.n	800205a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
 8002026:	e018      	b.n	800205a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d111      	bne.n	800205a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fb14 	bl	8001688 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002060:	e00e      	b.n	8002080 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7ff fb1e 	bl	80016b0 <HAL_ADC_ErrorCallback>
}
 8002074:	e004      	b.n	8002080 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff fb00 	bl	800169c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f043 0204 	orr.w	r2, r3, #4
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff faf0 	bl	80016b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <LL_ADC_IsEnabled>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_REG_IsConversionOngoing>:
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d101      	bne.n	8002116 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b09f      	sub	sp, #124	; 0x7c
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800213e:	2302      	movs	r3, #2
 8002140:	e093      	b.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800214a:	2300      	movs	r3, #0
 800214c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800214e:	2300      	movs	r3, #0
 8002150:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a47      	ldr	r2, [pc, #284]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800215c:	4b46      	ldr	r3, [pc, #280]	; (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	e001      	b.n	8002166 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e072      	b.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ffb9 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 800218c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ffb3 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d154      	bne.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800219e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d151      	bne.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80021a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02c      	beq.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021c2:	035b      	lsls	r3, r3, #13
 80021c4:	430b      	orrs	r3, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	4829      	ldr	r0, [pc, #164]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021ce:	f7ff ff83 	bl	80020d8 <LL_ADC_IsEnabled>
 80021d2:	4604      	mov	r4, r0
 80021d4:	4828      	ldr	r0, [pc, #160]	; (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021d6:	f7ff ff7f 	bl	80020d8 <LL_ADC_IsEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	431c      	orrs	r4, r3
 80021de:	4828      	ldr	r0, [pc, #160]	; (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80021e0:	f7ff ff7a 	bl	80020d8 <LL_ADC_IsEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4323      	orrs	r3, r4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d137      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021f4:	f023 030f 	bic.w	r3, r3, #15
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	6811      	ldr	r1, [r2, #0]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	6892      	ldr	r2, [r2, #8]
 8002200:	430a      	orrs	r2, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002206:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002208:	e028      	b.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002214:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002216:	4817      	ldr	r0, [pc, #92]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002218:	f7ff ff5e 	bl	80020d8 <LL_ADC_IsEnabled>
 800221c:	4604      	mov	r4, r0
 800221e:	4816      	ldr	r0, [pc, #88]	; (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002220:	f7ff ff5a 	bl	80020d8 <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	431c      	orrs	r4, r3
 8002228:	4815      	ldr	r0, [pc, #84]	; (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800222a:	f7ff ff55 	bl	80020d8 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	4323      	orrs	r3, r4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d112      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800223e:	f023 030f 	bic.w	r3, r3, #15
 8002242:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002244:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002246:	e009      	b.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800225a:	e000      	b.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800225c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002266:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800226a:	4618      	mov	r0, r3
 800226c:	377c      	adds	r7, #124	; 0x7c
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	50040000 	.word	0x50040000
 8002278:	50040100 	.word	0x50040100
 800227c:	50040300 	.word	0x50040300
 8002280:	50040200 	.word	0x50040200

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	; (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e098      	b.n	80025ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_DMA_Init+0x150>)
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d80f      	bhi.n	80024e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <HAL_DMA_Init+0x154>)
 80024ce:	4413      	add	r3, r2
 80024d0:	4a4b      	ldr	r2, [pc, #300]	; (8002600 <HAL_DMA_Init+0x158>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	009a      	lsls	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_DMA_Init+0x15c>)
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
 80024e4:	e00e      	b.n	8002504 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_DMA_Init+0x160>)
 80024ee:	4413      	add	r3, r2
 80024f0:	4a43      	ldr	r2, [pc, #268]	; (8002600 <HAL_DMA_Init+0x158>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a42      	ldr	r2, [pc, #264]	; (800260c <HAL_DMA_Init+0x164>)
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800255e:	d039      	beq.n	80025d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a27      	ldr	r2, [pc, #156]	; (8002604 <HAL_DMA_Init+0x15c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11a      	bne.n	80025a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <HAL_DMA_Init+0x168>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f003 031c 	and.w	r3, r3, #28
 8002576:	210f      	movs	r1, #15
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	4924      	ldr	r1, [pc, #144]	; (8002610 <HAL_DMA_Init+0x168>)
 8002580:	4013      	ands	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_DMA_Init+0x168>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f003 031c 	and.w	r3, r3, #28
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	491d      	ldr	r1, [pc, #116]	; (8002610 <HAL_DMA_Init+0x168>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
 800259e:	e019      	b.n	80025d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f003 031c 	and.w	r3, r3, #28
 80025ac:	210f      	movs	r1, #15
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4917      	ldr	r1, [pc, #92]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f003 031c 	and.w	r3, r3, #28
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	4911      	ldr	r1, [pc, #68]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40020407 	.word	0x40020407
 80025fc:	bffdfff8 	.word	0xbffdfff8
 8002600:	cccccccd 	.word	0xcccccccd
 8002604:	40020000 	.word	0x40020000
 8002608:	bffdfbf8 	.word	0xbffdfbf8
 800260c:	40020400 	.word	0x40020400
 8002610:	400200a8 	.word	0x400200a8
 8002614:	400204a8 	.word	0x400204a8

08002618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_DMA_Start_IT+0x20>
 8002634:	2302      	movs	r3, #2
 8002636:	e04b      	b.n	80026d0 <HAL_DMA_Start_IT+0xb8>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d13a      	bne.n	80026c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f8e0 	bl	8002836 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 020e 	orr.w	r2, r2, #14
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e00f      	b.n	80026b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0204 	bic.w	r2, r2, #4
 800269e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 020a 	orr.w	r2, r2, #10
 80026ae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e005      	b.n	80026ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f003 031c 	and.w	r3, r3, #28
 80026f8:	2204      	movs	r2, #4
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d026      	beq.n	8002752 <HAL_DMA_IRQHandler+0x7a>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d021      	beq.n	8002752 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0204 	bic.w	r2, r2, #4
 800272a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f003 021c 	and.w	r2, r3, #28
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2104      	movs	r1, #4
 800273a:	fa01 f202 	lsl.w	r2, r1, r2
 800273e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d071      	beq.n	800282c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002750:	e06c      	b.n	800282c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 031c 	and.w	r3, r3, #28
 800275a:	2202      	movs	r2, #2
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d02e      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xec>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d029      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10b      	bne.n	8002796 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 020a 	bic.w	r2, r2, #10
 800278c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f003 021c 	and.w	r2, r3, #28
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2102      	movs	r1, #2
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d038      	beq.n	800282c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027c2:	e033      	b.n	800282c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f003 031c 	and.w	r3, r3, #28
 80027cc:	2208      	movs	r2, #8
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02a      	beq.n	800282e <HAL_DMA_IRQHandler+0x156>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d025      	beq.n	800282e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 020e 	bic.w	r2, r2, #14
 80027f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f003 021c 	and.w	r2, r3, #28
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800282c:	bf00      	nop
 800282e:	bf00      	nop
}
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f003 021c 	and.w	r2, r3, #28
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2101      	movs	r1, #1
 8002852:	fa01 f202 	lsl.w	r2, r1, r2
 8002856:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b10      	cmp	r3, #16
 8002866:	d108      	bne.n	800287a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002878:	e007      	b.n	800288a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	60da      	str	r2, [r3, #12]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	e17f      	b.n	8002ba8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8171 	beq.w	8002ba2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d005      	beq.n	80028d8 <HAL_GPIO_Init+0x40>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d130      	bne.n	800293a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290e:	2201      	movs	r2, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 0201 	and.w	r2, r3, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d118      	bne.n	8002978 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800294c:	2201      	movs	r2, #1
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	f003 0201 	and.w	r2, r3, #1
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b03      	cmp	r3, #3
 8002982:	d017      	beq.n	80029b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d123      	bne.n	8002a08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	08da      	lsrs	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3208      	adds	r2, #8
 80029c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	220f      	movs	r2, #15
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	6939      	ldr	r1, [r7, #16]
 8002a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0203 	and.w	r2, r3, #3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80ac 	beq.w	8002ba2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_GPIO_Init+0x330>)
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4e:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_GPIO_Init+0x330>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6613      	str	r3, [r2, #96]	; 0x60
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_GPIO_Init+0x330>)
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a62:	4a5a      	ldr	r2, [pc, #360]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	220f      	movs	r2, #15
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a8c:	d025      	beq.n	8002ada <HAL_GPIO_Init+0x242>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4f      	ldr	r2, [pc, #316]	; (8002bd0 <HAL_GPIO_Init+0x338>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01f      	beq.n	8002ad6 <HAL_GPIO_Init+0x23e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4e      	ldr	r2, [pc, #312]	; (8002bd4 <HAL_GPIO_Init+0x33c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d019      	beq.n	8002ad2 <HAL_GPIO_Init+0x23a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4d      	ldr	r2, [pc, #308]	; (8002bd8 <HAL_GPIO_Init+0x340>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_GPIO_Init+0x236>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4c      	ldr	r2, [pc, #304]	; (8002bdc <HAL_GPIO_Init+0x344>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00d      	beq.n	8002aca <HAL_GPIO_Init+0x232>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4b      	ldr	r2, [pc, #300]	; (8002be0 <HAL_GPIO_Init+0x348>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <HAL_GPIO_Init+0x22e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4a      	ldr	r2, [pc, #296]	; (8002be4 <HAL_GPIO_Init+0x34c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_GPIO_Init+0x22a>
 8002abe:	2306      	movs	r3, #6
 8002ac0:	e00c      	b.n	8002adc <HAL_GPIO_Init+0x244>
 8002ac2:	2307      	movs	r3, #7
 8002ac4:	e00a      	b.n	8002adc <HAL_GPIO_Init+0x244>
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	e008      	b.n	8002adc <HAL_GPIO_Init+0x244>
 8002aca:	2304      	movs	r3, #4
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x244>
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e004      	b.n	8002adc <HAL_GPIO_Init+0x244>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e002      	b.n	8002adc <HAL_GPIO_Init+0x244>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_GPIO_Init+0x244>
 8002ada:	2300      	movs	r3, #0
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	f002 0203 	and.w	r2, r2, #3
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	4093      	lsls	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aec:	4937      	ldr	r1, [pc, #220]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	3302      	adds	r3, #2
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b1e:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b48:	4a27      	ldr	r2, [pc, #156]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b72:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f47f ae78 	bne.w	80028a8 <HAL_GPIO_Init+0x10>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	48000400 	.word	0x48000400
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	48000c00 	.word	0x48000c00
 8002bdc:	48001000 	.word	0x48001000
 8002be0:	48001400 	.word	0x48001400
 8002be4:	48001800 	.word	0x48001800
 8002be8:	40010400 	.word	0x40010400

08002bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c46:	d130      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	d038      	beq.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2232      	movs	r2, #50	; 0x32
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7c:	e002      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d102      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f2      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d110      	bne.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e00f      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d007      	beq.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc0:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e3ca      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b97      	ldr	r3, [pc, #604]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d00:	4b94      	ldr	r3, [pc, #592]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80e4 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4a>
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	f040 808b 	bne.w	8002e3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 8087 	bne.w	8002e3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d2e:	4b89      	ldr	r3, [pc, #548]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e3a2      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	4b82      	ldr	r3, [pc, #520]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_RCC_OscConfig+0x7c>
 8002d56:	4b7f      	ldr	r3, [pc, #508]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5e:	e005      	b.n	8002d6c <HAL_RCC_OscConfig+0x88>
 8002d60:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d223      	bcs.n	8002db8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fd55 	bl	8003824 <RCC_SetFlashLatencyFromMSIRange>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e383      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d84:	4b73      	ldr	r3, [pc, #460]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a72      	ldr	r2, [pc, #456]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b70      	ldr	r3, [pc, #448]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	496d      	ldr	r1, [pc, #436]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da2:	4b6c      	ldr	r3, [pc, #432]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	4968      	ldr	r1, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
 8002db6:	e025      	b.n	8002e04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db8:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f043 0308 	orr.w	r3, r3, #8
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4960      	ldr	r1, [pc, #384]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd6:	4b5f      	ldr	r3, [pc, #380]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	495b      	ldr	r1, [pc, #364]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fd15 	bl	8003824 <RCC_SetFlashLatencyFromMSIRange>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e343      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e04:	f000 fc4a 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b52      	ldr	r3, [pc, #328]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	4950      	ldr	r1, [pc, #320]	; (8002f58 <HAL_RCC_OscConfig+0x274>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	4a4e      	ldr	r2, [pc, #312]	; (8002f5c <HAL_RCC_OscConfig+0x278>)
 8002e22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e24:	4b4e      	ldr	r3, [pc, #312]	; (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd ffe9 	bl	8000e00 <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d052      	beq.n	8002ede <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	e327      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d032      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e44:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a42      	ldr	r2, [pc, #264]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e50:	f7fe f826 	bl	8000ea0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e58:	f7fe f822 	bl	8000ea0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e310      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6a:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a36      	ldr	r2, [pc, #216]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4931      	ldr	r1, [pc, #196]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e94:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	492c      	ldr	r1, [pc, #176]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
 8002ea8:	e01a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb6:	f7fd fff3 	bl	8000ea0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ebe:	f7fd ffef 	bl	8000ea0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e2dd      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1da>
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ede:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d074      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x21a>
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d10e      	bne.n	8002f16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d064      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d160      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e2ba      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x24a>
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e026      	b.n	8002f7c <HAL_RCC_OscConfig+0x298>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_OscConfig+0x280>
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a02      	ldr	r2, [pc, #8]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e014      	b.n	8002f7c <HAL_RCC_OscConfig+0x298>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	08005778 	.word	0x08005778
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004
 8002f64:	4ba0      	ldr	r3, [pc, #640]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a9f      	ldr	r2, [pc, #636]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b9d      	ldr	r3, [pc, #628]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a9c      	ldr	r2, [pc, #624]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fd ff8c 	bl	8000ea0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fd ff88 	bl	8000ea0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e276      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9e:	4b92      	ldr	r3, [pc, #584]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2a8>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fd ff78 	bl	8000ea0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fd ff74 	bl	8000ea0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e262      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc6:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2d0>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d060      	beq.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x310>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d119      	bne.n	8003022 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d116      	bne.n	8003022 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff4:	4b7c      	ldr	r3, [pc, #496]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_OscConfig+0x328>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e23f      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	4973      	ldr	r1, [pc, #460]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	e040      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d023      	beq.n	8003072 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302a:	4b6f      	ldr	r3, [pc, #444]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6e      	ldr	r2, [pc, #440]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fd ff33 	bl	8000ea0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7fd ff2f 	bl	8000ea0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e21d      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003050:	4b65      	ldr	r3, [pc, #404]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	495f      	ldr	r1, [pc, #380]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
 8003070:	e018      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fd ff0f 	bl	8000ea0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003086:	f7fd ff0b 	bl	8000ea0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1f9      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03c      	beq.n	800312a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030be:	4a4a      	ldr	r2, [pc, #296]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fd feea 	bl	8000ea0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fd fee6 	bl	8000ea0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1d4      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ef      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3ec>
 80030f0:	e01b      	b.n	800312a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f8:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7fd fecd 	bl	8000ea0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310a:	f7fd fec9 	bl	8000ea0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1b7      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800311c:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ef      	bne.n	800310a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80a6 	beq.w	8003284 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	; 0x58
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d118      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317c:	f7fd fe90 	bl	8000ea0 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fd fe8c 	bl	8000ea0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e17a      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_RCC_OscConfig+0x4d8>
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ba:	e029      	b.n	8003210 <HAL_RCC_OscConfig+0x52c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d115      	bne.n	80031f0 <HAL_RCC_OscConfig+0x50c>
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	4a03      	ldr	r2, [pc, #12]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x52c>
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	4b9c      	ldr	r3, [pc, #624]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	4a9b      	ldr	r2, [pc, #620]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003200:	4b98      	ldr	r3, [pc, #608]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	4a97      	ldr	r2, [pc, #604]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fd fe42 	bl	8000ea0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fd fe3e 	bl	8000ea0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e12a      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ed      	beq.n	8003220 <HAL_RCC_OscConfig+0x53c>
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fd fe2b 	bl	8000ea0 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fd fe27 	bl	8000ea0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e113      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	4b7f      	ldr	r3, [pc, #508]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ed      	bne.n	800324e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	4a79      	ldr	r2, [pc, #484]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80fe 	beq.w	800348a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	2b02      	cmp	r3, #2
 8003294:	f040 80d0 	bne.w	8003438 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003298:	4b72      	ldr	r3, [pc, #456]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d130      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	3b01      	subs	r3, #1
 80032b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d127      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d11f      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d8:	2a07      	cmp	r2, #7
 80032da:	bf14      	ite	ne
 80032dc:	2201      	movne	r2, #1
 80032de:	2200      	moveq	r2, #0
 80032e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d113      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	3b01      	subs	r3, #1
 80032f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d109      	bne.n	800330e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d06e      	beq.n	80033ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d069      	beq.n	80033e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0ad      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a4b      	ldr	r2, [pc, #300]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800333c:	f7fd fdb0 	bl	8000ea0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fd fdac 	bl	8000ea0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e09a      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003356:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	4b40      	ldr	r3, [pc, #256]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003372:	3a01      	subs	r2, #1
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	4311      	orrs	r1, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800337c:	0212      	lsls	r2, r2, #8
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	3a01      	subs	r2, #1
 8003388:	0552      	lsls	r2, r2, #21
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003390:	0852      	lsrs	r2, r2, #1
 8003392:	3a01      	subs	r2, #1
 8003394:	0652      	lsls	r2, r2, #25
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800339c:	0912      	lsrs	r2, r2, #4
 800339e:	0452      	lsls	r2, r2, #17
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4930      	ldr	r1, [pc, #192]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033a8:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2d      	ldr	r2, [pc, #180]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c0:	f7fd fd6e 	bl	8000ea0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fd6a 	bl	8000ea0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e058      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e6:	e050      	b.n	800348a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e04f      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d148      	bne.n	800348a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003410:	f7fd fd46 	bl	8000ea0 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fd fd42 	bl	8000ea0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e030      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x734>
 8003436:	e028      	b.n	800348a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d023      	beq.n	8003486 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <HAL_RCC_OscConfig+0x780>)
 8003444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fd fd29 	bl	8000ea0 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003450:	e00c      	b.n	800346c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003452:	f7fd fd25 	bl	8000ea0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d905      	bls.n	800346c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e013      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
 8003464:	40021000 	.word	0x40021000
 8003468:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_OscConfig+0x7b0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ec      	bne.n	8003452 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_RCC_OscConfig+0x7b0>)
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4905      	ldr	r1, [pc, #20]	; (8003494 <HAL_RCC_OscConfig+0x7b0>)
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_OscConfig+0x7b4>)
 8003480:	4013      	ands	r3, r2
 8003482:	60cb      	str	r3, [r1, #12]
 8003484:	e001      	b.n	800348a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	feeefffc 	.word	0xfeeefffc

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0e7      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b75      	ldr	r3, [pc, #468]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d910      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b72      	ldr	r3, [pc, #456]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4970      	ldr	r1, [pc, #448]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b6e      	ldr	r3, [pc, #440]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0cf      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d010      	beq.n	800350e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d908      	bls.n	800350e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4960      	ldr	r1, [pc, #384]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04c      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	4b5a      	ldr	r3, [pc, #360]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d121      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0a6      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353a:	4b54      	ldr	r3, [pc, #336]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d115      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e09a      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003552:	4b4e      	ldr	r3, [pc, #312]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e08e      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003562:	4b4a      	ldr	r3, [pc, #296]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e086      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b46      	ldr	r3, [pc, #280]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4943      	ldr	r1, [pc, #268]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fd fc8c 	bl	8000ea0 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fd fc88 	bl	8000ea0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e06e      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b3a      	ldr	r3, [pc, #232]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d208      	bcs.n	80035e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	492b      	ldr	r1, [pc, #172]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d210      	bcs.n	8003612 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 0207 	bic.w	r2, r3, #7
 80035f8:	4923      	ldr	r1, [pc, #140]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCC_ClockConfig+0x1ec>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d001      	beq.n	8003612 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e036      	b.n	8003680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4918      	ldr	r1, [pc, #96]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363c:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4910      	ldr	r1, [pc, #64]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003650:	f000 f824 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	490b      	ldr	r1, [pc, #44]	; (8003690 <HAL_RCC_ClockConfig+0x1f4>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1f8>)
 800366e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1fc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fbc3 	bl	8000e00 <HAL_InitTick>
 800367a:	4603      	mov	r3, r0
 800367c:	72fb      	strb	r3, [r7, #11]

  return status;
 800367e:	7afb      	ldrb	r3, [r7, #11]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000
 8003690:	08005778 	.word	0x08005778
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036aa:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x34>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d121      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d11e      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036d0:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	e005      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036f8:	4a2b      	ldr	r2, [pc, #172]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b04      	cmp	r3, #4
 8003712:	d102      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e004      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d101      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d134      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0xa6>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d003      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0xac>
 8003740:	e005      	b.n	800374e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003742:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003744:	617b      	str	r3, [r7, #20]
      break;
 8003746:	e005      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800374a:	617b      	str	r3, [r7, #20]
      break;
 800374c:	e002      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	617b      	str	r3, [r7, #20]
      break;
 8003752:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	3301      	adds	r3, #1
 8003760:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	fb03 f202 	mul.w	r2, r3, r2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	0e5b      	lsrs	r3, r3, #25
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	3301      	adds	r3, #1
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003794:	69bb      	ldr	r3, [r7, #24]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08005790 	.word	0x08005790
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037d0:	f7ff fff0 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4904      	ldr	r1, [pc, #16]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08005788 	.word	0x08005788

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037fc:	f7ff ffda 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0adb      	lsrs	r3, r3, #11
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4904      	ldr	r1, [pc, #16]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	08005788 	.word	0x08005788

08003824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003830:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800383c:	f7ff f9ee 	bl	8002c1c <HAL_PWREx_GetVoltageRange>
 8003840:	6178      	str	r0, [r7, #20]
 8003842:	e014      	b.n	800386e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	4a24      	ldr	r2, [pc, #144]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	6593      	str	r3, [r2, #88]	; 0x58
 8003850:	4b22      	ldr	r3, [pc, #136]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800385c:	f7ff f9de 	bl	8002c1c <HAL_PWREx_GetVoltageRange>
 8003860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003862:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003874:	d10b      	bne.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d919      	bls.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2ba0      	cmp	r3, #160	; 0xa0
 8003880:	d902      	bls.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003882:	2302      	movs	r3, #2
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	e013      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003888:	2301      	movs	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e010      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d902      	bls.n	800389a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003894:	2303      	movs	r3, #3
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e00a      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d102      	bne.n	80038a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038a0:	2302      	movs	r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e004      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d101      	bne.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038ac:	2301      	movs	r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 0207 	bic.w	r2, r3, #7
 80038b8:	4909      	ldr	r1, [pc, #36]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d001      	beq.n	80038d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40022000 	.word	0x40022000

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038ec:	2300      	movs	r3, #0
 80038ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f0:	2300      	movs	r3, #0
 80038f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d041      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003904:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003908:	d02a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800390a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800390e:	d824      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800391a:	d81e      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003924:	d010      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003926:	e018      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003928:	4b86      	ldr	r3, [pc, #536]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a85      	ldr	r2, [pc, #532]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003932:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003934:	e015      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fabb 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003946:	e00c      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3320      	adds	r3, #32
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fba6 	bl	80040a0 <RCCEx_PLLSAI2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003958:	e003      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	74fb      	strb	r3, [r7, #19]
      break;
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003968:	4b76      	ldr	r3, [pc, #472]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003976:	4973      	ldr	r1, [pc, #460]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800397e:	e001      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d041      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003994:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003998:	d02a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800399a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800399e:	d824      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a4:	d008      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039aa:	d81e      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b4:	d010      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039b6:	e018      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b8:	4b62      	ldr	r3, [pc, #392]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a61      	ldr	r2, [pc, #388]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fa73 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d6:	e00c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3320      	adds	r3, #32
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fb5e 	bl	80040a0 <RCCEx_PLLSAI2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	74fb      	strb	r3, [r7, #19]
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039f8:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a06:	494f      	ldr	r1, [pc, #316]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a0e:	e001      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a0 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	4a40      	ldr	r2, [pc, #256]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	6593      	str	r3, [r2, #88]	; 0x58
 8003a48:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a58:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a3a      	ldr	r2, [pc, #232]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a64:	f7fd fa1c 	bl	8000ea0 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a6a:	e009      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6c:	f7fd fa18 	bl	8000ea0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d902      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a7e:	e005      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a80:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ef      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d15c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a92:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01f      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d019      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd f9d7 	bl	8000ea0 <HAL_GetTick>
 8003af2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af4:	e00b      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fd f9d3 	bl	8000ea0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d902      	bls.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	74fb      	strb	r3, [r7, #19]
            break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ec      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b32:	4904      	ldr	r1, [pc, #16]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b3a:	e009      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	74bb      	strb	r3, [r7, #18]
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b50:	7c7b      	ldrb	r3, [r7, #17]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b9e      	ldr	r3, [pc, #632]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	4a9d      	ldr	r2, [pc, #628]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b6e:	4b98      	ldr	r3, [pc, #608]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f023 0203 	bic.w	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	4994      	ldr	r1, [pc, #592]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b90:	4b8f      	ldr	r3, [pc, #572]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	f023 020c 	bic.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	498c      	ldr	r1, [pc, #560]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb2:	4b87      	ldr	r3, [pc, #540]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	4983      	ldr	r1, [pc, #524]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	497b      	ldr	r1, [pc, #492]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	4972      	ldr	r1, [pc, #456]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c18:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	496a      	ldr	r1, [pc, #424]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c3a:	4b65      	ldr	r3, [pc, #404]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	4961      	ldr	r1, [pc, #388]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6a:	4959      	ldr	r1, [pc, #356]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c7e:	4b54      	ldr	r3, [pc, #336]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	4950      	ldr	r1, [pc, #320]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ca0:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	4948      	ldr	r1, [pc, #288]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	493f      	ldr	r1, [pc, #252]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d028      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce4:	4b3a      	ldr	r3, [pc, #232]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf2:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d02:	d106      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d04:	4b32      	ldr	r3, [pc, #200]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a31      	ldr	r2, [pc, #196]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d0e:	60d3      	str	r3, [r2, #12]
 8003d10:	e011      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	2101      	movs	r1, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f8c8 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d028      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	491f      	ldr	r1, [pc, #124]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d60:	d106      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d6c:	60d3      	str	r3, [r2, #12]
 8003d6e:	e011      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f899 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02b      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	4908      	ldr	r1, [pc, #32]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbe:	d109      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a02      	ldr	r2, [pc, #8]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
 8003dcc:	e014      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f867 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d02f      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e04:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e12:	4928      	ldr	r1, [pc, #160]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f844 	bl	8003eb8 <RCCEx_PLLSAI1_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d014      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	74bb      	strb	r3, [r7, #18]
 8003e3e:	e011      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3320      	adds	r3, #32
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f925 	bl	80040a0 <RCCEx_PLLSAI2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7e:	490d      	ldr	r1, [pc, #52]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea2:	4904      	ldr	r1, [pc, #16]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eaa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ec6:	4b75      	ldr	r3, [pc, #468]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ed2:	4b72      	ldr	r3, [pc, #456]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0203 	and.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10d      	bne.n	8003efe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eea:	4b6c      	ldr	r3, [pc, #432]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d047      	beq.n	8003f8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	e044      	b.n	8003f8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d018      	beq.n	8003f3e <RCCEx_PLLSAI1_Config+0x86>
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d825      	bhi.n	8003f5c <RCCEx_PLLSAI1_Config+0xa4>
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d002      	beq.n	8003f1a <RCCEx_PLLSAI1_Config+0x62>
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d009      	beq.n	8003f2c <RCCEx_PLLSAI1_Config+0x74>
 8003f18:	e020      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f1a:	4b60      	ldr	r3, [pc, #384]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11d      	bne.n	8003f62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2a:	e01a      	b.n	8003f62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f2c:	4b5b      	ldr	r3, [pc, #364]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d116      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3c:	e013      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f3e:	4b57      	ldr	r3, [pc, #348]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f4a:	4b54      	ldr	r3, [pc, #336]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f5a:	e006      	b.n	8003f6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f60:	e004      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f62:	bf00      	nop
 8003f64:	e002      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10d      	bne.n	8003f8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f72:	4b4a      	ldr	r3, [pc, #296]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	430b      	orrs	r3, r1
 8003f88:	4944      	ldr	r1, [pc, #272]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d17d      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a40      	ldr	r2, [pc, #256]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa0:	f7fc ff7e 	bl	8000ea0 <HAL_GetTick>
 8003fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa6:	e009      	b.n	8003fbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fa8:	f7fc ff7a 	bl	8000ea0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d902      	bls.n	8003fbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003fba:	e005      	b.n	8003fc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fbc:	4b37      	ldr	r3, [pc, #220]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ef      	bne.n	8003fa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d160      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d111      	bne.n	8003ff8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6892      	ldr	r2, [r2, #8]
 8003fe4:	0211      	lsls	r1, r2, #8
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68d2      	ldr	r2, [r2, #12]
 8003fea:	0912      	lsrs	r2, r2, #4
 8003fec:	0452      	lsls	r2, r2, #17
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	492a      	ldr	r1, [pc, #168]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	610b      	str	r3, [r1, #16]
 8003ff6:	e027      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d112      	bne.n	8004024 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004006:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6892      	ldr	r2, [r2, #8]
 800400e:	0211      	lsls	r1, r2, #8
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6912      	ldr	r2, [r2, #16]
 8004014:	0852      	lsrs	r2, r2, #1
 8004016:	3a01      	subs	r2, #1
 8004018:	0552      	lsls	r2, r2, #21
 800401a:	430a      	orrs	r2, r1
 800401c:	491f      	ldr	r1, [pc, #124]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	610b      	str	r3, [r1, #16]
 8004022:	e011      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800402c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6892      	ldr	r2, [r2, #8]
 8004034:	0211      	lsls	r1, r2, #8
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6952      	ldr	r2, [r2, #20]
 800403a:	0852      	lsrs	r2, r2, #1
 800403c:	3a01      	subs	r2, #1
 800403e:	0652      	lsls	r2, r2, #25
 8004040:	430a      	orrs	r2, r1
 8004042:	4916      	ldr	r1, [pc, #88]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a13      	ldr	r2, [pc, #76]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 800404e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004052:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fc ff24 	bl	8000ea0 <HAL_GetTick>
 8004058:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800405a:	e009      	b.n	8004070 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800405c:	f7fc ff20 	bl	8000ea0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d902      	bls.n	8004070 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	73fb      	strb	r3, [r7, #15]
          break;
 800406e:	e005      	b.n	800407c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ef      	beq.n	800405c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	4904      	ldr	r1, [pc, #16]	; (800409c <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000

080040a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ae:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0203 	and.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d10d      	bne.n	80040e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
       ||
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040d2:	4b61      	ldr	r3, [pc, #388]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
       ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d047      	beq.n	8004176 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e044      	b.n	8004176 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d018      	beq.n	8004126 <RCCEx_PLLSAI2_Config+0x86>
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d825      	bhi.n	8004144 <RCCEx_PLLSAI2_Config+0xa4>
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d002      	beq.n	8004102 <RCCEx_PLLSAI2_Config+0x62>
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d009      	beq.n	8004114 <RCCEx_PLLSAI2_Config+0x74>
 8004100:	e020      	b.n	8004144 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004102:	4b55      	ldr	r3, [pc, #340]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11d      	bne.n	800414a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004112:	e01a      	b.n	800414a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004124:	e013      	b.n	800414e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004126:	4b4c      	ldr	r3, [pc, #304]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004132:	4b49      	ldr	r3, [pc, #292]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004142:	e006      	b.n	8004152 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      break;
 8004148:	e004      	b.n	8004154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004152:	bf00      	nop
    }

    if(status == HAL_OK)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800415a:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	430b      	orrs	r3, r1
 8004170:	4939      	ldr	r1, [pc, #228]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d167      	bne.n	800424c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800417c:	4b36      	ldr	r3, [pc, #216]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a35      	ldr	r2, [pc, #212]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004188:	f7fc fe8a 	bl	8000ea0 <HAL_GetTick>
 800418c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800418e:	e009      	b.n	80041a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004190:	f7fc fe86 	bl	8000ea0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d902      	bls.n	80041a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	73fb      	strb	r3, [r7, #15]
        break;
 80041a2:	e005      	b.n	80041b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041a4:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ef      	bne.n	8004190 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d14a      	bne.n	800424c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d111      	bne.n	80041e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6892      	ldr	r2, [r2, #8]
 80041cc:	0211      	lsls	r1, r2, #8
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	0912      	lsrs	r2, r2, #4
 80041d4:	0452      	lsls	r2, r2, #17
 80041d6:	430a      	orrs	r2, r1
 80041d8:	491f      	ldr	r1, [pc, #124]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	614b      	str	r3, [r1, #20]
 80041de:	e011      	b.n	8004204 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6892      	ldr	r2, [r2, #8]
 80041f0:	0211      	lsls	r1, r2, #8
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6912      	ldr	r2, [r2, #16]
 80041f6:	0852      	lsrs	r2, r2, #1
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0652      	lsls	r2, r2, #25
 80041fc:	430a      	orrs	r2, r1
 80041fe:	4916      	ldr	r1, [pc, #88]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004200:	4313      	orrs	r3, r2
 8004202:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004204:	4b14      	ldr	r3, [pc, #80]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fc fe46 	bl	8000ea0 <HAL_GetTick>
 8004214:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004216:	e009      	b.n	800422c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004218:	f7fc fe42 	bl	8000ea0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d902      	bls.n	800422c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	73fb      	strb	r3, [r7, #15]
          break;
 800422a:	e005      	b.n	8004238 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ef      	beq.n	8004218 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4904      	ldr	r1, [pc, #16]	; (8004258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000

0800425c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e040      	b.n	80042f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc fc2e 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	; 0x24
 8004288:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8c0 	bl	8004420 <UART_SetConfig>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e022      	b.n	80042f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb6c 	bl	8004990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fbf3 	bl	8004ad4 <UART_CheckIdleState>
 80042ee:	4603      	mov	r3, r0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430c:	2b20      	cmp	r3, #32
 800430e:	f040 8082 	bne.w	8004416 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_UART_Transmit+0x26>
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e07a      	b.n	8004418 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_UART_Transmit+0x38>
 800432c:	2302      	movs	r3, #2
 800432e:	e073      	b.n	8004418 <HAL_UART_Transmit+0x120>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2221      	movs	r2, #33	; 0x21
 8004344:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004346:	f7fc fdab 	bl	8000ea0 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004364:	d108      	bne.n	8004378 <HAL_UART_Transmit+0x80>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e003      	b.n	8004380 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004388:	e02d      	b.n	80043e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fbe6 	bl	8004b66 <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e039      	b.n	8004418 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b6:	b292      	uxth	r2, r2
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3302      	adds	r3, #2
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e008      	b.n	80043d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b292      	uxth	r2, r2
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1cb      	bne.n	800438a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2140      	movs	r1, #64	; 0x40
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fbb2 	bl	8004b66 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e005      	b.n	8004418 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004424:	b08a      	sub	sp, #40	; 0x28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4313      	orrs	r3, r2
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4ba4      	ldr	r3, [pc, #656]	; (80046e0 <UART_SetConfig+0x2c0>)
 8004450:	4013      	ands	r3, r2
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004458:	430b      	orrs	r3, r1
 800445a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a99      	ldr	r2, [pc, #612]	; (80046e4 <UART_SetConfig+0x2c4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	4313      	orrs	r3, r2
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a90      	ldr	r2, [pc, #576]	; (80046e8 <UART_SetConfig+0x2c8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d126      	bne.n	80044f8 <UART_SetConfig+0xd8>
 80044aa:	4b90      	ldr	r3, [pc, #576]	; (80046ec <UART_SetConfig+0x2cc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d81b      	bhi.n	80044f0 <UART_SetConfig+0xd0>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0xa0>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d6:	e116      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044d8:	2302      	movs	r3, #2
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e112      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e10e      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e10a      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e106      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a7c      	ldr	r2, [pc, #496]	; (80046f0 <UART_SetConfig+0x2d0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d138      	bne.n	8004574 <UART_SetConfig+0x154>
 8004502:	4b7a      	ldr	r3, [pc, #488]	; (80046ec <UART_SetConfig+0x2cc>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b0c      	cmp	r3, #12
 800450e:	d82d      	bhi.n	800456c <UART_SetConfig+0x14c>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0xf8>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800454d 	.word	0x0800454d
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800456d 	.word	0x0800456d
 8004524:	0800456d 	.word	0x0800456d
 8004528:	0800455d 	.word	0x0800455d
 800452c:	0800456d 	.word	0x0800456d
 8004530:	0800456d 	.word	0x0800456d
 8004534:	0800456d 	.word	0x0800456d
 8004538:	08004555 	.word	0x08004555
 800453c:	0800456d 	.word	0x0800456d
 8004540:	0800456d 	.word	0x0800456d
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004565 	.word	0x08004565
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e0d8      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e0d4      	b.n	8004706 <UART_SetConfig+0x2e6>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e0d0      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e0cc      	b.n	8004706 <UART_SetConfig+0x2e6>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e0c8      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a5e      	ldr	r2, [pc, #376]	; (80046f4 <UART_SetConfig+0x2d4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d125      	bne.n	80045ca <UART_SetConfig+0x1aa>
 800457e:	4b5b      	ldr	r3, [pc, #364]	; (80046ec <UART_SetConfig+0x2cc>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d016      	beq.n	80045ba <UART_SetConfig+0x19a>
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d818      	bhi.n	80045c2 <UART_SetConfig+0x1a2>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d00a      	beq.n	80045aa <UART_SetConfig+0x18a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d814      	bhi.n	80045c2 <UART_SetConfig+0x1a2>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <UART_SetConfig+0x182>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d008      	beq.n	80045b2 <UART_SetConfig+0x192>
 80045a0:	e00f      	b.n	80045c2 <UART_SetConfig+0x1a2>
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a8:	e0ad      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045aa:	2302      	movs	r3, #2
 80045ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b0:	e0a9      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045b2:	2304      	movs	r3, #4
 80045b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b8:	e0a5      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045ba:	2308      	movs	r3, #8
 80045bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c0:	e0a1      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045c2:	2310      	movs	r3, #16
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c8:	e09d      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4a      	ldr	r2, [pc, #296]	; (80046f8 <UART_SetConfig+0x2d8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d125      	bne.n	8004620 <UART_SetConfig+0x200>
 80045d4:	4b45      	ldr	r3, [pc, #276]	; (80046ec <UART_SetConfig+0x2cc>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045de:	2bc0      	cmp	r3, #192	; 0xc0
 80045e0:	d016      	beq.n	8004610 <UART_SetConfig+0x1f0>
 80045e2:	2bc0      	cmp	r3, #192	; 0xc0
 80045e4:	d818      	bhi.n	8004618 <UART_SetConfig+0x1f8>
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d00a      	beq.n	8004600 <UART_SetConfig+0x1e0>
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	d814      	bhi.n	8004618 <UART_SetConfig+0x1f8>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <UART_SetConfig+0x1d8>
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d008      	beq.n	8004608 <UART_SetConfig+0x1e8>
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x1f8>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fe:	e082      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004600:	2302      	movs	r3, #2
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004606:	e07e      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e07a      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004616:	e076      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e072      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a35      	ldr	r2, [pc, #212]	; (80046fc <UART_SetConfig+0x2dc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d12a      	bne.n	8004680 <UART_SetConfig+0x260>
 800462a:	4b30      	ldr	r3, [pc, #192]	; (80046ec <UART_SetConfig+0x2cc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004638:	d01a      	beq.n	8004670 <UART_SetConfig+0x250>
 800463a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463e:	d81b      	bhi.n	8004678 <UART_SetConfig+0x258>
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d00c      	beq.n	8004660 <UART_SetConfig+0x240>
 8004646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464a:	d815      	bhi.n	8004678 <UART_SetConfig+0x258>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <UART_SetConfig+0x238>
 8004650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004654:	d008      	beq.n	8004668 <UART_SetConfig+0x248>
 8004656:	e00f      	b.n	8004678 <UART_SetConfig+0x258>
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e052      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004660:	2302      	movs	r3, #2
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e04e      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e04a      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e046      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e042      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <UART_SetConfig+0x2c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d13a      	bne.n	8004700 <UART_SetConfig+0x2e0>
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <UART_SetConfig+0x2cc>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004698:	d01a      	beq.n	80046d0 <UART_SetConfig+0x2b0>
 800469a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800469e:	d81b      	bhi.n	80046d8 <UART_SetConfig+0x2b8>
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a4:	d00c      	beq.n	80046c0 <UART_SetConfig+0x2a0>
 80046a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046aa:	d815      	bhi.n	80046d8 <UART_SetConfig+0x2b8>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <UART_SetConfig+0x298>
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d008      	beq.n	80046c8 <UART_SetConfig+0x2a8>
 80046b6:	e00f      	b.n	80046d8 <UART_SetConfig+0x2b8>
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046be:	e022      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e01e      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e01a      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e016      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e012      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046e0:	efff69f3 	.word	0xefff69f3
 80046e4:	40008000 	.word	0x40008000
 80046e8:	40013800 	.word	0x40013800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40004400 	.word	0x40004400
 80046f4:	40004800 	.word	0x40004800
 80046f8:	40004c00 	.word	0x40004c00
 80046fc:	40005000 	.word	0x40005000
 8004700:	2310      	movs	r3, #16
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a9f      	ldr	r2, [pc, #636]	; (8004988 <UART_SetConfig+0x568>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d17a      	bne.n	8004806 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004714:	2b08      	cmp	r3, #8
 8004716:	d824      	bhi.n	8004762 <UART_SetConfig+0x342>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <UART_SetConfig+0x300>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004745 	.word	0x08004745
 8004724:	08004763 	.word	0x08004763
 8004728:	0800474d 	.word	0x0800474d
 800472c:	08004763 	.word	0x08004763
 8004730:	08004753 	.word	0x08004753
 8004734:	08004763 	.word	0x08004763
 8004738:	08004763 	.word	0x08004763
 800473c:	08004763 	.word	0x08004763
 8004740:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004744:	f7ff f842 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004748:	61f8      	str	r0, [r7, #28]
        break;
 800474a:	e010      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4b8f      	ldr	r3, [pc, #572]	; (800498c <UART_SetConfig+0x56c>)
 800474e:	61fb      	str	r3, [r7, #28]
        break;
 8004750:	e00d      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fe ffa3 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004756:	61f8      	str	r0, [r7, #28]
        break;
 8004758:	e009      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475e:	61fb      	str	r3, [r7, #28]
        break;
 8004760:	e005      	b.n	800476e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800476c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80fb 	beq.w	800496c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	d305      	bcc.n	8004792 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	429a      	cmp	r2, r3
 8004790:	d903      	bls.n	800479a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004798:	e0e8      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2200      	movs	r2, #0
 800479e:	461c      	mov	r4, r3
 80047a0:	4615      	mov	r5, r2
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	022b      	lsls	r3, r5, #8
 80047ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047b0:	0222      	lsls	r2, r4, #8
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	6849      	ldr	r1, [r1, #4]
 80047b6:	0849      	lsrs	r1, r1, #1
 80047b8:	2000      	movs	r0, #0
 80047ba:	4688      	mov	r8, r1
 80047bc:	4681      	mov	r9, r0
 80047be:	eb12 0a08 	adds.w	sl, r2, r8
 80047c2:	eb43 0b09 	adc.w	fp, r3, r9
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d4:	4650      	mov	r0, sl
 80047d6:	4659      	mov	r1, fp
 80047d8:	f7fb fcf6 	bl	80001c8 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ea:	d308      	bcc.n	80047fe <UART_SetConfig+0x3de>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f2:	d204      	bcs.n	80047fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e0b6      	b.n	800496c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004804:	e0b2      	b.n	800496c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480e:	d15e      	bne.n	80048ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004814:	2b08      	cmp	r3, #8
 8004816:	d828      	bhi.n	800486a <UART_SetConfig+0x44a>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x400>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004855 	.word	0x08004855
 800482c:	0800486b 	.word	0x0800486b
 8004830:	0800485b 	.word	0x0800485b
 8004834:	0800486b 	.word	0x0800486b
 8004838:	0800486b 	.word	0x0800486b
 800483c:	0800486b 	.word	0x0800486b
 8004840:	08004863 	.word	0x08004863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe ffc2 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004848:	61f8      	str	r0, [r7, #28]
        break;
 800484a:	e014      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe ffd4 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 8004850:	61f8      	str	r0, [r7, #28]
        break;
 8004852:	e010      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004854:	4b4d      	ldr	r3, [pc, #308]	; (800498c <UART_SetConfig+0x56c>)
 8004856:	61fb      	str	r3, [r7, #28]
        break;
 8004858:	e00d      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485a:	f7fe ff1f 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800485e:	61f8      	str	r0, [r7, #28]
        break;
 8004860:	e009      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004866:	61fb      	str	r3, [r7, #28]
        break;
 8004868:	e005      	b.n	8004876 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d077      	beq.n	800496c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005a      	lsls	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b0f      	cmp	r3, #15
 8004896:	d916      	bls.n	80048c6 <UART_SetConfig+0x4a6>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489e:	d212      	bcs.n	80048c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	8afb      	ldrh	r3, [r7, #22]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	8afa      	ldrh	r2, [r7, #22]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e052      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048cc:	e04e      	b.n	800496c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x506>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x4bc>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe ff64 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
        break;
 8004906:	e014      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe ff76 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e010      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <UART_SetConfig+0x56c>)
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e00d      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fec1 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800491a:	61f8      	str	r0, [r7, #28]
        break;
 800491c:	e009      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e005      	b.n	8004932 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004930:	bf00      	nop
    }

    if (pclk != 0U)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d019      	beq.n	800496c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	085a      	lsrs	r2, r3, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d909      	bls.n	8004966 <UART_SetConfig+0x546>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d205      	bcs.n	8004966 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e002      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	40008000 	.word	0x40008000
 800498c:	00f42400 	.word	0x00f42400

08004990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8e:	d10a      	bne.n	8004aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae4:	f7fc f9dc 	bl	8000ea0 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d10e      	bne.n	8004b16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f82d 	bl	8004b66 <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e023      	b.n	8004b5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d10e      	bne.n	8004b42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f817 	bl	8004b66 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e00d      	b.n	8004b5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b09c      	sub	sp, #112	; 0x70
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b76:	e0a5      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	f000 80a1 	beq.w	8004cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b82:	f7fc f98d 	bl	8000ea0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d302      	bcc.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d13e      	bne.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bac:	667b      	str	r3, [r7, #100]	; 0x64
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e6      	bne.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	663b      	str	r3, [r7, #96]	; 0x60
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3308      	adds	r3, #8
 8004be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bea:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e067      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d04f      	beq.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	d147      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e6      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c90:	623a      	str	r2, [r7, #32]
 8004c92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69f9      	ldr	r1, [r7, #28]
 8004c96:	6a3a      	ldr	r2, [r7, #32]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e010      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f43f af4a 	beq.w	8004b78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3770      	adds	r7, #112	; 0x70
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <__errno>:
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <__errno+0x8>)
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	; (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	; (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	; (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 fd1e 	bl	8005750 <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	0800582c 	.word	0x0800582c
 8004d38:	0800582c 	.word	0x0800582c
 8004d3c:	0800582c 	.word	0x0800582c
 8004d40:	08005830 	.word	0x08005830

08004d44 <memset>:
 8004d44:	4402      	add	r2, r0
 8004d46:	4603      	mov	r3, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <memset+0xa>
 8004d4c:	4770      	bx	lr
 8004d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d52:	e7f9      	b.n	8004d48 <memset+0x4>

08004d54 <_puts_r>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	460e      	mov	r6, r1
 8004d58:	4605      	mov	r5, r0
 8004d5a:	b118      	cbz	r0, 8004d64 <_puts_r+0x10>
 8004d5c:	6983      	ldr	r3, [r0, #24]
 8004d5e:	b90b      	cbnz	r3, 8004d64 <_puts_r+0x10>
 8004d60:	f000 fa48 	bl	80051f4 <__sinit>
 8004d64:	69ab      	ldr	r3, [r5, #24]
 8004d66:	68ac      	ldr	r4, [r5, #8]
 8004d68:	b913      	cbnz	r3, 8004d70 <_puts_r+0x1c>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 fa42 	bl	80051f4 <__sinit>
 8004d70:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <_puts_r+0xd0>)
 8004d72:	429c      	cmp	r4, r3
 8004d74:	d120      	bne.n	8004db8 <_puts_r+0x64>
 8004d76:	686c      	ldr	r4, [r5, #4]
 8004d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7a:	07db      	lsls	r3, r3, #31
 8004d7c:	d405      	bmi.n	8004d8a <_puts_r+0x36>
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	0598      	lsls	r0, r3, #22
 8004d82:	d402      	bmi.n	8004d8a <_puts_r+0x36>
 8004d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d86:	f000 fad3 	bl	8005330 <__retarget_lock_acquire_recursive>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	0719      	lsls	r1, r3, #28
 8004d8e:	d51d      	bpl.n	8004dcc <_puts_r+0x78>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	b1db      	cbz	r3, 8004dcc <_puts_r+0x78>
 8004d94:	3e01      	subs	r6, #1
 8004d96:	68a3      	ldr	r3, [r4, #8]
 8004d98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	60a3      	str	r3, [r4, #8]
 8004da0:	bb39      	cbnz	r1, 8004df2 <_puts_r+0x9e>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da38      	bge.n	8004e18 <_puts_r+0xc4>
 8004da6:	4622      	mov	r2, r4
 8004da8:	210a      	movs	r1, #10
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 f848 	bl	8004e40 <__swbuf_r>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d011      	beq.n	8004dd8 <_puts_r+0x84>
 8004db4:	250a      	movs	r5, #10
 8004db6:	e011      	b.n	8004ddc <_puts_r+0x88>
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <_puts_r+0xd4>)
 8004dba:	429c      	cmp	r4, r3
 8004dbc:	d101      	bne.n	8004dc2 <_puts_r+0x6e>
 8004dbe:	68ac      	ldr	r4, [r5, #8]
 8004dc0:	e7da      	b.n	8004d78 <_puts_r+0x24>
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <_puts_r+0xd8>)
 8004dc4:	429c      	cmp	r4, r3
 8004dc6:	bf08      	it	eq
 8004dc8:	68ec      	ldreq	r4, [r5, #12]
 8004dca:	e7d5      	b.n	8004d78 <_puts_r+0x24>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f888 	bl	8004ee4 <__swsetup_r>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d0dd      	beq.n	8004d94 <_puts_r+0x40>
 8004dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dde:	07da      	lsls	r2, r3, #31
 8004de0:	d405      	bmi.n	8004dee <_puts_r+0x9a>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	059b      	lsls	r3, r3, #22
 8004de6:	d402      	bmi.n	8004dee <_puts_r+0x9a>
 8004de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dea:	f000 faa2 	bl	8005332 <__retarget_lock_release_recursive>
 8004dee:	4628      	mov	r0, r5
 8004df0:	bd70      	pop	{r4, r5, r6, pc}
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	da04      	bge.n	8004e00 <_puts_r+0xac>
 8004df6:	69a2      	ldr	r2, [r4, #24]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	dc06      	bgt.n	8004e0a <_puts_r+0xb6>
 8004dfc:	290a      	cmp	r1, #10
 8004dfe:	d004      	beq.n	8004e0a <_puts_r+0xb6>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	6022      	str	r2, [r4, #0]
 8004e06:	7019      	strb	r1, [r3, #0]
 8004e08:	e7c5      	b.n	8004d96 <_puts_r+0x42>
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 f817 	bl	8004e40 <__swbuf_r>
 8004e12:	3001      	adds	r0, #1
 8004e14:	d1bf      	bne.n	8004d96 <_puts_r+0x42>
 8004e16:	e7df      	b.n	8004dd8 <_puts_r+0x84>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	250a      	movs	r5, #10
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	6022      	str	r2, [r4, #0]
 8004e20:	701d      	strb	r5, [r3, #0]
 8004e22:	e7db      	b.n	8004ddc <_puts_r+0x88>
 8004e24:	080057e4 	.word	0x080057e4
 8004e28:	08005804 	.word	0x08005804
 8004e2c:	080057c4 	.word	0x080057c4

08004e30 <puts>:
 8004e30:	4b02      	ldr	r3, [pc, #8]	; (8004e3c <puts+0xc>)
 8004e32:	4601      	mov	r1, r0
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	f7ff bf8d 	b.w	8004d54 <_puts_r>
 8004e3a:	bf00      	nop
 8004e3c:	2000000c 	.word	0x2000000c

08004e40 <__swbuf_r>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	460e      	mov	r6, r1
 8004e44:	4614      	mov	r4, r2
 8004e46:	4605      	mov	r5, r0
 8004e48:	b118      	cbz	r0, 8004e52 <__swbuf_r+0x12>
 8004e4a:	6983      	ldr	r3, [r0, #24]
 8004e4c:	b90b      	cbnz	r3, 8004e52 <__swbuf_r+0x12>
 8004e4e:	f000 f9d1 	bl	80051f4 <__sinit>
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <__swbuf_r+0x98>)
 8004e54:	429c      	cmp	r4, r3
 8004e56:	d12b      	bne.n	8004eb0 <__swbuf_r+0x70>
 8004e58:	686c      	ldr	r4, [r5, #4]
 8004e5a:	69a3      	ldr	r3, [r4, #24]
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	89a3      	ldrh	r3, [r4, #12]
 8004e60:	071a      	lsls	r2, r3, #28
 8004e62:	d52f      	bpl.n	8004ec4 <__swbuf_r+0x84>
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	b36b      	cbz	r3, 8004ec4 <__swbuf_r+0x84>
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	1ac0      	subs	r0, r0, r3
 8004e6e:	6963      	ldr	r3, [r4, #20]
 8004e70:	b2f6      	uxtb	r6, r6
 8004e72:	4283      	cmp	r3, r0
 8004e74:	4637      	mov	r7, r6
 8004e76:	dc04      	bgt.n	8004e82 <__swbuf_r+0x42>
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 f926 	bl	80050cc <_fflush_r>
 8004e80:	bb30      	cbnz	r0, 8004ed0 <__swbuf_r+0x90>
 8004e82:	68a3      	ldr	r3, [r4, #8]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	60a3      	str	r3, [r4, #8]
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	6022      	str	r2, [r4, #0]
 8004e8e:	701e      	strb	r6, [r3, #0]
 8004e90:	6963      	ldr	r3, [r4, #20]
 8004e92:	3001      	adds	r0, #1
 8004e94:	4283      	cmp	r3, r0
 8004e96:	d004      	beq.n	8004ea2 <__swbuf_r+0x62>
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	07db      	lsls	r3, r3, #31
 8004e9c:	d506      	bpl.n	8004eac <__swbuf_r+0x6c>
 8004e9e:	2e0a      	cmp	r6, #10
 8004ea0:	d104      	bne.n	8004eac <__swbuf_r+0x6c>
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 f911 	bl	80050cc <_fflush_r>
 8004eaa:	b988      	cbnz	r0, 8004ed0 <__swbuf_r+0x90>
 8004eac:	4638      	mov	r0, r7
 8004eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <__swbuf_r+0x9c>)
 8004eb2:	429c      	cmp	r4, r3
 8004eb4:	d101      	bne.n	8004eba <__swbuf_r+0x7a>
 8004eb6:	68ac      	ldr	r4, [r5, #8]
 8004eb8:	e7cf      	b.n	8004e5a <__swbuf_r+0x1a>
 8004eba:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <__swbuf_r+0xa0>)
 8004ebc:	429c      	cmp	r4, r3
 8004ebe:	bf08      	it	eq
 8004ec0:	68ec      	ldreq	r4, [r5, #12]
 8004ec2:	e7ca      	b.n	8004e5a <__swbuf_r+0x1a>
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 f80c 	bl	8004ee4 <__swsetup_r>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d0cb      	beq.n	8004e68 <__swbuf_r+0x28>
 8004ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ed4:	e7ea      	b.n	8004eac <__swbuf_r+0x6c>
 8004ed6:	bf00      	nop
 8004ed8:	080057e4 	.word	0x080057e4
 8004edc:	08005804 	.word	0x08005804
 8004ee0:	080057c4 	.word	0x080057c4

08004ee4 <__swsetup_r>:
 8004ee4:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <__swsetup_r+0xcc>)
 8004ee6:	b570      	push	{r4, r5, r6, lr}
 8004ee8:	681d      	ldr	r5, [r3, #0]
 8004eea:	4606      	mov	r6, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	b125      	cbz	r5, 8004efa <__swsetup_r+0x16>
 8004ef0:	69ab      	ldr	r3, [r5, #24]
 8004ef2:	b913      	cbnz	r3, 8004efa <__swsetup_r+0x16>
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f000 f97d 	bl	80051f4 <__sinit>
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <__swsetup_r+0xd0>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	d10f      	bne.n	8004f20 <__swsetup_r+0x3c>
 8004f00:	686c      	ldr	r4, [r5, #4]
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f08:	0719      	lsls	r1, r3, #28
 8004f0a:	d42c      	bmi.n	8004f66 <__swsetup_r+0x82>
 8004f0c:	06dd      	lsls	r5, r3, #27
 8004f0e:	d411      	bmi.n	8004f34 <__swsetup_r+0x50>
 8004f10:	2309      	movs	r3, #9
 8004f12:	6033      	str	r3, [r6, #0]
 8004f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f18:	81a3      	strh	r3, [r4, #12]
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	e03e      	b.n	8004f9e <__swsetup_r+0xba>
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <__swsetup_r+0xd4>)
 8004f22:	429c      	cmp	r4, r3
 8004f24:	d101      	bne.n	8004f2a <__swsetup_r+0x46>
 8004f26:	68ac      	ldr	r4, [r5, #8]
 8004f28:	e7eb      	b.n	8004f02 <__swsetup_r+0x1e>
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <__swsetup_r+0xd8>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	bf08      	it	eq
 8004f30:	68ec      	ldreq	r4, [r5, #12]
 8004f32:	e7e6      	b.n	8004f02 <__swsetup_r+0x1e>
 8004f34:	0758      	lsls	r0, r3, #29
 8004f36:	d512      	bpl.n	8004f5e <__swsetup_r+0x7a>
 8004f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3a:	b141      	cbz	r1, 8004f4e <__swsetup_r+0x6a>
 8004f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f40:	4299      	cmp	r1, r3
 8004f42:	d002      	beq.n	8004f4a <__swsetup_r+0x66>
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 fa5b 	bl	8005400 <_free_r>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	2300      	movs	r3, #0
 8004f58:	6063      	str	r3, [r4, #4]
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f043 0308 	orr.w	r3, r3, #8
 8004f64:	81a3      	strh	r3, [r4, #12]
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	b94b      	cbnz	r3, 8004f7e <__swsetup_r+0x9a>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f74:	d003      	beq.n	8004f7e <__swsetup_r+0x9a>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f000 fa01 	bl	8005380 <__smakebuf_r>
 8004f7e:	89a0      	ldrh	r0, [r4, #12]
 8004f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f84:	f010 0301 	ands.w	r3, r0, #1
 8004f88:	d00a      	beq.n	8004fa0 <__swsetup_r+0xbc>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60a3      	str	r3, [r4, #8]
 8004f8e:	6963      	ldr	r3, [r4, #20]
 8004f90:	425b      	negs	r3, r3
 8004f92:	61a3      	str	r3, [r4, #24]
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	b943      	cbnz	r3, 8004faa <__swsetup_r+0xc6>
 8004f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f9c:	d1ba      	bne.n	8004f14 <__swsetup_r+0x30>
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	0781      	lsls	r1, r0, #30
 8004fa2:	bf58      	it	pl
 8004fa4:	6963      	ldrpl	r3, [r4, #20]
 8004fa6:	60a3      	str	r3, [r4, #8]
 8004fa8:	e7f4      	b.n	8004f94 <__swsetup_r+0xb0>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e7f7      	b.n	8004f9e <__swsetup_r+0xba>
 8004fae:	bf00      	nop
 8004fb0:	2000000c 	.word	0x2000000c
 8004fb4:	080057e4 	.word	0x080057e4
 8004fb8:	08005804 	.word	0x08005804
 8004fbc:	080057c4 	.word	0x080057c4

08004fc0 <__sflush_r>:
 8004fc0:	898a      	ldrh	r2, [r1, #12]
 8004fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	0710      	lsls	r0, r2, #28
 8004fca:	460c      	mov	r4, r1
 8004fcc:	d458      	bmi.n	8005080 <__sflush_r+0xc0>
 8004fce:	684b      	ldr	r3, [r1, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	dc05      	bgt.n	8004fe0 <__sflush_r+0x20>
 8004fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dc02      	bgt.n	8004fe0 <__sflush_r+0x20>
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fe2:	2e00      	cmp	r6, #0
 8004fe4:	d0f9      	beq.n	8004fda <__sflush_r+0x1a>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fec:	682f      	ldr	r7, [r5, #0]
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	d032      	beq.n	8005058 <__sflush_r+0x98>
 8004ff2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	075a      	lsls	r2, r3, #29
 8004ff8:	d505      	bpl.n	8005006 <__sflush_r+0x46>
 8004ffa:	6863      	ldr	r3, [r4, #4]
 8004ffc:	1ac0      	subs	r0, r0, r3
 8004ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005000:	b10b      	cbz	r3, 8005006 <__sflush_r+0x46>
 8005002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005004:	1ac0      	subs	r0, r0, r3
 8005006:	2300      	movs	r3, #0
 8005008:	4602      	mov	r2, r0
 800500a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800500c:	6a21      	ldr	r1, [r4, #32]
 800500e:	4628      	mov	r0, r5
 8005010:	47b0      	blx	r6
 8005012:	1c43      	adds	r3, r0, #1
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	d106      	bne.n	8005026 <__sflush_r+0x66>
 8005018:	6829      	ldr	r1, [r5, #0]
 800501a:	291d      	cmp	r1, #29
 800501c:	d82c      	bhi.n	8005078 <__sflush_r+0xb8>
 800501e:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <__sflush_r+0x108>)
 8005020:	40ca      	lsrs	r2, r1
 8005022:	07d6      	lsls	r6, r2, #31
 8005024:	d528      	bpl.n	8005078 <__sflush_r+0xb8>
 8005026:	2200      	movs	r2, #0
 8005028:	6062      	str	r2, [r4, #4]
 800502a:	04d9      	lsls	r1, r3, #19
 800502c:	6922      	ldr	r2, [r4, #16]
 800502e:	6022      	str	r2, [r4, #0]
 8005030:	d504      	bpl.n	800503c <__sflush_r+0x7c>
 8005032:	1c42      	adds	r2, r0, #1
 8005034:	d101      	bne.n	800503a <__sflush_r+0x7a>
 8005036:	682b      	ldr	r3, [r5, #0]
 8005038:	b903      	cbnz	r3, 800503c <__sflush_r+0x7c>
 800503a:	6560      	str	r0, [r4, #84]	; 0x54
 800503c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800503e:	602f      	str	r7, [r5, #0]
 8005040:	2900      	cmp	r1, #0
 8005042:	d0ca      	beq.n	8004fda <__sflush_r+0x1a>
 8005044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005048:	4299      	cmp	r1, r3
 800504a:	d002      	beq.n	8005052 <__sflush_r+0x92>
 800504c:	4628      	mov	r0, r5
 800504e:	f000 f9d7 	bl	8005400 <_free_r>
 8005052:	2000      	movs	r0, #0
 8005054:	6360      	str	r0, [r4, #52]	; 0x34
 8005056:	e7c1      	b.n	8004fdc <__sflush_r+0x1c>
 8005058:	6a21      	ldr	r1, [r4, #32]
 800505a:	2301      	movs	r3, #1
 800505c:	4628      	mov	r0, r5
 800505e:	47b0      	blx	r6
 8005060:	1c41      	adds	r1, r0, #1
 8005062:	d1c7      	bne.n	8004ff4 <__sflush_r+0x34>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0c4      	beq.n	8004ff4 <__sflush_r+0x34>
 800506a:	2b1d      	cmp	r3, #29
 800506c:	d001      	beq.n	8005072 <__sflush_r+0xb2>
 800506e:	2b16      	cmp	r3, #22
 8005070:	d101      	bne.n	8005076 <__sflush_r+0xb6>
 8005072:	602f      	str	r7, [r5, #0]
 8005074:	e7b1      	b.n	8004fda <__sflush_r+0x1a>
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	e7ad      	b.n	8004fdc <__sflush_r+0x1c>
 8005080:	690f      	ldr	r7, [r1, #16]
 8005082:	2f00      	cmp	r7, #0
 8005084:	d0a9      	beq.n	8004fda <__sflush_r+0x1a>
 8005086:	0793      	lsls	r3, r2, #30
 8005088:	680e      	ldr	r6, [r1, #0]
 800508a:	bf08      	it	eq
 800508c:	694b      	ldreq	r3, [r1, #20]
 800508e:	600f      	str	r7, [r1, #0]
 8005090:	bf18      	it	ne
 8005092:	2300      	movne	r3, #0
 8005094:	eba6 0807 	sub.w	r8, r6, r7
 8005098:	608b      	str	r3, [r1, #8]
 800509a:	f1b8 0f00 	cmp.w	r8, #0
 800509e:	dd9c      	ble.n	8004fda <__sflush_r+0x1a>
 80050a0:	6a21      	ldr	r1, [r4, #32]
 80050a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050a4:	4643      	mov	r3, r8
 80050a6:	463a      	mov	r2, r7
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b0      	blx	r6
 80050ac:	2800      	cmp	r0, #0
 80050ae:	dc06      	bgt.n	80050be <__sflush_r+0xfe>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	e78e      	b.n	8004fdc <__sflush_r+0x1c>
 80050be:	4407      	add	r7, r0
 80050c0:	eba8 0800 	sub.w	r8, r8, r0
 80050c4:	e7e9      	b.n	800509a <__sflush_r+0xda>
 80050c6:	bf00      	nop
 80050c8:	20400001 	.word	0x20400001

080050cc <_fflush_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	690b      	ldr	r3, [r1, #16]
 80050d0:	4605      	mov	r5, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	b913      	cbnz	r3, 80050dc <_fflush_r+0x10>
 80050d6:	2500      	movs	r5, #0
 80050d8:	4628      	mov	r0, r5
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	b118      	cbz	r0, 80050e6 <_fflush_r+0x1a>
 80050de:	6983      	ldr	r3, [r0, #24]
 80050e0:	b90b      	cbnz	r3, 80050e6 <_fflush_r+0x1a>
 80050e2:	f000 f887 	bl	80051f4 <__sinit>
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <_fflush_r+0x6c>)
 80050e8:	429c      	cmp	r4, r3
 80050ea:	d11b      	bne.n	8005124 <_fflush_r+0x58>
 80050ec:	686c      	ldr	r4, [r5, #4]
 80050ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0ef      	beq.n	80050d6 <_fflush_r+0xa>
 80050f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050f8:	07d0      	lsls	r0, r2, #31
 80050fa:	d404      	bmi.n	8005106 <_fflush_r+0x3a>
 80050fc:	0599      	lsls	r1, r3, #22
 80050fe:	d402      	bmi.n	8005106 <_fflush_r+0x3a>
 8005100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005102:	f000 f915 	bl	8005330 <__retarget_lock_acquire_recursive>
 8005106:	4628      	mov	r0, r5
 8005108:	4621      	mov	r1, r4
 800510a:	f7ff ff59 	bl	8004fc0 <__sflush_r>
 800510e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005110:	07da      	lsls	r2, r3, #31
 8005112:	4605      	mov	r5, r0
 8005114:	d4e0      	bmi.n	80050d8 <_fflush_r+0xc>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	059b      	lsls	r3, r3, #22
 800511a:	d4dd      	bmi.n	80050d8 <_fflush_r+0xc>
 800511c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800511e:	f000 f908 	bl	8005332 <__retarget_lock_release_recursive>
 8005122:	e7d9      	b.n	80050d8 <_fflush_r+0xc>
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <_fflush_r+0x70>)
 8005126:	429c      	cmp	r4, r3
 8005128:	d101      	bne.n	800512e <_fflush_r+0x62>
 800512a:	68ac      	ldr	r4, [r5, #8]
 800512c:	e7df      	b.n	80050ee <_fflush_r+0x22>
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <_fflush_r+0x74>)
 8005130:	429c      	cmp	r4, r3
 8005132:	bf08      	it	eq
 8005134:	68ec      	ldreq	r4, [r5, #12]
 8005136:	e7da      	b.n	80050ee <_fflush_r+0x22>
 8005138:	080057e4 	.word	0x080057e4
 800513c:	08005804 	.word	0x08005804
 8005140:	080057c4 	.word	0x080057c4

08005144 <std>:
 8005144:	2300      	movs	r3, #0
 8005146:	b510      	push	{r4, lr}
 8005148:	4604      	mov	r4, r0
 800514a:	e9c0 3300 	strd	r3, r3, [r0]
 800514e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005152:	6083      	str	r3, [r0, #8]
 8005154:	8181      	strh	r1, [r0, #12]
 8005156:	6643      	str	r3, [r0, #100]	; 0x64
 8005158:	81c2      	strh	r2, [r0, #14]
 800515a:	6183      	str	r3, [r0, #24]
 800515c:	4619      	mov	r1, r3
 800515e:	2208      	movs	r2, #8
 8005160:	305c      	adds	r0, #92	; 0x5c
 8005162:	f7ff fdef 	bl	8004d44 <memset>
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <std+0x38>)
 8005168:	6263      	str	r3, [r4, #36]	; 0x24
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <std+0x3c>)
 800516c:	62a3      	str	r3, [r4, #40]	; 0x28
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <std+0x40>)
 8005170:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <std+0x44>)
 8005174:	6224      	str	r4, [r4, #32]
 8005176:	6323      	str	r3, [r4, #48]	; 0x30
 8005178:	bd10      	pop	{r4, pc}
 800517a:	bf00      	nop
 800517c:	080055e1 	.word	0x080055e1
 8005180:	08005603 	.word	0x08005603
 8005184:	0800563b 	.word	0x0800563b
 8005188:	0800565f 	.word	0x0800565f

0800518c <_cleanup_r>:
 800518c:	4901      	ldr	r1, [pc, #4]	; (8005194 <_cleanup_r+0x8>)
 800518e:	f000 b8af 	b.w	80052f0 <_fwalk_reent>
 8005192:	bf00      	nop
 8005194:	080050cd 	.word	0x080050cd

08005198 <__sfmoreglue>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	2268      	movs	r2, #104	; 0x68
 800519c:	1e4d      	subs	r5, r1, #1
 800519e:	4355      	muls	r5, r2
 80051a0:	460e      	mov	r6, r1
 80051a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051a6:	f000 f997 	bl	80054d8 <_malloc_r>
 80051aa:	4604      	mov	r4, r0
 80051ac:	b140      	cbz	r0, 80051c0 <__sfmoreglue+0x28>
 80051ae:	2100      	movs	r1, #0
 80051b0:	e9c0 1600 	strd	r1, r6, [r0]
 80051b4:	300c      	adds	r0, #12
 80051b6:	60a0      	str	r0, [r4, #8]
 80051b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051bc:	f7ff fdc2 	bl	8004d44 <memset>
 80051c0:	4620      	mov	r0, r4
 80051c2:	bd70      	pop	{r4, r5, r6, pc}

080051c4 <__sfp_lock_acquire>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__sfp_lock_acquire+0x8>)
 80051c6:	f000 b8b3 	b.w	8005330 <__retarget_lock_acquire_recursive>
 80051ca:	bf00      	nop
 80051cc:	200001f1 	.word	0x200001f1

080051d0 <__sfp_lock_release>:
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <__sfp_lock_release+0x8>)
 80051d2:	f000 b8ae 	b.w	8005332 <__retarget_lock_release_recursive>
 80051d6:	bf00      	nop
 80051d8:	200001f1 	.word	0x200001f1

080051dc <__sinit_lock_acquire>:
 80051dc:	4801      	ldr	r0, [pc, #4]	; (80051e4 <__sinit_lock_acquire+0x8>)
 80051de:	f000 b8a7 	b.w	8005330 <__retarget_lock_acquire_recursive>
 80051e2:	bf00      	nop
 80051e4:	200001f2 	.word	0x200001f2

080051e8 <__sinit_lock_release>:
 80051e8:	4801      	ldr	r0, [pc, #4]	; (80051f0 <__sinit_lock_release+0x8>)
 80051ea:	f000 b8a2 	b.w	8005332 <__retarget_lock_release_recursive>
 80051ee:	bf00      	nop
 80051f0:	200001f2 	.word	0x200001f2

080051f4 <__sinit>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	4604      	mov	r4, r0
 80051f8:	f7ff fff0 	bl	80051dc <__sinit_lock_acquire>
 80051fc:	69a3      	ldr	r3, [r4, #24]
 80051fe:	b11b      	cbz	r3, 8005208 <__sinit+0x14>
 8005200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005204:	f7ff bff0 	b.w	80051e8 <__sinit_lock_release>
 8005208:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800520c:	6523      	str	r3, [r4, #80]	; 0x50
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <__sinit+0x68>)
 8005210:	4a13      	ldr	r2, [pc, #76]	; (8005260 <__sinit+0x6c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	62a2      	str	r2, [r4, #40]	; 0x28
 8005216:	42a3      	cmp	r3, r4
 8005218:	bf04      	itt	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	61a3      	streq	r3, [r4, #24]
 800521e:	4620      	mov	r0, r4
 8005220:	f000 f820 	bl	8005264 <__sfp>
 8005224:	6060      	str	r0, [r4, #4]
 8005226:	4620      	mov	r0, r4
 8005228:	f000 f81c 	bl	8005264 <__sfp>
 800522c:	60a0      	str	r0, [r4, #8]
 800522e:	4620      	mov	r0, r4
 8005230:	f000 f818 	bl	8005264 <__sfp>
 8005234:	2200      	movs	r2, #0
 8005236:	60e0      	str	r0, [r4, #12]
 8005238:	2104      	movs	r1, #4
 800523a:	6860      	ldr	r0, [r4, #4]
 800523c:	f7ff ff82 	bl	8005144 <std>
 8005240:	68a0      	ldr	r0, [r4, #8]
 8005242:	2201      	movs	r2, #1
 8005244:	2109      	movs	r1, #9
 8005246:	f7ff ff7d 	bl	8005144 <std>
 800524a:	68e0      	ldr	r0, [r4, #12]
 800524c:	2202      	movs	r2, #2
 800524e:	2112      	movs	r1, #18
 8005250:	f7ff ff78 	bl	8005144 <std>
 8005254:	2301      	movs	r3, #1
 8005256:	61a3      	str	r3, [r4, #24]
 8005258:	e7d2      	b.n	8005200 <__sinit+0xc>
 800525a:	bf00      	nop
 800525c:	080057c0 	.word	0x080057c0
 8005260:	0800518d 	.word	0x0800518d

08005264 <__sfp>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	4607      	mov	r7, r0
 8005268:	f7ff ffac 	bl	80051c4 <__sfp_lock_acquire>
 800526c:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <__sfp+0x84>)
 800526e:	681e      	ldr	r6, [r3, #0]
 8005270:	69b3      	ldr	r3, [r6, #24]
 8005272:	b913      	cbnz	r3, 800527a <__sfp+0x16>
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff ffbd 	bl	80051f4 <__sinit>
 800527a:	3648      	adds	r6, #72	; 0x48
 800527c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005280:	3b01      	subs	r3, #1
 8005282:	d503      	bpl.n	800528c <__sfp+0x28>
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	b30b      	cbz	r3, 80052cc <__sfp+0x68>
 8005288:	6836      	ldr	r6, [r6, #0]
 800528a:	e7f7      	b.n	800527c <__sfp+0x18>
 800528c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005290:	b9d5      	cbnz	r5, 80052c8 <__sfp+0x64>
 8005292:	4b16      	ldr	r3, [pc, #88]	; (80052ec <__sfp+0x88>)
 8005294:	60e3      	str	r3, [r4, #12]
 8005296:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800529a:	6665      	str	r5, [r4, #100]	; 0x64
 800529c:	f000 f847 	bl	800532e <__retarget_lock_init_recursive>
 80052a0:	f7ff ff96 	bl	80051d0 <__sfp_lock_release>
 80052a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052ac:	6025      	str	r5, [r4, #0]
 80052ae:	61a5      	str	r5, [r4, #24]
 80052b0:	2208      	movs	r2, #8
 80052b2:	4629      	mov	r1, r5
 80052b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052b8:	f7ff fd44 	bl	8004d44 <memset>
 80052bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052c4:	4620      	mov	r0, r4
 80052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c8:	3468      	adds	r4, #104	; 0x68
 80052ca:	e7d9      	b.n	8005280 <__sfp+0x1c>
 80052cc:	2104      	movs	r1, #4
 80052ce:	4638      	mov	r0, r7
 80052d0:	f7ff ff62 	bl	8005198 <__sfmoreglue>
 80052d4:	4604      	mov	r4, r0
 80052d6:	6030      	str	r0, [r6, #0]
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1d5      	bne.n	8005288 <__sfp+0x24>
 80052dc:	f7ff ff78 	bl	80051d0 <__sfp_lock_release>
 80052e0:	230c      	movs	r3, #12
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	e7ee      	b.n	80052c4 <__sfp+0x60>
 80052e6:	bf00      	nop
 80052e8:	080057c0 	.word	0x080057c0
 80052ec:	ffff0001 	.word	0xffff0001

080052f0 <_fwalk_reent>:
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f4:	4606      	mov	r6, r0
 80052f6:	4688      	mov	r8, r1
 80052f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052fc:	2700      	movs	r7, #0
 80052fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005302:	f1b9 0901 	subs.w	r9, r9, #1
 8005306:	d505      	bpl.n	8005314 <_fwalk_reent+0x24>
 8005308:	6824      	ldr	r4, [r4, #0]
 800530a:	2c00      	cmp	r4, #0
 800530c:	d1f7      	bne.n	80052fe <_fwalk_reent+0xe>
 800530e:	4638      	mov	r0, r7
 8005310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005314:	89ab      	ldrh	r3, [r5, #12]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d907      	bls.n	800532a <_fwalk_reent+0x3a>
 800531a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800531e:	3301      	adds	r3, #1
 8005320:	d003      	beq.n	800532a <_fwalk_reent+0x3a>
 8005322:	4629      	mov	r1, r5
 8005324:	4630      	mov	r0, r6
 8005326:	47c0      	blx	r8
 8005328:	4307      	orrs	r7, r0
 800532a:	3568      	adds	r5, #104	; 0x68
 800532c:	e7e9      	b.n	8005302 <_fwalk_reent+0x12>

0800532e <__retarget_lock_init_recursive>:
 800532e:	4770      	bx	lr

08005330 <__retarget_lock_acquire_recursive>:
 8005330:	4770      	bx	lr

08005332 <__retarget_lock_release_recursive>:
 8005332:	4770      	bx	lr

08005334 <__swhatbuf_r>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	460e      	mov	r6, r1
 8005338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533c:	2900      	cmp	r1, #0
 800533e:	b096      	sub	sp, #88	; 0x58
 8005340:	4614      	mov	r4, r2
 8005342:	461d      	mov	r5, r3
 8005344:	da08      	bge.n	8005358 <__swhatbuf_r+0x24>
 8005346:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	602a      	str	r2, [r5, #0]
 800534e:	061a      	lsls	r2, r3, #24
 8005350:	d410      	bmi.n	8005374 <__swhatbuf_r+0x40>
 8005352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005356:	e00e      	b.n	8005376 <__swhatbuf_r+0x42>
 8005358:	466a      	mov	r2, sp
 800535a:	f000 f9a7 	bl	80056ac <_fstat_r>
 800535e:	2800      	cmp	r0, #0
 8005360:	dbf1      	blt.n	8005346 <__swhatbuf_r+0x12>
 8005362:	9a01      	ldr	r2, [sp, #4]
 8005364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800536c:	425a      	negs	r2, r3
 800536e:	415a      	adcs	r2, r3
 8005370:	602a      	str	r2, [r5, #0]
 8005372:	e7ee      	b.n	8005352 <__swhatbuf_r+0x1e>
 8005374:	2340      	movs	r3, #64	; 0x40
 8005376:	2000      	movs	r0, #0
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	b016      	add	sp, #88	; 0x58
 800537c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005380 <__smakebuf_r>:
 8005380:	898b      	ldrh	r3, [r1, #12]
 8005382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005384:	079d      	lsls	r5, r3, #30
 8005386:	4606      	mov	r6, r0
 8005388:	460c      	mov	r4, r1
 800538a:	d507      	bpl.n	800539c <__smakebuf_r+0x1c>
 800538c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	6123      	str	r3, [r4, #16]
 8005394:	2301      	movs	r3, #1
 8005396:	6163      	str	r3, [r4, #20]
 8005398:	b002      	add	sp, #8
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	ab01      	add	r3, sp, #4
 800539e:	466a      	mov	r2, sp
 80053a0:	f7ff ffc8 	bl	8005334 <__swhatbuf_r>
 80053a4:	9900      	ldr	r1, [sp, #0]
 80053a6:	4605      	mov	r5, r0
 80053a8:	4630      	mov	r0, r6
 80053aa:	f000 f895 	bl	80054d8 <_malloc_r>
 80053ae:	b948      	cbnz	r0, 80053c4 <__smakebuf_r+0x44>
 80053b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b4:	059a      	lsls	r2, r3, #22
 80053b6:	d4ef      	bmi.n	8005398 <__smakebuf_r+0x18>
 80053b8:	f023 0303 	bic.w	r3, r3, #3
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	e7e3      	b.n	800538c <__smakebuf_r+0xc>
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <__smakebuf_r+0x7c>)
 80053c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	6020      	str	r0, [r4, #0]
 80053cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	9b00      	ldr	r3, [sp, #0]
 80053d4:	6163      	str	r3, [r4, #20]
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	6120      	str	r0, [r4, #16]
 80053da:	b15b      	cbz	r3, 80053f4 <__smakebuf_r+0x74>
 80053dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f975 	bl	80056d0 <_isatty_r>
 80053e6:	b128      	cbz	r0, 80053f4 <__smakebuf_r+0x74>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	89a0      	ldrh	r0, [r4, #12]
 80053f6:	4305      	orrs	r5, r0
 80053f8:	81a5      	strh	r5, [r4, #12]
 80053fa:	e7cd      	b.n	8005398 <__smakebuf_r+0x18>
 80053fc:	0800518d 	.word	0x0800518d

08005400 <_free_r>:
 8005400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005402:	2900      	cmp	r1, #0
 8005404:	d044      	beq.n	8005490 <_free_r+0x90>
 8005406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540a:	9001      	str	r0, [sp, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f1a1 0404 	sub.w	r4, r1, #4
 8005412:	bfb8      	it	lt
 8005414:	18e4      	addlt	r4, r4, r3
 8005416:	f000 f97d 	bl	8005714 <__malloc_lock>
 800541a:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <_free_r+0x94>)
 800541c:	9801      	ldr	r0, [sp, #4]
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	b933      	cbnz	r3, 8005430 <_free_r+0x30>
 8005422:	6063      	str	r3, [r4, #4]
 8005424:	6014      	str	r4, [r2, #0]
 8005426:	b003      	add	sp, #12
 8005428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800542c:	f000 b978 	b.w	8005720 <__malloc_unlock>
 8005430:	42a3      	cmp	r3, r4
 8005432:	d908      	bls.n	8005446 <_free_r+0x46>
 8005434:	6825      	ldr	r5, [r4, #0]
 8005436:	1961      	adds	r1, r4, r5
 8005438:	428b      	cmp	r3, r1
 800543a:	bf01      	itttt	eq
 800543c:	6819      	ldreq	r1, [r3, #0]
 800543e:	685b      	ldreq	r3, [r3, #4]
 8005440:	1949      	addeq	r1, r1, r5
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	e7ed      	b.n	8005422 <_free_r+0x22>
 8005446:	461a      	mov	r2, r3
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	b10b      	cbz	r3, 8005450 <_free_r+0x50>
 800544c:	42a3      	cmp	r3, r4
 800544e:	d9fa      	bls.n	8005446 <_free_r+0x46>
 8005450:	6811      	ldr	r1, [r2, #0]
 8005452:	1855      	adds	r5, r2, r1
 8005454:	42a5      	cmp	r5, r4
 8005456:	d10b      	bne.n	8005470 <_free_r+0x70>
 8005458:	6824      	ldr	r4, [r4, #0]
 800545a:	4421      	add	r1, r4
 800545c:	1854      	adds	r4, r2, r1
 800545e:	42a3      	cmp	r3, r4
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	d1e0      	bne.n	8005426 <_free_r+0x26>
 8005464:	681c      	ldr	r4, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	6053      	str	r3, [r2, #4]
 800546a:	4421      	add	r1, r4
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	e7da      	b.n	8005426 <_free_r+0x26>
 8005470:	d902      	bls.n	8005478 <_free_r+0x78>
 8005472:	230c      	movs	r3, #12
 8005474:	6003      	str	r3, [r0, #0]
 8005476:	e7d6      	b.n	8005426 <_free_r+0x26>
 8005478:	6825      	ldr	r5, [r4, #0]
 800547a:	1961      	adds	r1, r4, r5
 800547c:	428b      	cmp	r3, r1
 800547e:	bf04      	itt	eq
 8005480:	6819      	ldreq	r1, [r3, #0]
 8005482:	685b      	ldreq	r3, [r3, #4]
 8005484:	6063      	str	r3, [r4, #4]
 8005486:	bf04      	itt	eq
 8005488:	1949      	addeq	r1, r1, r5
 800548a:	6021      	streq	r1, [r4, #0]
 800548c:	6054      	str	r4, [r2, #4]
 800548e:	e7ca      	b.n	8005426 <_free_r+0x26>
 8005490:	b003      	add	sp, #12
 8005492:	bd30      	pop	{r4, r5, pc}
 8005494:	200001f4 	.word	0x200001f4

08005498 <sbrk_aligned>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4e0e      	ldr	r6, [pc, #56]	; (80054d4 <sbrk_aligned+0x3c>)
 800549c:	460c      	mov	r4, r1
 800549e:	6831      	ldr	r1, [r6, #0]
 80054a0:	4605      	mov	r5, r0
 80054a2:	b911      	cbnz	r1, 80054aa <sbrk_aligned+0x12>
 80054a4:	f000 f88c 	bl	80055c0 <_sbrk_r>
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 f887 	bl	80055c0 <_sbrk_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d00a      	beq.n	80054cc <sbrk_aligned+0x34>
 80054b6:	1cc4      	adds	r4, r0, #3
 80054b8:	f024 0403 	bic.w	r4, r4, #3
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d007      	beq.n	80054d0 <sbrk_aligned+0x38>
 80054c0:	1a21      	subs	r1, r4, r0
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f87c 	bl	80055c0 <_sbrk_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d101      	bne.n	80054d0 <sbrk_aligned+0x38>
 80054cc:	f04f 34ff 	mov.w	r4, #4294967295
 80054d0:	4620      	mov	r0, r4
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	200001f8 	.word	0x200001f8

080054d8 <_malloc_r>:
 80054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054dc:	1ccd      	adds	r5, r1, #3
 80054de:	f025 0503 	bic.w	r5, r5, #3
 80054e2:	3508      	adds	r5, #8
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	bf38      	it	cc
 80054e8:	250c      	movcc	r5, #12
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	4607      	mov	r7, r0
 80054ee:	db01      	blt.n	80054f4 <_malloc_r+0x1c>
 80054f0:	42a9      	cmp	r1, r5
 80054f2:	d905      	bls.n	8005500 <_malloc_r+0x28>
 80054f4:	230c      	movs	r3, #12
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	2600      	movs	r6, #0
 80054fa:	4630      	mov	r0, r6
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	4e2e      	ldr	r6, [pc, #184]	; (80055bc <_malloc_r+0xe4>)
 8005502:	f000 f907 	bl	8005714 <__malloc_lock>
 8005506:	6833      	ldr	r3, [r6, #0]
 8005508:	461c      	mov	r4, r3
 800550a:	bb34      	cbnz	r4, 800555a <_malloc_r+0x82>
 800550c:	4629      	mov	r1, r5
 800550e:	4638      	mov	r0, r7
 8005510:	f7ff ffc2 	bl	8005498 <sbrk_aligned>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	4604      	mov	r4, r0
 8005518:	d14d      	bne.n	80055b6 <_malloc_r+0xde>
 800551a:	6834      	ldr	r4, [r6, #0]
 800551c:	4626      	mov	r6, r4
 800551e:	2e00      	cmp	r6, #0
 8005520:	d140      	bne.n	80055a4 <_malloc_r+0xcc>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	4631      	mov	r1, r6
 8005526:	4638      	mov	r0, r7
 8005528:	eb04 0803 	add.w	r8, r4, r3
 800552c:	f000 f848 	bl	80055c0 <_sbrk_r>
 8005530:	4580      	cmp	r8, r0
 8005532:	d13a      	bne.n	80055aa <_malloc_r+0xd2>
 8005534:	6821      	ldr	r1, [r4, #0]
 8005536:	3503      	adds	r5, #3
 8005538:	1a6d      	subs	r5, r5, r1
 800553a:	f025 0503 	bic.w	r5, r5, #3
 800553e:	3508      	adds	r5, #8
 8005540:	2d0c      	cmp	r5, #12
 8005542:	bf38      	it	cc
 8005544:	250c      	movcc	r5, #12
 8005546:	4629      	mov	r1, r5
 8005548:	4638      	mov	r0, r7
 800554a:	f7ff ffa5 	bl	8005498 <sbrk_aligned>
 800554e:	3001      	adds	r0, #1
 8005550:	d02b      	beq.n	80055aa <_malloc_r+0xd2>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	442b      	add	r3, r5
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	e00e      	b.n	8005578 <_malloc_r+0xa0>
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	1b52      	subs	r2, r2, r5
 800555e:	d41e      	bmi.n	800559e <_malloc_r+0xc6>
 8005560:	2a0b      	cmp	r2, #11
 8005562:	d916      	bls.n	8005592 <_malloc_r+0xba>
 8005564:	1961      	adds	r1, r4, r5
 8005566:	42a3      	cmp	r3, r4
 8005568:	6025      	str	r5, [r4, #0]
 800556a:	bf18      	it	ne
 800556c:	6059      	strne	r1, [r3, #4]
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	bf08      	it	eq
 8005572:	6031      	streq	r1, [r6, #0]
 8005574:	5162      	str	r2, [r4, r5]
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	4638      	mov	r0, r7
 800557a:	f104 060b 	add.w	r6, r4, #11
 800557e:	f000 f8cf 	bl	8005720 <__malloc_unlock>
 8005582:	f026 0607 	bic.w	r6, r6, #7
 8005586:	1d23      	adds	r3, r4, #4
 8005588:	1af2      	subs	r2, r6, r3
 800558a:	d0b6      	beq.n	80054fa <_malloc_r+0x22>
 800558c:	1b9b      	subs	r3, r3, r6
 800558e:	50a3      	str	r3, [r4, r2]
 8005590:	e7b3      	b.n	80054fa <_malloc_r+0x22>
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	42a3      	cmp	r3, r4
 8005596:	bf0c      	ite	eq
 8005598:	6032      	streq	r2, [r6, #0]
 800559a:	605a      	strne	r2, [r3, #4]
 800559c:	e7ec      	b.n	8005578 <_malloc_r+0xa0>
 800559e:	4623      	mov	r3, r4
 80055a0:	6864      	ldr	r4, [r4, #4]
 80055a2:	e7b2      	b.n	800550a <_malloc_r+0x32>
 80055a4:	4634      	mov	r4, r6
 80055a6:	6876      	ldr	r6, [r6, #4]
 80055a8:	e7b9      	b.n	800551e <_malloc_r+0x46>
 80055aa:	230c      	movs	r3, #12
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4638      	mov	r0, r7
 80055b0:	f000 f8b6 	bl	8005720 <__malloc_unlock>
 80055b4:	e7a1      	b.n	80054fa <_malloc_r+0x22>
 80055b6:	6025      	str	r5, [r4, #0]
 80055b8:	e7de      	b.n	8005578 <_malloc_r+0xa0>
 80055ba:	bf00      	nop
 80055bc:	200001f4 	.word	0x200001f4

080055c0 <_sbrk_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d06      	ldr	r5, [pc, #24]	; (80055dc <_sbrk_r+0x1c>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fb fb86 	bl	8000cdc <_sbrk>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_sbrk_r+0x1a>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_sbrk_r+0x1a>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	200001fc 	.word	0x200001fc

080055e0 <__sread>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	460c      	mov	r4, r1
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	f000 f8a0 	bl	800572c <_read_r>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	bfab      	itete	ge
 80055f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055f2:	89a3      	ldrhlt	r3, [r4, #12]
 80055f4:	181b      	addge	r3, r3, r0
 80055f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055fa:	bfac      	ite	ge
 80055fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80055fe:	81a3      	strhlt	r3, [r4, #12]
 8005600:	bd10      	pop	{r4, pc}

08005602 <__swrite>:
 8005602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005606:	461f      	mov	r7, r3
 8005608:	898b      	ldrh	r3, [r1, #12]
 800560a:	05db      	lsls	r3, r3, #23
 800560c:	4605      	mov	r5, r0
 800560e:	460c      	mov	r4, r1
 8005610:	4616      	mov	r6, r2
 8005612:	d505      	bpl.n	8005620 <__swrite+0x1e>
 8005614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005618:	2302      	movs	r3, #2
 800561a:	2200      	movs	r2, #0
 800561c:	f000 f868 	bl	80056f0 <_lseek_r>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	4628      	mov	r0, r5
 8005632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005636:	f000 b817 	b.w	8005668 <_write_r>

0800563a <__sseek>:
 800563a:	b510      	push	{r4, lr}
 800563c:	460c      	mov	r4, r1
 800563e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005642:	f000 f855 	bl	80056f0 <_lseek_r>
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	bf15      	itete	ne
 800564c:	6560      	strne	r0, [r4, #84]	; 0x54
 800564e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005656:	81a3      	strheq	r3, [r4, #12]
 8005658:	bf18      	it	ne
 800565a:	81a3      	strhne	r3, [r4, #12]
 800565c:	bd10      	pop	{r4, pc}

0800565e <__sclose>:
 800565e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005662:	f000 b813 	b.w	800568c <_close_r>
	...

08005668 <_write_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d07      	ldr	r5, [pc, #28]	; (8005688 <_write_r+0x20>)
 800566c:	4604      	mov	r4, r0
 800566e:	4608      	mov	r0, r1
 8005670:	4611      	mov	r1, r2
 8005672:	2200      	movs	r2, #0
 8005674:	602a      	str	r2, [r5, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f7fb fadf 	bl	8000c3a <_write>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_write_r+0x1e>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_write_r+0x1e>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	200001fc 	.word	0x200001fc

0800568c <_close_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d06      	ldr	r5, [pc, #24]	; (80056a8 <_close_r+0x1c>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fb faeb 	bl	8000c72 <_close>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_close_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_close_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	200001fc 	.word	0x200001fc

080056ac <_fstat_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4d07      	ldr	r5, [pc, #28]	; (80056cc <_fstat_r+0x20>)
 80056b0:	2300      	movs	r3, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	f7fb fae6 	bl	8000c8a <_fstat>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	d102      	bne.n	80056c8 <_fstat_r+0x1c>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	b103      	cbz	r3, 80056c8 <_fstat_r+0x1c>
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	bd38      	pop	{r3, r4, r5, pc}
 80056ca:	bf00      	nop
 80056cc:	200001fc 	.word	0x200001fc

080056d0 <_isatty_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d06      	ldr	r5, [pc, #24]	; (80056ec <_isatty_r+0x1c>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fb fae5 	bl	8000caa <_isatty>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_isatty_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_isatty_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	200001fc 	.word	0x200001fc

080056f0 <_lseek_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4d07      	ldr	r5, [pc, #28]	; (8005710 <_lseek_r+0x20>)
 80056f4:	4604      	mov	r4, r0
 80056f6:	4608      	mov	r0, r1
 80056f8:	4611      	mov	r1, r2
 80056fa:	2200      	movs	r2, #0
 80056fc:	602a      	str	r2, [r5, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7fb fade 	bl	8000cc0 <_lseek>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_lseek_r+0x1e>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_lseek_r+0x1e>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	200001fc 	.word	0x200001fc

08005714 <__malloc_lock>:
 8005714:	4801      	ldr	r0, [pc, #4]	; (800571c <__malloc_lock+0x8>)
 8005716:	f7ff be0b 	b.w	8005330 <__retarget_lock_acquire_recursive>
 800571a:	bf00      	nop
 800571c:	200001f0 	.word	0x200001f0

08005720 <__malloc_unlock>:
 8005720:	4801      	ldr	r0, [pc, #4]	; (8005728 <__malloc_unlock+0x8>)
 8005722:	f7ff be06 	b.w	8005332 <__retarget_lock_release_recursive>
 8005726:	bf00      	nop
 8005728:	200001f0 	.word	0x200001f0

0800572c <_read_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	; (800574c <_read_r+0x20>)
 8005730:	4604      	mov	r4, r0
 8005732:	4608      	mov	r0, r1
 8005734:	4611      	mov	r1, r2
 8005736:	2200      	movs	r2, #0
 8005738:	602a      	str	r2, [r5, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f7fb fa60 	bl	8000c00 <_read>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_read_r+0x1e>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_read_r+0x1e>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	200001fc 	.word	0x200001fc

08005750 <_init>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr

0800575c <_fini>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr
