
PongGameProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dcc  08006dcc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd4  08006dd4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000074  08006e50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08006e50  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016162  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a86  00000000  00000000  00036206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00038c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e48  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164ba  00000000  00000000  00065258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001091fe  00000000  00000000  0007b712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e90  00000000  00000000  00184960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cd0 	.word	0x08006cd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006cd0 	.word	0x08006cd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 ffa0 	bl	80014bc <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_setRST(LCD_RST_GPIO_Port, LCD_RST_Pin);
 800057c:	2108      	movs	r1, #8
 800057e:	4824      	ldr	r0, [pc, #144]	; (8000610 <main+0x9c>)
 8000580:	f000 fb0e 	bl	8000ba0 <LCD_setRST>
  LCD_setCE(LCD_CE_GPIO_Port, LCD_CE_Pin);
 8000584:	2104      	movs	r1, #4
 8000586:	4822      	ldr	r0, [pc, #136]	; (8000610 <main+0x9c>)
 8000588:	f000 fb1e 	bl	8000bc8 <LCD_setCE>
  LCD_setDC(LCD_DC_GPIO_Port, LCD_DC_Pin);
 800058c:	2102      	movs	r1, #2
 800058e:	4820      	ldr	r0, [pc, #128]	; (8000610 <main+0x9c>)
 8000590:	f000 fb2e 	bl	8000bf0 <LCD_setDC>
  LCD_setDIN(LCD_DIN_GPIO_Port, LCD_DIN_Pin);
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	481d      	ldr	r0, [pc, #116]	; (8000610 <main+0x9c>)
 800059a:	f000 fb3d 	bl	8000c18 <LCD_setDIN>
  LCD_setCLK(LCD_CLK_GPIO_Port, LCD_CLK_Pin);
 800059e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a2:	481b      	ldr	r0, [pc, #108]	; (8000610 <main+0x9c>)
 80005a4:	f000 fb4c 	bl	8000c40 <LCD_setCLK>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f840 	bl	800062c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f9b6 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f996 	bl	80008e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f964 	bl	8000880 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b8:	f000 f88a 	bl	80006d0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80005bc:	f000 f910 	bl	80007e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005c0:	4814      	ldr	r0, [pc, #80]	; (8000614 <main+0xa0>)
 80005c2:	f004 fa21 	bl	8004a08 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, joystick, 2);
 80005c6:	2202      	movs	r2, #2
 80005c8:	4913      	ldr	r1, [pc, #76]	; (8000618 <main+0xa4>)
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <main+0xa8>)
 80005cc:	f001 fb1e 	bl	8001c0c <HAL_ADC_Start_DMA>
  LCD_init();
 80005d0:	f000 fbce 	bl	8000d70 <LCD_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_drawHLine(platform_pos, PLATFORM_LVL, platform_length); // poczatkowe polozenie platformy
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <main+0xac>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <main+0xb0>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	212f      	movs	r1, #47	; 0x2f
 80005e2:	f000 fcc3 	bl	8000f6c <LCD_drawHLine>
  LCD_refreshArea(platform_pos, PLATFORM_LVL, platform_pos + platform_length, PLATFORM_LVL);
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0xac>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <main+0xac>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <main+0xb0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	441a      	add	r2, r3
 80005f8:	232f      	movs	r3, #47	; 0x2f
 80005fa:	212f      	movs	r1, #47	; 0x2f
 80005fc:	f000 fc0c 	bl	8000e18 <LCD_refreshArea>
				  PlatformMoveRight(platform_pos, platform_length);
				  platform_pos++;
				  joystick_right = 0;
			  }
		  }*/
		  printf("%d\n", JOY1);
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <main+0xa4>)
 8000602:	885b      	ldrh	r3, [r3, #2]
 8000604:	4619      	mov	r1, r3
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0xb4>)
 8000608:	f005 fbd4 	bl	8005db4 <iprintf>
 800060c:	e7f8      	b.n	8000600 <main+0x8c>
 800060e:	bf00      	nop
 8000610:	48000800 	.word	0x48000800
 8000614:	2000013c 	.word	0x2000013c
 8000618:	2000020c 	.word	0x2000020c
 800061c:	20000090 	.word	0x20000090
 8000620:	20000001 	.word	0x20000001
 8000624:	20000000 	.word	0x20000000
 8000628:	08006ce8 	.word	0x08006ce8

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	; 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	; 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fbb2 	bl	8005da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000652:	f002 fe6f 	bl	8003334 <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 fa9a 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067a:	230a      	movs	r3, #10
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067e:	2307      	movs	r3, #7
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fea6 	bl	80033e0 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800069a:	f000 fa7b 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fa6e 	bl	8003b98 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c2:	f000 fa67 	bl	8000b94 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	; 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_ADC1_Init+0x100>)
 80006f4:	4a37      	ldr	r2, [pc, #220]	; (80007d4 <MX_ADC1_Init+0x104>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <MX_ADC1_Init+0x100>)
 80006fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800070c:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MX_ADC1_Init+0x100>)
 800070e:	2201      	movs	r2, #1
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000714:	2204      	movs	r2, #4
 8000716:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_ADC1_Init+0x100>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000720:	2201      	movs	r2, #1
 8000722:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000726:	2202      	movs	r2, #2
 8000728:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <MX_ADC1_Init+0x100>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_ADC1_Init+0x100>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ADC1_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	481e      	ldr	r0, [pc, #120]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000756:	f001 f903 	bl	8001960 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000760:	f000 fa18 	bl	8000b94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_ADC1_Init+0x100>)
 8000770:	f002 f856 	bl	8002820 <HAL_ADCEx_MultiModeConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800077a:	f000 fa0b 	bl	8000b94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_ADC1_Init+0x108>)
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000782:	2306      	movs	r3, #6
 8000784:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000786:	2307      	movs	r3, #7
 8000788:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078a:	237f      	movs	r3, #127	; 0x7f
 800078c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078e:	2304      	movs	r3, #4
 8000790:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_ADC1_Init+0x100>)
 800079c:	f001 fb10 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80007a6:	f000 f9f5 	bl	8000b94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_ADC1_Init+0x10c>)
 80007ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007ae:	230c      	movs	r3, #12
 80007b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_ADC1_Init+0x100>)
 80007b8:	f001 fb02 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80007c2:	f000 f9e7 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000090 	.word	0x20000090
 80007d4:	50040000 	.word	0x50040000
 80007d8:	25b00200 	.word	0x25b00200
 80007dc:	2e300800 	.word	0x2e300800

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_TIM3_Init+0x98>)
 8000800:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_TIM3_Init+0x9c>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_TIM3_Init+0x98>)
 8000806:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800080a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_TIM3_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 332;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_TIM3_Init+0x98>)
 8000814:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8000818:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_TIM3_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_TIM3_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <MX_TIM3_Init+0x98>)
 8000828:	f004 f896 	bl	8004958 <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000832:	f000 f9af 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_TIM3_Init+0x98>)
 8000844:	f004 fa6f 	bl	8004d26 <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800084e:	f000 f9a1 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <MX_TIM3_Init+0x98>)
 8000860:	f004 fc86 	bl	8005170 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800086a:	f000 f993 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000013c 	.word	0x2000013c
 800087c:	40000400 	.word	0x40000400

08000880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_USART2_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008c4:	f004 fcfa 	bl	80052bc <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 f961 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000188 	.word	0x20000188
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_DMA_Init+0x38>)
 80008e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <MX_DMA_Init+0x38>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6493      	str	r3, [r2, #72]	; 0x48
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_DMA_Init+0x38>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	200b      	movs	r0, #11
 8000904:	f002 f917 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000908:	200b      	movs	r0, #11
 800090a:	f002 f930 	bl	8002b6e <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a35      	ldr	r2, [pc, #212]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <MX_GPIO_Init+0xf0>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_GPIO_Init+0xf0>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_GPIO_Init+0xf0>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 8000992:	2200      	movs	r2, #0
 8000994:	f640 410e 	movw	r1, #3086	; 0xc0e
 8000998:	481d      	ldr	r0, [pc, #116]	; (8000a10 <MX_GPIO_Init+0xf4>)
 800099a:	f002 fca5 	bl	80032e8 <HAL_GPIO_WritePin>
                          |LCD_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f002 fc9f 	bl	80032e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_GPIO_Init+0xf4>)
 80009c2:	f002 fae7 	bl	8002f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin LCD_DIN_Pin
                           LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 80009c6:	f640 430e 	movw	r3, #3086	; 0xc0e
 80009ca:	617b      	str	r3, [r7, #20]
                          |LCD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_GPIO_Init+0xf4>)
 80009e0:	f002 fad8 	bl	8002f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e4:	2320      	movs	r3, #32
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f002 fac9 	bl	8002f94 <HAL_GPIO_Init>

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000800 	.word	0x48000800

08000a14 <PlatformMoveRight>:

/* USER CODE BEGIN 4 */
static void PlatformMoveRight(int startPoint, int length){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint, PLATFORM_LVL, 0); // zgas lewy skrajny pxl
 8000a1e:	2200      	movs	r2, #0
 8000a20:	212f      	movs	r1, #47	; 0x2f
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 fa46 	bl	8000eb4 <LCD_setPixel>
	LCD_refreshArea(startPoint, PLATFORM_LVL, startPoint, PLATFORM_LVL);
 8000a28:	232f      	movs	r3, #47	; 0x2f
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	212f      	movs	r1, #47	; 0x2f
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f9f2 	bl	8000e18 <LCD_refreshArea>
	LCD_setPixel(startPoint+length+1, PLATFORM_LVL, 1); // zapal prawy skrajny pxl
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	212f      	movs	r1, #47	; 0x2f
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fa37 	bl	8000eb4 <LCD_setPixel>
	LCD_refreshArea(startPoint+length+1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	1c58      	adds	r0, r3, #1
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	232f      	movs	r3, #47	; 0x2f
 8000a58:	212f      	movs	r1, #47	; 0x2f
 8000a5a:	f000 f9dd 	bl	8000e18 <LCD_refreshArea>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <PlatformMoveLeft>:
static void PlatformMoveLeft(int startPoint, int length){
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint+length, PLATFORM_LVL, 0); // zgas prawy skrajny pxl
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	212f      	movs	r1, #47	; 0x2f
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fa1a 	bl	8000eb4 <LCD_setPixel>
	LCD_refreshArea(startPoint+length, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	18d0      	adds	r0, r2, r3
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	232f      	movs	r3, #47	; 0x2f
 8000a90:	212f      	movs	r1, #47	; 0x2f
 8000a92:	f000 f9c1 	bl	8000e18 <LCD_refreshArea>
	LCD_setPixel(startPoint-1, PLATFORM_LVL, 1); // zapal lewy skrajny pxl
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	212f      	movs	r1, #47	; 0x2f
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fa08 	bl	8000eb4 <LCD_setPixel>
	LCD_refreshArea(startPoint-1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1e58      	subs	r0, r3, #1
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	232f      	movs	r3, #47	; 0x2f
 8000ab2:	212f      	movs	r1, #47	; 0x2f
 8000ab4:	f000 f9b0 	bl	8000e18 <LCD_refreshArea>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <__io_putchar>:
int __io_putchar(int ch)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b0a      	cmp	r3, #10
 8000acc:	d109      	bne.n	8000ae2 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8000ace:	230d      	movs	r3, #13
 8000ad0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000ad2:	f107 010f 	add.w	r1, r7, #15
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	2201      	movs	r2, #1
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <__io_putchar+0x3c>)
 8000ade:	f004 fc3b 	bl	8005358 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ae2:	1d39      	adds	r1, r7, #4
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <__io_putchar+0x3c>)
 8000aec:	f004 fc34 	bl	8005358 <HAL_UART_Transmit>
	return 1;
 8000af0:	2301      	movs	r3, #1
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000188 	.word	0x20000188

08000b00 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d134      	bne.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x7a>
	  if (JOY1 > 2300 && platform_pos > 0){
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b12:	885b      	ldrh	r3, [r3, #2]
 8000b14:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d912      	bls.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00e      	beq.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x42>
		  PlatformMoveLeft(platform_pos, platform_length);
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4610      	mov	r0, r2
 8000b32:	f7ff ff98 	bl	8000a66 <PlatformMoveLeft>
		  platform_pos--;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b40:	701a      	strb	r2, [r3, #0]
	  }
  	  if (JOY1 < 1600 && platform_pos + platform_length < 84){
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b44:	885b      	ldrh	r3, [r3, #2]
 8000b46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000b4a:	d216      	bcs.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	2b53      	cmp	r3, #83	; 0x53
 8000b5a:	dc0e      	bgt.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x7a>
  		  PlatformMoveRight(platform_pos, platform_length);
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4610      	mov	r0, r2
 8000b6a:	f7ff ff53 	bl	8000a14 <PlatformMoveRight>
  		  platform_pos++;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b78:	701a      	strb	r2, [r3, #0]
  	  }
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000013c 	.word	0x2000013c
 8000b88:	2000020c 	.word	0x2000020c
 8000b8c:	20000001 	.word	0x20000001
 8000b90:	20000000 	.word	0x20000000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000bac:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <LCD_setRST+0x24>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <LCD_setRST+0x24>)
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	8093      	strh	r3, [r2, #4]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	2000040c 	.word	0x2000040c

08000bc8 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000bd4:	4a05      	ldr	r2, [pc, #20]	; (8000bec <LCD_setCE+0x24>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <LCD_setCE+0x24>)
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	8193      	strh	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	2000040c 	.word	0x2000040c

08000bf0 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8000bfc:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <LCD_setDC+0x24>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <LCD_setDC+0x24>)
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	8293      	strh	r3, [r2, #20]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	2000040c 	.word	0x2000040c

08000c18 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000c24:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <LCD_setDIN+0x24>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <LCD_setDIN+0x24>)
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	8393      	strh	r3, [r2, #28]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	2000040c 	.word	0x2000040c

08000c40 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000c4c:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <LCD_setCLK+0x24>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <LCD_setCLK+0x24>)
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	2000040c 	.word	0x2000040c

08000c68 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e026      	b.n	8000cc6 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <LCD_send+0x70>)
 8000c7a:	6998      	ldr	r0, [r3, #24]
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <LCD_send+0x70>)
 8000c7e:	8b99      	ldrh	r1, [r3, #28]
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f1c3 0307 	rsb	r3, r3, #7
 8000c88:	fa42 f303 	asr.w	r3, r2, r3
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f002 fb24 	bl	80032e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <LCD_send+0x70>)
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <LCD_send+0x70>)
 8000ca6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fb1c 	bl	80032e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <LCD_send+0x70>)
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <LCD_send+0x70>)
 8000cb6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fb14 	bl	80032e8 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2b07      	cmp	r3, #7
 8000cca:	d9d5      	bls.n	8000c78 <LCD_send+0x10>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000040c 	.word	0x2000040c

08000cdc <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d11c      	bne.n	8000d2c <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <LCD_write+0x90>)
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <LCD_write+0x90>)
 8000cf8:	8a91      	ldrh	r1, [r2, #20]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 faf3 	bl	80032e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <LCD_write+0x90>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <LCD_write+0x90>)
 8000d08:	8991      	ldrh	r1, [r2, #12]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 faeb 	bl	80032e8 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ffa7 	bl	8000c68 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <LCD_write+0x90>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <LCD_write+0x90>)
 8000d20:	8991      	ldrh	r1, [r2, #12]
 8000d22:	2201      	movs	r2, #1
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fadf 	bl	80032e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000d2a:	e01b      	b.n	8000d64 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <LCD_write+0x90>)
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LCD_write+0x90>)
 8000d32:	8a91      	ldrh	r1, [r2, #20]
 8000d34:	2201      	movs	r2, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fad6 	bl	80032e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <LCD_write+0x90>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LCD_write+0x90>)
 8000d42:	8991      	ldrh	r1, [r2, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 face 	bl	80032e8 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff8a 	bl	8000c68 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <LCD_write+0x90>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <LCD_write+0x90>)
 8000d5a:	8991      	ldrh	r1, [r2, #12]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fac2 	bl	80032e8 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000040c 	.word	0x2000040c

08000d70 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <LCD_init+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <LCD_init+0x64>)
 8000d7a:	8891      	ldrh	r1, [r2, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fab2 	bl	80032e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <LCD_init+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <LCD_init+0x64>)
 8000d8a:	8891      	ldrh	r1, [r2, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 faaa 	bl	80032e8 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000d94:	2100      	movs	r1, #0
 8000d96:	2021      	movs	r0, #33	; 0x21
 8000d98:	f7ff ffa0 	bl	8000cdc <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	20b8      	movs	r0, #184	; 0xb8
 8000da0:	f7ff ff9c 	bl	8000cdc <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000da4:	2100      	movs	r1, #0
 8000da6:	2004      	movs	r0, #4
 8000da8:	f7ff ff98 	bl	8000cdc <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000dac:	2100      	movs	r1, #0
 8000dae:	2014      	movs	r0, #20
 8000db0:	f7ff ff94 	bl	8000cdc <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000db4:	2100      	movs	r1, #0
 8000db6:	2020      	movs	r0, #32
 8000db8:	f7ff ff90 	bl	8000cdc <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	200c      	movs	r0, #12
 8000dc0:	f7ff ff8c 	bl	8000cdc <LCD_write>
  LCD_clrScr();
 8000dc4:	f000 f80a 	bl	8000ddc <LCD_clrScr>
  lcd.inverttext = false;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <LCD_init+0x68>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000040c 	.word	0x2000040c
 8000dd8:	20000210 	.word	0x20000210

08000ddc <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e00b      	b.n	8000e00 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000de8:	2101      	movs	r1, #1
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff ff76 	bl	8000cdc <LCD_write>
    lcd.buffer[i] = 0;
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <LCD_clrScr+0x38>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000e06:	dbef      	blt.n	8000de8 <LCD_clrScr+0xc>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000210 	.word	0x20000210

08000e18 <LCD_refreshArea>:
 * @param xmin: starting point on the x-axis
 * @param xmax: ending point on the x-axis
 * @param ymin: starting point on the y-axis
 * @param ymax: ending point on the y-axis
 */
void LCD_refreshArea(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax){
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	717b      	strb	r3, [r7, #5]
 8000e32:	4613      	mov	r3, r2
 8000e34:	713b      	strb	r3, [r7, #4]
  for(int i = 0; i < 6; i++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e02f      	b.n	8000e9c <LCD_refreshArea+0x84>
    if(i * 8 > ymax){
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	00da      	lsls	r2, r3, #3
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dc2e      	bgt.n	8000ea4 <LCD_refreshArea+0x8c>
      break;
    }
    //LCD_goXY(xmin, i);
    LCD_write(LCD_SETYADDR | i, LCD_COMMAND);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff41 	bl	8000cdc <LCD_write>
    LCD_write(LCD_SETXADDR | xmin, LCD_COMMAND);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff39 	bl	8000cdc <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	e00e      	b.n	8000e8e <LCD_refreshArea+0x76>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2254      	movs	r2, #84	; 0x54
 8000e74:	fb03 f202 	mul.w	r2, r3, r2
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <LCD_refreshArea+0x98>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	2101      	movs	r1, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff2a 	bl	8000cdc <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	797b      	ldrb	r3, [r7, #5]
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	ddec      	ble.n	8000e70 <LCD_refreshArea+0x58>
  for(int i = 0; i < 6; i++){
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	ddcc      	ble.n	8000e3c <LCD_refreshArea+0x24>
    }
  }
}
 8000ea2:	e000      	b.n	8000ea6 <LCD_refreshArea+0x8e>
      break;
 8000ea4:	bf00      	nop
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000210 	.word	0x20000210

08000eb4 <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	717b      	strb	r3, [r7, #5]
  if(x >= LCD_WIDTH)
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b53      	cmp	r3, #83	; 0x53
 8000eca:	d901      	bls.n	8000ed0 <LCD_setPixel+0x1c>
    x = LCD_WIDTH - 1;
 8000ecc:	2353      	movs	r3, #83	; 0x53
 8000ece:	71fb      	strb	r3, [r7, #7]
  if(y >= LCD_HEIGHT)
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed4:	d901      	bls.n	8000eda <LCD_setPixel+0x26>
    y = LCD_HEIGHT - 1;
 8000ed6:	232f      	movs	r3, #47	; 0x2f
 8000ed8:	71bb      	strb	r3, [r7, #6]
    
  if(pixel != false){
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d01d      	beq.n	8000f1c <LCD_setPixel+0x68>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	b2d8      	uxtb	r0, r3
 8000ee8:	4601      	mov	r1, r0
 8000eea:	2354      	movs	r3, #84	; 0x54
 8000eec:	fb01 f303 	mul.w	r3, r1, r3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <LCD_setPixel+0xb4>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	b25a      	sxtb	r2, r3
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b259      	sxtb	r1, r3
 8000f0a:	79fa      	ldrb	r2, [r7, #7]
 8000f0c:	2354      	movs	r3, #84	; 0x54
 8000f0e:	fb00 f303 	mul.w	r3, r0, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	b2c9      	uxtb	r1, r1
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <LCD_setPixel+0xb4>)
 8000f18:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8000f1a:	e01e      	b.n	8000f5a <LCD_setPixel+0xa6>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	b2d8      	uxtb	r0, r3
 8000f24:	4601      	mov	r1, r0
 8000f26:	2354      	movs	r3, #84	; 0x54
 8000f28:	fb01 f303 	mul.w	r3, r1, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LCD_setPixel+0xb4>)
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	4013      	ands	r3, r2
 8000f48:	b259      	sxtb	r1, r3
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	2354      	movs	r3, #84	; 0x54
 8000f4e:	fb00 f303 	mul.w	r3, r0, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b2c9      	uxtb	r1, r1
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <LCD_setPixel+0xb4>)
 8000f58:	54d1      	strb	r1, [r2, r3]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000210 	.word	0x20000210

08000f6c <LCD_drawHLine>:
 * @brief Draws a horizontal line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void LCD_drawHLine(int x, int y, int l){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  int by, bi;

  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT)){
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db3a      	blt.n	8000ff4 <LCD_drawHLine+0x88>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b53      	cmp	r3, #83	; 0x53
 8000f82:	dc37      	bgt.n	8000ff4 <LCD_drawHLine+0x88>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db34      	blt.n	8000ff4 <LCD_drawHLine+0x88>
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8000f8e:	dc31      	bgt.n	8000ff4 <LCD_drawHLine+0x88>
    for (int cx=0; cx<l; cx++){
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	e02a      	b.n	8000fec <LCD_drawHLine+0x80>
      by=((y/8)*84)+x;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da00      	bge.n	8000f9e <LCD_drawHLine+0x32>
 8000f9c:	3307      	adds	r3, #7
 8000f9e:	10db      	asrs	r3, r3, #3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2354      	movs	r3, #84	; 0x54
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      bi=y % 8;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	425a      	negs	r2, r3
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	f002 0207 	and.w	r2, r2, #7
 8000fba:	bf58      	it	pl
 8000fbc:	4253      	negpl	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
      lcd.buffer[by+cx] |= (1<<bi);
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <LCD_drawHLine+0x94>)
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b259      	sxtb	r1, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2c9      	uxtb	r1, r1
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <LCD_drawHLine+0x94>)
 8000fe4:	54d1      	strb	r1, [r2, r3]
    for (int cx=0; cx<l; cx++){
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbd0      	blt.n	8000f96 <LCD_drawHLine+0x2a>
    }
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3724      	adds	r7, #36	; 0x24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	20000210 	.word	0x20000210

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x44>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_MspInit+0x44>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6613      	str	r3, [r2, #96]	; 0x60
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_MspInit+0x44>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x44>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ac      	sub	sp, #176	; 0xb0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2288      	movs	r2, #136	; 0x88
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fe99 	bl	8005da4 <memset>
  if(hadc->Instance==ADC1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a3d      	ldr	r2, [pc, #244]	; (800116c <HAL_ADC_MspInit+0x120>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d172      	bne.n	8001162 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800107c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001080:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001082:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001092:	2308      	movs	r3, #8
 8001094:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001096:	2307      	movs	r3, #7
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800109a:	2302      	movs	r3, #2
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 ff97 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010b8:	f7ff fd6c 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <HAL_ADC_MspInit+0x124>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <HAL_ADC_MspInit+0x124>)
 80010c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_ADC_MspInit+0x124>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_ADC_MspInit+0x124>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a25      	ldr	r2, [pc, #148]	; (8001170 <HAL_ADC_MspInit+0x124>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_ADC_MspInit+0x124>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010ec:	2350      	movs	r3, #80	; 0x50
 80010ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010f2:	230b      	movs	r3, #11
 80010f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f001 ff44 	bl	8002f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0x128>)
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_ADC_MspInit+0x12c>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0x128>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0x128>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_ADC_MspInit+0x128>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_ADC_MspInit+0x128>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_ADC_MspInit+0x128>)
 800112c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001130:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0x128>)
 8001134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_ADC_MspInit+0x128>)
 800113c:	2220      	movs	r2, #32
 800113e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_ADC_MspInit+0x128>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <HAL_ADC_MspInit+0x128>)
 8001148:	f001 fd2c 	bl	8002ba4 <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001152:	f7ff fd1f 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_ADC_MspInit+0x128>)
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_ADC_MspInit+0x128>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	37b0      	adds	r7, #176	; 0xb0
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	50040000 	.word	0x50040000
 8001170:	40021000 	.word	0x40021000
 8001174:	200000f4 	.word	0x200000f4
 8001178:	40020008 	.word	0x40020008

0800117c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_TIM_Base_MspInit+0x44>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d113      	bne.n	80011b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_TIM_Base_MspInit+0x48>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <HAL_TIM_Base_MspInit+0x48>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_TIM_Base_MspInit+0x48>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	210a      	movs	r1, #10
 80011aa:	201d      	movs	r0, #29
 80011ac:	f001 fcc3 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011b0:	201d      	movs	r0, #29
 80011b2:	f001 fcdc 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40000400 	.word	0x40000400
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0ac      	sub	sp, #176	; 0xb0
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2288      	movs	r2, #136	; 0x88
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 fddb 	bl	8005da4 <memset>
  if(huart->Instance==USART2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a21      	ldr	r2, [pc, #132]	; (8001278 <HAL_UART_MspInit+0xb0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d13b      	bne.n	8001270 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4618      	mov	r0, r3
 8001206:	f002 feeb 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001210:	f7ff fcc0 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_UART_MspInit+0xb4>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_UART_MspInit+0xb4>)
 800121a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_UART_MspInit+0xb4>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_UART_MspInit+0xb4>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_UART_MspInit+0xb4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_UART_MspInit+0xb4>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001244:	230c      	movs	r3, #12
 8001246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125c:	2307      	movs	r3, #7
 800125e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f001 fe92 	bl	8002f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001270:	bf00      	nop
 8001272:	37b0      	adds	r7, #176	; 0xb0
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004400 	.word	0x40004400
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f952 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA1_Channel1_IRQHandler+0x10>)
 80012da:	f001 fd7b 	bl	8002dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000f4 	.word	0x200000f4

080012e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM3_IRQHandler+0x10>)
 80012ee:	f003 fbfb 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000013c 	.word	0x2000013c

080012fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fbb5 	bl	8000ac0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf1      	blt.n	8001348 <_write+0x12>
  }
  return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_close>:

int _close(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001396:	605a      	str	r2, [r3, #4]
  return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_isatty>:

int _isatty(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f004 fca2 	bl	8005d50 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20018000 	.word	0x20018000
 8001438:	00000400 	.word	0x00000400
 800143c:	20000434 	.word	0x20000434
 8001440:	20000450 	.word	0x20000450

08001444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f004 fc61 	bl	8005d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff f86b 	bl	8000574 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014ac:	08006ddc 	.word	0x08006ddc
  ldr r2, =_sbss
 80014b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014b4:	2000044c 	.word	0x2000044c

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_Init+0x3c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x3c>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f001 fb24 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f80f 	bl	80014fc <HAL_InitTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	e001      	b.n	80014ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ea:	f7ff fd8b 	bl	8001004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_InitTick+0x6c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_InitTick+0x70>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fb2f 	bl	8002b8a <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d809      	bhi.n	800154c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f001 faf9 	bl	8002b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e007      	b.n	800155c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e004      	b.n	800155c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e001      	b.n	800155c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000004 	.word	0x20000004
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2000000c 	.word	0x2000000c
 8001598:	20000438 	.word	0x20000438

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000438 	.word	0x20000438

080015b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3360      	adds	r3, #96	; 0x60
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <LL_ADC_SetOffset+0x44>)
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	4313      	orrs	r3, r2
 800164c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	03fff000 	.word	0x03fff000

08001664 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3360      	adds	r3, #96	; 0x60
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3360      	adds	r3, #96	; 0x60
 80016a0:	461a      	mov	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3330      	adds	r3, #48	; 0x30
 80016fc:	461a      	mov	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	4413      	add	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	211f      	movs	r1, #31
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	f003 011f 	and.w	r1, r3, #31
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	431a      	orrs	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001738:	bf00      	nop
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3314      	adds	r3, #20
 8001754:	461a      	mov	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	0e5b      	lsrs	r3, r3, #25
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	0d1b      	lsrs	r3, r3, #20
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2107      	movs	r1, #7
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0d1b      	lsrs	r3, r3, #20
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0318 	and.w	r3, r3, #24
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017c0:	40d9      	lsrs	r1, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	400b      	ands	r3, r1
 80017c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ca:	431a      	orrs	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	0007ffff 	.word	0x0007ffff

080017e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 031f 	and.w	r3, r3, #31
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6093      	str	r3, [r2, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001838:	d101      	bne.n	800183e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800185c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001860:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001888:	d101      	bne.n	800188e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <LL_ADC_IsEnabled+0x18>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <LL_ADC_IsEnabled+0x1a>
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018fe:	f043 0204 	orr.w	r2, r3, #4
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b04      	cmp	r3, #4
 8001924:	d101      	bne.n	800192a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b08      	cmp	r3, #8
 800194a:	d101      	bne.n	8001950 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e136      	b.n	8001be8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fb5f 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff3f 	bl	8001824 <LL_ADC_IsDeepPowerDownEnabled>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff25 	bl	8001800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff5a 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d115      	bne.n	80019f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff3e 	bl	800184c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <HAL_ADC_Init+0x290>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	4a87      	ldr	r2, [pc, #540]	; (8001bf4 <HAL_ADC_Init+0x294>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	3301      	adds	r3, #1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019e4:	e002      	b.n	80019ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff3c 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10d      	bne.n	8001a1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f043 0210 	orr.w	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff75 	bl	8001912 <LL_ADC_REG_IsConversionOngoing>
 8001a28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 80cf 	bne.w	8001bd6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 80cb 	bne.w	8001bd6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a48:	f043 0202 	orr.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff35 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d115      	bne.n	8001a8c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a60:	4865      	ldr	r0, [pc, #404]	; (8001bf8 <HAL_ADC_Init+0x298>)
 8001a62:	f7ff ff2f 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a66:	4604      	mov	r4, r0
 8001a68:	4864      	ldr	r0, [pc, #400]	; (8001bfc <HAL_ADC_Init+0x29c>)
 8001a6a:	f7ff ff2b 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	431c      	orrs	r4, r3
 8001a72:	4863      	ldr	r0, [pc, #396]	; (8001c00 <HAL_ADC_Init+0x2a0>)
 8001a74:	f7ff ff26 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4619      	mov	r1, r3
 8001a86:	485f      	ldr	r0, [pc, #380]	; (8001c04 <HAL_ADC_Init+0x2a4>)
 8001a88:	f7ff fd94 	bl	80015b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e5b      	ldrb	r3, [r3, #25]
 8001a90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aa2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aaa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	045b      	lsls	r3, r3, #17
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_ADC_Init+0x2a8>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff08 	bl	8001912 <LL_ADC_REG_IsConversionOngoing>
 8001b02:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff15 	bl	8001938 <LL_ADC_INJ_IsConversionOngoing>
 8001b0e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d13d      	bne.n	8001b92 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13a      	bne.n	8001b92 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b20:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b28:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b38:	f023 0302 	bic.w	r3, r3, #2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	69b9      	ldr	r1, [r7, #24]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d118      	bne.n	8001b82 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b72:	430a      	orrs	r2, r1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	e007      	b.n	8001b92 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10c      	bne.n	8001bb4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f023 010f 	bic.w	r1, r3, #15
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb2:	e007      	b.n	8001bc4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 020f 	bic.w	r2, r2, #15
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f023 0303 	bic.w	r3, r3, #3
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54
 8001bd4:	e007      	b.n	8001be6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	f043 0210 	orr.w	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3724      	adds	r7, #36	; 0x24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	053e2d63 	.word	0x053e2d63
 8001bf8:	50040000 	.word	0x50040000
 8001bfc:	50040100 	.word	0x50040100
 8001c00:	50040200 	.word	0x50040200
 8001c04:	50040300 	.word	0x50040300
 8001c08:	fff0c007 	.word	0xfff0c007

08001c0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c18:	4853      	ldr	r0, [pc, #332]	; (8001d68 <HAL_ADC_Start_DMA+0x15c>)
 8001c1a:	f7ff fde3 	bl	80017e4 <LL_ADC_GetMultimode>
 8001c1e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fe74 	bl	8001912 <LL_ADC_REG_IsConversionOngoing>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 8093 	bne.w	8001d58 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x34>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e08e      	b.n	8001d5e <HAL_ADC_Start_DMA+0x152>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a47      	ldr	r2, [pc, #284]	; (8001d6c <HAL_ADC_Start_DMA+0x160>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d008      	beq.n	8001c64 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d002      	beq.n	8001c64 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d172      	bne.n	8001d4a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fc9b 	bl	80025a0 <ADC_Enable>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d165      	bne.n	8001d40 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a38      	ldr	r2, [pc, #224]	; (8001d70 <HAL_ADC_Start_DMA+0x164>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d002      	beq.n	8001c98 <HAL_ADC_Start_DMA+0x8c>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e000      	b.n	8001c9a <HAL_ADC_Start_DMA+0x8e>
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_ADC_Start_DMA+0x168>)
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d002      	beq.n	8001ca8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f023 0206 	bic.w	r2, r3, #6
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <HAL_ADC_Start_DMA+0x16c>)
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce0:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <HAL_ADC_Start_DMA+0x170>)
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <HAL_ADC_Start_DMA+0x174>)
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	221c      	movs	r2, #28
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0210 	orr.w	r2, r2, #16
 8001d0a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3340      	adds	r3, #64	; 0x40
 8001d26:	4619      	mov	r1, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f000 fff2 	bl	8002d14 <HAL_DMA_Start_IT>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fdd6 	bl	80018ea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d3e:	e00d      	b.n	8001d5c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d48:	e008      	b.n	8001d5c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d56:	e001      	b.n	8001d5c <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	50040300 	.word	0x50040300
 8001d6c:	50040200 	.word	0x50040200
 8001d70:	50040100 	.word	0x50040100
 8001d74:	50040000 	.word	0x50040000
 8001d78:	080026ad 	.word	0x080026ad
 8001d7c:	08002785 	.word	0x08002785
 8001d80:	080027a1 	.word	0x080027a1

08001d84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0b6      	sub	sp, #216	; 0xd8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x22>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e3c7      	b.n	8002572 <HAL_ADC_ConfigChannel+0x7b2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fd8f 	bl	8001912 <LL_ADC_REG_IsConversionOngoing>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 83a8 	bne.w	800254c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d824      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	3b02      	subs	r3, #2
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d81b      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x86>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_ADC_ConfigChannel+0x54>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001e2d 	.word	0x08001e2d
 8001e1c:	08001e35 	.word	0x08001e35
 8001e20:	08001e3d 	.word	0x08001e3d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	220c      	movs	r2, #12
 8001e28:	605a      	str	r2, [r3, #4]
          break;
 8001e2a:	e011      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2212      	movs	r2, #18
 8001e30:	605a      	str	r2, [r3, #4]
          break;
 8001e32:	e00d      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2218      	movs	r2, #24
 8001e38:	605a      	str	r2, [r3, #4]
          break;
 8001e3a:	e009      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e42:	605a      	str	r2, [r3, #4]
          break;
 8001e44:	e004      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2206      	movs	r2, #6
 8001e4a:	605a      	str	r2, [r3, #4]
          break;
 8001e4c:	e000      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e4e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f7ff fc45 	bl	80016ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fd53 	bl	8001912 <LL_ADC_REG_IsConversionOngoing>
 8001e6c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fd5f 	bl	8001938 <LL_ADC_INJ_IsConversionOngoing>
 8001e7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 81a6 	bne.w	80021d4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 81a1 	bne.w	80021d4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6819      	ldr	r1, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f7ff fc50 	bl	8001744 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00a      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ed6:	f7ff fba1 	bl	800161c <LL_ADC_SetOffset>
 8001eda:	e17b      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fbbe 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10a      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x148>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fbb3 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	f003 021f 	and.w	r2, r3, #31
 8001f06:	e01e      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x186>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fba8 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e004      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x19e>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	0e9b      	lsrs	r3, r3, #26
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	e018      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x1d0>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e004      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d106      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb77 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fb5b 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fb50 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	e01e      	b.n	800200c <HAL_ADC_ConfigChannel+0x24c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fb45 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001fec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e004      	b.n	800200a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x264>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	e018      	b.n	8002056 <HAL_ADC_ConfigChannel+0x296>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002038:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800203c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e004      	b.n	8002056 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800204c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002056:	429a      	cmp	r2, r3
 8002058:	d106      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fb14 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2102      	movs	r1, #2
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff faf8 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10a      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2d4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff faed 	bl	8001664 <LL_ADC_GetOffsetChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 021f 	and.w	r2, r3, #31
 8002092:	e01e      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x312>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2102      	movs	r1, #2
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fae2 	bl	8001664 <LL_ADC_GetOffsetChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e004      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80020c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x32a>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	e016      	b.n	8002118 <HAL_ADC_ConfigChannel+0x358>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e004      	b.n	8002118 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800210e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	2102      	movs	r1, #2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fab3 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2103      	movs	r1, #3
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fa97 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x396>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2103      	movs	r1, #3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fa8c 	bl	8001664 <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	e017      	b.n	8002186 <HAL_ADC_ConfigChannel+0x3c6>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2103      	movs	r1, #3
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fa81 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800216e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002170:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800217c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <HAL_ADC_ConfigChannel+0x3de>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	e011      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x402>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e003      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d106      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	2103      	movs	r1, #3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fa5e 	bl	8001690 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fb73 	bl	80018c4 <LL_ADC_IsEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f040 813f 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f7ff fad2 	bl	800179c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a8e      	ldr	r2, [pc, #568]	; (8002438 <HAL_ADC_ConfigChannel+0x678>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	f040 8130 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_ADC_ConfigChannel+0x46c>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	3301      	adds	r3, #1
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2b09      	cmp	r3, #9
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e019      	b.n	8002260 <HAL_ADC_ConfigChannel+0x4a0>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800223a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800223e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e003      	b.n	8002250 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2b09      	cmp	r3, #9
 8002258:	bf94      	ite	ls
 800225a:	2301      	movls	r3, #1
 800225c:	2300      	movhi	r3, #0
 800225e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002260:	2b00      	cmp	r3, #0
 8002262:	d079      	beq.n	8002358 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x4c0>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	069b      	lsls	r3, r3, #26
 800227a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227e:	e015      	b.n	80022ac <HAL_ADC_ConfigChannel+0x4ec>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800228e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002290:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800229c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	069b      	lsls	r3, r3, #26
 80022a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x50c>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	e017      	b.n	80022fc <HAL_ADC_ConfigChannel+0x53c>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80022e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	ea42 0103 	orr.w	r1, r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x562>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	051b      	lsls	r3, r3, #20
 8002320:	e018      	b.n	8002354 <HAL_ADC_ConfigChannel+0x594>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e003      	b.n	8002346 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002354:	430b      	orrs	r3, r1
 8002356:	e080      	b.n	800245a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x5b4>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	069b      	lsls	r3, r3, #26
 800236e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002372:	e015      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x5e0>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800238c:	2320      	movs	r3, #32
 800238e:	e003      	b.n	8002398 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	069b      	lsls	r3, r3, #26
 800239c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x600>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	e017      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x630>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	61fb      	str	r3, [r7, #28]
  return result;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80023d8:	2320      	movs	r3, #32
 80023da:	e003      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	ea42 0103 	orr.w	r1, r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_ADC_ConfigChannel+0x65c>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	3301      	adds	r3, #1
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	3b1e      	subs	r3, #30
 8002414:	051b      	lsls	r3, r3, #20
 8002416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241a:	e01d      	b.n	8002458 <HAL_ADC_ConfigChannel+0x698>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	613b      	str	r3, [r7, #16]
  return result;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e005      	b.n	8002444 <HAL_ADC_ConfigChannel+0x684>
 8002438:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	f003 021f 	and.w	r2, r3, #31
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1e      	subs	r3, #30
 8002452:	051b      	lsls	r3, r3, #20
 8002454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002458:	430b      	orrs	r3, r1
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	6892      	ldr	r2, [r2, #8]
 800245e:	4619      	mov	r1, r3
 8002460:	f7ff f970 	bl	8001744 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_ADC_ConfigChannel+0x7bc>)
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d07a      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002470:	4843      	ldr	r0, [pc, #268]	; (8002580 <HAL_ADC_ConfigChannel+0x7c0>)
 8002472:	f7ff f8c5 	bl	8001600 <LL_ADC_GetCommonPathInternalCh>
 8002476:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a41      	ldr	r2, [pc, #260]	; (8002584 <HAL_ADC_ConfigChannel+0x7c4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d12c      	bne.n	80024de <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d126      	bne.n	80024de <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3c      	ldr	r2, [pc, #240]	; (8002588 <HAL_ADC_ConfigChannel+0x7c8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x6e4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3b      	ldr	r2, [pc, #236]	; (800258c <HAL_ADC_ConfigChannel+0x7cc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d15d      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ac:	4619      	mov	r1, r3
 80024ae:	4834      	ldr	r0, [pc, #208]	; (8002580 <HAL_ADC_ConfigChannel+0x7c0>)
 80024b0:	f7ff f893 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_ADC_ConfigChannel+0x7d0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	4a36      	ldr	r2, [pc, #216]	; (8002594 <HAL_ADC_ConfigChannel+0x7d4>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024ce:	e002      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024dc:	e040      	b.n	8002560 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <HAL_ADC_ConfigChannel+0x7d8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d118      	bne.n	800251a <HAL_ADC_ConfigChannel+0x75a>
 80024e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d112      	bne.n	800251a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_ADC_ConfigChannel+0x7c8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_ConfigChannel+0x748>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_ADC_ConfigChannel+0x7cc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d12d      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002510:	4619      	mov	r1, r3
 8002512:	481b      	ldr	r0, [pc, #108]	; (8002580 <HAL_ADC_ConfigChannel+0x7c0>)
 8002514:	f7ff f861 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002518:	e024      	b.n	8002564 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_ADC_ConfigChannel+0x7dc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d120      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <HAL_ADC_ConfigChannel+0x7c8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d115      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002542:	4619      	mov	r1, r3
 8002544:	480e      	ldr	r0, [pc, #56]	; (8002580 <HAL_ADC_ConfigChannel+0x7c0>)
 8002546:	f7ff f848 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
 800254a:	e00c      	b.n	8002566 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800255e:	e002      	b.n	8002566 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002564:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800256e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002572:	4618      	mov	r0, r3
 8002574:	37d8      	adds	r7, #216	; 0xd8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	80080000 	.word	0x80080000
 8002580:	50040300 	.word	0x50040300
 8002584:	c7520000 	.word	0xc7520000
 8002588:	50040000 	.word	0x50040000
 800258c:	50040200 	.word	0x50040200
 8002590:	20000004 	.word	0x20000004
 8002594:	053e2d63 	.word	0x053e2d63
 8002598:	cb840000 	.word	0xcb840000
 800259c:	80000001 	.word	0x80000001

080025a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff f987 	bl	80018c4 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d169      	bne.n	8002690 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4b36      	ldr	r3, [pc, #216]	; (800269c <ADC_Enable+0xfc>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f043 0210 	orr.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e055      	b.n	8002692 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f956 	bl	800189c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025f0:	482b      	ldr	r0, [pc, #172]	; (80026a0 <ADC_Enable+0x100>)
 80025f2:	f7ff f805 	bl	8001600 <LL_ADC_GetCommonPathInternalCh>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <ADC_Enable+0x104>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <ADC_Enable+0x108>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800261a:	e002      	b.n	8002622 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	3b01      	subs	r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002628:	f7fe ffb8 	bl	800159c <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800262e:	e028      	b.n	8002682 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f945 	bl	80018c4 <LL_ADC_IsEnabled>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f929 	bl	800189c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800264a:	f7fe ffa7 	bl	800159c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d914      	bls.n	8002682 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d00d      	beq.n	8002682 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e007      	b.n	8002692 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d1cf      	bne.n	8002630 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	8000003f 	.word	0x8000003f
 80026a0:	50040300 	.word	0x50040300
 80026a4:	20000004 	.word	0x20000004
 80026a8:	053e2d63 	.word	0x053e2d63

080026ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d14b      	bne.n	800275e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d021      	beq.n	8002724 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe ffee 	bl	80016c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d032      	beq.n	8002756 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d12b      	bne.n	8002756 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11f      	bne.n	8002756 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
 8002722:	e018      	b.n	8002756 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d111      	bne.n	8002756 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fb14 	bl	8001d84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800275c:	e00e      	b.n	800277c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff fb1e 	bl	8001dac <HAL_ADC_ErrorCallback>
}
 8002770:	e004      	b.n	800277c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff fb00 	bl	8001d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff faf0 	bl	8001dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <LL_ADC_IsEnabled>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <LL_ADC_IsEnabled+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <LL_ADC_IsEnabled+0x1a>
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_REG_IsConversionOngoing>:
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b04      	cmp	r3, #4
 800280c:	d101      	bne.n	8002812 <LL_ADC_REG_IsConversionOngoing+0x18>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b09f      	sub	sp, #124	; 0x7c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800283a:	2302      	movs	r3, #2
 800283c:	e093      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002846:	2300      	movs	r3, #0
 8002848:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800284a:	2300      	movs	r3, #0
 800284c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d102      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e001      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e072      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ffb9 	bl	80027fa <LL_ADC_REG_IsConversionOngoing>
 8002888:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ffb3 	bl	80027fa <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d154      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800289a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289c:	2b00      	cmp	r3, #0
 800289e:	d151      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80028a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02c      	beq.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028be:	035b      	lsls	r3, r3, #13
 80028c0:	430b      	orrs	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c8:	4829      	ldr	r0, [pc, #164]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028ca:	f7ff ff83 	bl	80027d4 <LL_ADC_IsEnabled>
 80028ce:	4604      	mov	r4, r0
 80028d0:	4828      	ldr	r0, [pc, #160]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028d2:	f7ff ff7f 	bl	80027d4 <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	431c      	orrs	r4, r3
 80028da:	4828      	ldr	r0, [pc, #160]	; (800297c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028dc:	f7ff ff7a 	bl	80027d4 <LL_ADC_IsEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4323      	orrs	r3, r4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d137      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028f0:	f023 030f 	bic.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	6811      	ldr	r1, [r2, #0]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002902:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002904:	e028      	b.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002910:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002912:	4817      	ldr	r0, [pc, #92]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002914:	f7ff ff5e 	bl	80027d4 <LL_ADC_IsEnabled>
 8002918:	4604      	mov	r4, r0
 800291a:	4816      	ldr	r0, [pc, #88]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800291c:	f7ff ff5a 	bl	80027d4 <LL_ADC_IsEnabled>
 8002920:	4603      	mov	r3, r0
 8002922:	431c      	orrs	r4, r3
 8002924:	4815      	ldr	r0, [pc, #84]	; (800297c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002926:	f7ff ff55 	bl	80027d4 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	4323      	orrs	r3, r4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d112      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800293a:	f023 030f 	bic.w	r3, r3, #15
 800293e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002940:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002942:	e009      	b.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002956:	e000      	b.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002958:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002962:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002966:	4618      	mov	r0, r3
 8002968:	377c      	adds	r7, #124	; 0x7c
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	50040000 	.word	0x50040000
 8002974:	50040100 	.word	0x50040100
 8002978:	50040300 	.word	0x50040300
 800297c:	50040200 	.word	0x50040200

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e098      	b.n	8002ce8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_DMA_Init+0x150>)
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d80f      	bhi.n	8002be2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_DMA_Init+0x154>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_DMA_Init+0x158>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a48      	ldr	r2, [pc, #288]	; (8002d00 <HAL_DMA_Init+0x15c>)
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
 8002be0:	e00e      	b.n	8002c00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <HAL_DMA_Init+0x160>)
 8002bea:	4413      	add	r3, r2
 8002bec:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_DMA_Init+0x158>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	009a      	lsls	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a42      	ldr	r2, [pc, #264]	; (8002d08 <HAL_DMA_Init+0x164>)
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c5a:	d039      	beq.n	8002cd0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <HAL_DMA_Init+0x15c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d11a      	bne.n	8002c9c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c66:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 031c 	and.w	r3, r3, #28
 8002c72:	210f      	movs	r1, #15
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4924      	ldr	r1, [pc, #144]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f003 031c 	and.w	r3, r3, #28
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	491d      	ldr	r1, [pc, #116]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
 8002c9a:	e019      	b.n	8002cd0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f003 031c 	and.w	r3, r3, #28
 8002ca8:	210f      	movs	r1, #15
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	4917      	ldr	r1, [pc, #92]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f003 031c 	and.w	r3, r3, #28
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	4911      	ldr	r1, [pc, #68]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40020407 	.word	0x40020407
 8002cf8:	bffdfff8 	.word	0xbffdfff8
 8002cfc:	cccccccd 	.word	0xcccccccd
 8002d00:	40020000 	.word	0x40020000
 8002d04:	bffdfbf8 	.word	0xbffdfbf8
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	400200a8 	.word	0x400200a8
 8002d10:	400204a8 	.word	0x400204a8

08002d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_DMA_Start_IT+0x20>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e04b      	b.n	8002dcc <HAL_DMA_Start_IT+0xb8>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d13a      	bne.n	8002dbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f8e0 	bl	8002f32 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 020e 	orr.w	r2, r2, #14
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e00f      	b.n	8002dac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0204 	bic.w	r2, r2, #4
 8002d9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 020a 	orr.w	r2, r2, #10
 8002daa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e005      	b.n	8002dca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f003 031c 	and.w	r3, r3, #28
 8002df4:	2204      	movs	r2, #4
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d026      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x7a>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d021      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f003 021c 	and.w	r2, r3, #28
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2104      	movs	r1, #4
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d071      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	e06c      	b.n	8002f28 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f003 031c 	and.w	r3, r3, #28
 8002e56:	2202      	movs	r2, #2
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02e      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xec>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d029      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10b      	bne.n	8002e92 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 020a 	bic.w	r2, r2, #10
 8002e88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f003 021c 	and.w	r2, r3, #28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d038      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ebe:	e033      	b.n	8002f28 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	f003 031c 	and.w	r3, r3, #28
 8002ec8:	2208      	movs	r2, #8
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02a      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x156>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d025      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 020e 	bic.w	r2, r2, #14
 8002eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f003 021c 	and.w	r2, r3, #28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
}
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f003 021c 	and.w	r2, r3, #28
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d108      	bne.n	8002f76 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f74:	e007      	b.n	8002f86 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	60da      	str	r2, [r3, #12]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa2:	e17f      	b.n	80032a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8171 	beq.w	800329e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d005      	beq.n	8002fd4 <HAL_GPIO_Init+0x40>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d130      	bne.n	8003036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800300a:	2201      	movs	r2, #1
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0201 	and.w	r2, r3, #1
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b03      	cmp	r3, #3
 8003040:	d118      	bne.n	8003074 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003048:	2201      	movs	r2, #1
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	08db      	lsrs	r3, r3, #3
 800305e:	f003 0201 	and.w	r2, r3, #1
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b03      	cmp	r3, #3
 800307e:	d017      	beq.n	80030b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d123      	bne.n	8003104 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3208      	adds	r2, #8
 80030c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	08da      	lsrs	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3208      	adds	r2, #8
 80030fe:	6939      	ldr	r1, [r7, #16]
 8003100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0203 	and.w	r2, r3, #3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80ac 	beq.w	800329e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_GPIO_Init+0x330>)
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	4a5e      	ldr	r2, [pc, #376]	; (80032c4 <HAL_GPIO_Init+0x330>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6613      	str	r3, [r2, #96]	; 0x60
 8003152:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_GPIO_Init+0x330>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800315e:	4a5a      	ldr	r2, [pc, #360]	; (80032c8 <HAL_GPIO_Init+0x334>)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003188:	d025      	beq.n	80031d6 <HAL_GPIO_Init+0x242>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4f      	ldr	r2, [pc, #316]	; (80032cc <HAL_GPIO_Init+0x338>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <HAL_GPIO_Init+0x23e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4e      	ldr	r2, [pc, #312]	; (80032d0 <HAL_GPIO_Init+0x33c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <HAL_GPIO_Init+0x23a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <HAL_GPIO_Init+0x340>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0x236>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <HAL_GPIO_Init+0x344>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x232>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	; (80032dc <HAL_GPIO_Init+0x348>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x22e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	; (80032e0 <HAL_GPIO_Init+0x34c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x22a>
 80031ba:	2306      	movs	r3, #6
 80031bc:	e00c      	b.n	80031d8 <HAL_GPIO_Init+0x244>
 80031be:	2307      	movs	r3, #7
 80031c0:	e00a      	b.n	80031d8 <HAL_GPIO_Init+0x244>
 80031c2:	2305      	movs	r3, #5
 80031c4:	e008      	b.n	80031d8 <HAL_GPIO_Init+0x244>
 80031c6:	2304      	movs	r3, #4
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x244>
 80031ca:	2303      	movs	r3, #3
 80031cc:	e004      	b.n	80031d8 <HAL_GPIO_Init+0x244>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e002      	b.n	80031d8 <HAL_GPIO_Init+0x244>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_GPIO_Init+0x244>
 80031d6:	2300      	movs	r3, #0
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	f002 0203 	and.w	r2, r2, #3
 80031de:	0092      	lsls	r2, r2, #2
 80031e0:	4093      	lsls	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031e8:	4937      	ldr	r1, [pc, #220]	; (80032c8 <HAL_GPIO_Init+0x334>)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	3302      	adds	r3, #2
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_GPIO_Init+0x350>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800321a:	4a32      	ldr	r2, [pc, #200]	; (80032e4 <HAL_GPIO_Init+0x350>)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_GPIO_Init+0x350>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003244:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_GPIO_Init+0x350>)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_GPIO_Init+0x350>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800326e:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <HAL_GPIO_Init+0x350>)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_GPIO_Init+0x350>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_GPIO_Init+0x350>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f47f ae78 	bne.w	8002fa4 <HAL_GPIO_Init+0x10>
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40010000 	.word	0x40010000
 80032cc:	48000400 	.word	0x48000400
 80032d0:	48000800 	.word	0x48000800
 80032d4:	48000c00 	.word	0x48000c00
 80032d8:	48001000 	.word	0x48001000
 80032dc:	48001400 	.word	0x48001400
 80032e0:	48001800 	.word	0x48001800
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
 80032f4:	4613      	mov	r3, r2
 80032f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f8:	787b      	ldrb	r3, [r7, #1]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003304:	e002      	b.n	800330c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_PWREx_GetVoltageRange+0x18>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40007000 	.word	0x40007000

08003334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003342:	d130      	bne.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800334c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003350:	d038      	beq.n	80033c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2232      	movs	r2, #50	; 0x32
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0c9b      	lsrs	r3, r3, #18
 8003374:	3301      	adds	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003378:	e002      	b.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b01      	subs	r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338c:	d102      	bne.n	8003394 <HAL_PWREx_ControlVoltageScaling+0x60>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f2      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d110      	bne.n	80033c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e00f      	b.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b2:	d007      	beq.n	80033c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033bc:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40007000 	.word	0x40007000
 80033d8:	20000004 	.word	0x20000004
 80033dc:	431bde83 	.word	0x431bde83

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e3ca      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	4b97      	ldr	r3, [pc, #604]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fc:	4b94      	ldr	r3, [pc, #592]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80e4 	beq.w	80035dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_RCC_OscConfig+0x4a>
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	f040 808b 	bne.w	8003538 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b01      	cmp	r3, #1
 8003426:	f040 8087 	bne.w	8003538 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342a:	4b89      	ldr	r3, [pc, #548]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_RCC_OscConfig+0x62>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e3a2      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	4b82      	ldr	r3, [pc, #520]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <HAL_RCC_OscConfig+0x7c>
 8003452:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345a:	e005      	b.n	8003468 <HAL_RCC_OscConfig+0x88>
 800345c:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	4293      	cmp	r3, r2
 800346a:	d223      	bcs.n	80034b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fd55 	bl	8003f20 <RCC_SetFlashLatencyFromMSIRange>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e383      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003480:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a72      	ldr	r2, [pc, #456]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b70      	ldr	r3, [pc, #448]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	496d      	ldr	r1, [pc, #436]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349e:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	4968      	ldr	r1, [pc, #416]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
 80034b2:	e025      	b.n	8003500 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034b4:	4b66      	ldr	r3, [pc, #408]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a65      	ldr	r2, [pc, #404]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b63      	ldr	r3, [pc, #396]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4960      	ldr	r1, [pc, #384]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d2:	4b5f      	ldr	r3, [pc, #380]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	495b      	ldr	r1, [pc, #364]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fd15 	bl	8003f20 <RCC_SetFlashLatencyFromMSIRange>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e343      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003500:	f000 fc4a 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b52      	ldr	r3, [pc, #328]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	4950      	ldr	r1, [pc, #320]	; (8003654 <HAL_RCC_OscConfig+0x274>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	4a4e      	ldr	r2, [pc, #312]	; (8003658 <HAL_RCC_OscConfig+0x278>)
 800351e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003520:	4b4e      	ldr	r3, [pc, #312]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd ffe9 	bl	80014fc <HAL_InitTick>
 800352a:	4603      	mov	r3, r0
 800352c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d052      	beq.n	80035da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	e327      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d032      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a42      	ldr	r2, [pc, #264]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800354c:	f7fe f826 	bl	800159c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003554:	f7fe f822 	bl	800159c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e310      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a36      	ldr	r2, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003578:	f043 0308 	orr.w	r3, r3, #8
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b34      	ldr	r3, [pc, #208]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4931      	ldr	r1, [pc, #196]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003590:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	492c      	ldr	r1, [pc, #176]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
 80035a4:	e01a      	b.n	80035dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035a6:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a29      	ldr	r2, [pc, #164]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035b2:	f7fd fff3 	bl	800159c <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ba:	f7fd ffef 	bl	800159c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e2dd      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x1da>
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d074      	beq.n	80036d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x21a>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d10e      	bne.n	8003612 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d10b      	bne.n	8003612 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d064      	beq.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d160      	bne.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e2ba      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x24a>
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e026      	b.n	8003678 <HAL_RCC_OscConfig+0x298>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003632:	d115      	bne.n	8003660 <HAL_RCC_OscConfig+0x280>
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a05      	ldr	r2, [pc, #20]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 800363a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a02      	ldr	r2, [pc, #8]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	e014      	b.n	8003678 <HAL_RCC_OscConfig+0x298>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	08006cec 	.word	0x08006cec
 8003658:	20000004 	.word	0x20000004
 800365c:	20000008 	.word	0x20000008
 8003660:	4ba0      	ldr	r3, [pc, #640]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a9f      	ldr	r2, [pc, #636]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b9d      	ldr	r3, [pc, #628]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a9c      	ldr	r2, [pc, #624]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fd ff8c 	bl	800159c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fd ff88 	bl	800159c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e276      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369a:	4b92      	ldr	r3, [pc, #584]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x2a8>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fd ff78 	bl	800159c <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fd ff74 	bl	800159c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e262      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c2:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x2d0>
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d060      	beq.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_OscConfig+0x310>
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d119      	bne.n	800371e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d116      	bne.n	800371e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f0:	4b7c      	ldr	r3, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_OscConfig+0x328>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e23f      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	4973      	ldr	r1, [pc, #460]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800371c:	e040      	b.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d023      	beq.n	800376e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003726:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6e      	ldr	r2, [pc, #440]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fd ff33 	bl	800159c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373a:	f7fd ff2f 	bl	800159c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e21d      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374c:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b62      	ldr	r3, [pc, #392]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	495f      	ldr	r1, [pc, #380]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
 800376c:	e018      	b.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376e:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a5c      	ldr	r2, [pc, #368]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fd ff0f 	bl	800159c <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003782:	f7fd ff0b 	bl	800159c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1f9      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d03c      	beq.n	8003826 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01c      	beq.n	80037ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b4:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ba:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd feea 	bl	800159c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fd fee6 	bl	800159c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1d4      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80037e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ef      	beq.n	80037cc <HAL_RCC_OscConfig+0x3ec>
 80037ec:	e01b      	b.n	8003826 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80037f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f4:	4a3b      	ldr	r2, [pc, #236]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd fecd 	bl	800159c <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fd fec9 	bl	800159c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1b7      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800381a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1ef      	bne.n	8003806 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80a6 	beq.w	8003980 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	6593      	str	r3, [r2, #88]	; 0x58
 8003850:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385c:	2301      	movs	r3, #1
 800385e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <HAL_RCC_OscConfig+0x508>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d118      	bne.n	800389e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800386c:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_RCC_OscConfig+0x508>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_RCC_OscConfig+0x508>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003878:	f7fd fe90 	bl	800159c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fd fe8c 	bl	800159c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e17a      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_RCC_OscConfig+0x508>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d108      	bne.n	80038b8 <HAL_RCC_OscConfig+0x4d8>
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b6:	e029      	b.n	800390c <HAL_RCC_OscConfig+0x52c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d115      	bne.n	80038ec <HAL_RCC_OscConfig+0x50c>
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <HAL_RCC_OscConfig+0x504>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e0:	e014      	b.n	800390c <HAL_RCC_OscConfig+0x52c>
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40007000 	.word	0x40007000
 80038ec:	4b9c      	ldr	r3, [pc, #624]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	4a9b      	ldr	r2, [pc, #620]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038fc:	4b98      	ldr	r3, [pc, #608]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a97      	ldr	r2, [pc, #604]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d016      	beq.n	8003942 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fd fe42 	bl	800159c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fd fe3e 	bl	800159c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e12a      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003932:	4b8b      	ldr	r3, [pc, #556]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ed      	beq.n	800391c <HAL_RCC_OscConfig+0x53c>
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fd fe2b 	bl	800159c <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd fe27 	bl	800159c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e113      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003960:	4b7f      	ldr	r3, [pc, #508]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ed      	bne.n	800394a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396e:	7ffb      	ldrb	r3, [r7, #31]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003974:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4a79      	ldr	r2, [pc, #484]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 800397a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80fe 	beq.w	8003b86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	2b02      	cmp	r3, #2
 8003990:	f040 80d0 	bne.w	8003b34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003994:	4b72      	ldr	r3, [pc, #456]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0203 	and.w	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d130      	bne.n	8003a0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	3b01      	subs	r3, #1
 80039b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d127      	bne.n	8003a0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d11f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039d4:	2a07      	cmp	r2, #7
 80039d6:	bf14      	ite	ne
 80039d8:	2201      	movne	r2, #1
 80039da:	2200      	moveq	r2, #0
 80039dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039de:	4293      	cmp	r3, r2
 80039e0:	d113      	bne.n	8003a0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d06e      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d069      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a10:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a1c:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0ad      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a2c:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a4b      	ldr	r2, [pc, #300]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a38:	f7fd fdb0 	bl	800159c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fdac 	bl	800159c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e09a      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a52:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5e:	4b40      	ldr	r3, [pc, #256]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <HAL_RCC_OscConfig+0x784>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	0112      	lsls	r2, r2, #4
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a78:	0212      	lsls	r2, r2, #8
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0552      	lsls	r2, r2, #21
 8003a86:	4311      	orrs	r1, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a8c:	0852      	lsrs	r2, r2, #1
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	0652      	lsls	r2, r2, #25
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a98:	0912      	lsrs	r2, r2, #4
 8003a9a:	0452      	lsls	r2, r2, #17
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	4930      	ldr	r1, [pc, #192]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003abc:	f7fd fd6e 	bl	800159c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fd6a 	bl	800159c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e058      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae2:	e050      	b.n	8003b86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e04f      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d148      	bne.n	8003b86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003af4:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b00:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b0c:	f7fd fd46 	bl	800159c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fd fd42 	bl	800159c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e030      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x734>
 8003b32:	e028      	b.n	8003b86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d023      	beq.n	8003b82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_RCC_OscConfig+0x780>)
 8003b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fd fd29 	bl	800159c <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4c:	e00c      	b.n	8003b68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fd25 	bl	800159c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d905      	bls.n	8003b68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e013      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_OscConfig+0x7b0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ec      	bne.n	8003b4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_OscConfig+0x7b0>)
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	4905      	ldr	r1, [pc, #20]	; (8003b90 <HAL_RCC_OscConfig+0x7b0>)
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_OscConfig+0x7b4>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60cb      	str	r3, [r1, #12]
 8003b80:	e001      	b.n	8003b86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	feeefffc 	.word	0xfeeefffc

08003b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0e7      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b75      	ldr	r3, [pc, #468]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d910      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b72      	ldr	r3, [pc, #456]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4970      	ldr	r1, [pc, #448]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b6e      	ldr	r3, [pc, #440]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0cf      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d010      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d908      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4960      	ldr	r1, [pc, #384]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d04c      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d121      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0a6      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c36:	4b54      	ldr	r3, [pc, #336]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d115      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e09a      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c4e:	4b4e      	ldr	r3, [pc, #312]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e08e      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e086      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4943      	ldr	r1, [pc, #268]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c80:	f7fd fc8c 	bl	800159c <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fd fc88 	bl	800159c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e06e      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d208      	bcs.n	8003cde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	492b      	ldr	r1, [pc, #172]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d210      	bcs.n	8003d0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 0207 	bic.w	r2, r3, #7
 8003cf4:	4923      	ldr	r1, [pc, #140]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e036      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4918      	ldr	r1, [pc, #96]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4910      	ldr	r1, [pc, #64]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d4c:	f000 f824 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	490b      	ldr	r1, [pc, #44]	; (8003d8c <HAL_RCC_ClockConfig+0x1f4>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <HAL_RCC_ClockConfig+0x1f8>)
 8003d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCC_ClockConfig+0x1fc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd fbc3 	bl	80014fc <HAL_InitTick>
 8003d76:	4603      	mov	r3, r0
 8003d78:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	08006cec 	.word	0x08006cec
 8003d90:	20000004 	.word	0x20000004
 8003d94:	20000008 	.word	0x20000008

08003d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da6:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db0:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x34>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d121      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d11e      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dd8:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e005      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e004      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_RCC_GetSysClockFreq+0x114>)
 8003e1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d134      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d003      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0xac>
 8003e3c:	e005      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e40:	617b      	str	r3, [r7, #20]
      break;
 8003e42:	e005      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_GetSysClockFreq+0x114>)
 8003e46:	617b      	str	r3, [r7, #20]
      break;
 8003e48:	e002      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	617b      	str	r3, [r7, #20]
      break;
 8003e4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e50:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	fb03 f202 	mul.w	r2, r3, r2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	0e5b      	lsrs	r3, r3, #25
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	3301      	adds	r3, #1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e90:	69bb      	ldr	r3, [r7, #24]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	08006d04 	.word	0x08006d04
 8003ea8:	00f42400 	.word	0x00f42400
 8003eac:	007a1200 	.word	0x007a1200

08003eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000004 	.word	0x20000004

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ecc:	f7ff fff0 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08006cfc 	.word	0x08006cfc

08003ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ef8:	f7ff ffda 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	0adb      	lsrs	r3, r3, #11
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4904      	ldr	r1, [pc, #16]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	08006cfc 	.word	0x08006cfc

08003f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f2c:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f38:	f7ff f9ee 	bl	8003318 <HAL_PWREx_GetVoltageRange>
 8003f3c:	6178      	str	r0, [r7, #20]
 8003f3e:	e014      	b.n	8003f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f58:	f7ff f9de 	bl	8003318 <HAL_PWREx_GetVoltageRange>
 8003f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d10b      	bne.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b80      	cmp	r3, #128	; 0x80
 8003f76:	d919      	bls.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f7c:	d902      	bls.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f7e:	2302      	movs	r3, #2
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e013      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f84:	2301      	movs	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e010      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b80      	cmp	r3, #128	; 0x80
 8003f8e:	d902      	bls.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f90:	2303      	movs	r3, #3
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	e00a      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d102      	bne.n	8003fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	e004      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b70      	cmp	r3, #112	; 0x70
 8003fa6:	d101      	bne.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa8:	2301      	movs	r3, #1
 8003faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f023 0207 	bic.w	r2, r3, #7
 8003fb4:	4909      	ldr	r1, [pc, #36]	; (8003fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40022000 	.word	0x40022000

08003fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fec:	2300      	movs	r3, #0
 8003fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d041      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004004:	d02a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800400a:	d824      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800400c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004010:	d008      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004016:	d81e      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800401c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004020:	d010      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004022:	e018      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004024:	4b86      	ldr	r3, [pc, #536]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a85      	ldr	r2, [pc, #532]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004030:	e015      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fabb 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004042:	e00c      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3320      	adds	r3, #32
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fba6 	bl	800479c <RCCEx_PLLSAI2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004054:	e003      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	74fb      	strb	r3, [r7, #19]
      break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800405c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004064:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004072:	4973      	ldr	r1, [pc, #460]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800407a:	e001      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d041      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004090:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004094:	d02a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004096:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800409a:	d824      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800409c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040a6:	d81e      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b0:	d010      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040b2:	e018      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040b4:	4b62      	ldr	r3, [pc, #392]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a61      	ldr	r2, [pc, #388]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040c0:	e015      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fa73 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040d2:	e00c      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3320      	adds	r3, #32
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fb5e 	bl	800479c <RCCEx_PLLSAI2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040e4:	e003      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	74fb      	strb	r3, [r7, #19]
      break;
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040f4:	4b52      	ldr	r3, [pc, #328]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004102:	494f      	ldr	r1, [pc, #316]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a0 	beq.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004138:	4b41      	ldr	r3, [pc, #260]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	4a40      	ldr	r2, [pc, #256]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	6593      	str	r3, [r2, #88]	; 0x58
 8004144:	4b3e      	ldr	r3, [pc, #248]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004150:	2301      	movs	r3, #1
 8004152:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004154:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a3a      	ldr	r2, [pc, #232]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004160:	f7fd fa1c 	bl	800159c <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004166:	e009      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004168:	f7fd fa18 	bl	800159c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	74fb      	strb	r3, [r7, #19]
        break;
 800417a:	e005      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800417c:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0ef      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004188:	7cfb      	ldrb	r3, [r7, #19]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d15c      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800418e:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004198:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01f      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d019      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ac:	4b24      	ldr	r3, [pc, #144]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a20      	ldr	r2, [pc, #128]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd f9d7 	bl	800159c <HAL_GetTick>
 80041ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f0:	e00b      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd f9d3 	bl	800159c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d902      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	74fb      	strb	r3, [r7, #19]
            break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ec      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10c      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422e:	4904      	ldr	r1, [pc, #16]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004236:	e009      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	74bb      	strb	r3, [r7, #18]
 800423c:	e006      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424c:	7c7b      	ldrb	r3, [r7, #17]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4b9e      	ldr	r3, [pc, #632]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	4a9d      	ldr	r2, [pc, #628]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800426a:	4b98      	ldr	r3, [pc, #608]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f023 0203 	bic.w	r2, r3, #3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	4994      	ldr	r1, [pc, #592]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800428c:	4b8f      	ldr	r3, [pc, #572]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 020c 	bic.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	498c      	ldr	r1, [pc, #560]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ae:	4b87      	ldr	r3, [pc, #540]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	4983      	ldr	r1, [pc, #524]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042d0:	4b7e      	ldr	r3, [pc, #504]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	497b      	ldr	r1, [pc, #492]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042f2:	4b76      	ldr	r3, [pc, #472]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	4972      	ldr	r1, [pc, #456]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004314:	4b6d      	ldr	r3, [pc, #436]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	496a      	ldr	r1, [pc, #424]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004336:	4b65      	ldr	r3, [pc, #404]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	4961      	ldr	r1, [pc, #388]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004358:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004366:	4959      	ldr	r1, [pc, #356]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	4950      	ldr	r1, [pc, #320]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800439c:	4b4b      	ldr	r3, [pc, #300]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	4948      	ldr	r1, [pc, #288]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043be:	4b43      	ldr	r3, [pc, #268]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	493f      	ldr	r1, [pc, #252]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d028      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043e0:	4b3a      	ldr	r3, [pc, #232]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ee:	4937      	ldr	r1, [pc, #220]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043fe:	d106      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004400:	4b32      	ldr	r3, [pc, #200]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a31      	ldr	r2, [pc, #196]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440a:	60d3      	str	r3, [r2, #12]
 800440c:	e011      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004416:	d10c      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	2101      	movs	r1, #1
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f8c8 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d028      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	491f      	ldr	r1, [pc, #124]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445c:	d106      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004468:	60d3      	str	r3, [r2, #12]
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f899 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02b      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044aa:	4908      	ldr	r1, [pc, #32]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ba:	d109      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a02      	ldr	r2, [pc, #8]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
 80044c8:	e014      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f867 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02f      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	4928      	ldr	r1, [pc, #160]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451e:	d10d      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	2102      	movs	r1, #2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f844 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d014      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	74bb      	strb	r3, [r7, #18]
 800453a:	e011      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004544:	d10c      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3320      	adds	r3, #32
 800454a:	2102      	movs	r1, #2
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f925 	bl	800479c <RCCEx_PLLSAI2_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457a:	490d      	ldr	r1, [pc, #52]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459e:	4904      	ldr	r1, [pc, #16]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000

080045b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045c2:	4b75      	ldr	r3, [pc, #468]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d018      	beq.n	8004600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045ce:	4b72      	ldr	r3, [pc, #456]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10d      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
       ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045e6:	4b6c      	ldr	r3, [pc, #432]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
       ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d047      	beq.n	800468a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e044      	b.n	800468a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d018      	beq.n	800463a <RCCEx_PLLSAI1_Config+0x86>
 8004608:	2b03      	cmp	r3, #3
 800460a:	d825      	bhi.n	8004658 <RCCEx_PLLSAI1_Config+0xa4>
 800460c:	2b01      	cmp	r3, #1
 800460e:	d002      	beq.n	8004616 <RCCEx_PLLSAI1_Config+0x62>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d009      	beq.n	8004628 <RCCEx_PLLSAI1_Config+0x74>
 8004614:	e020      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004616:	4b60      	ldr	r3, [pc, #384]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11d      	bne.n	800465e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004626:	e01a      	b.n	800465e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004628:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d116      	bne.n	8004662 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004638:	e013      	b.n	8004662 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800463a:	4b57      	ldr	r3, [pc, #348]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10f      	bne.n	8004666 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004646:	4b54      	ldr	r3, [pc, #336]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004656:	e006      	b.n	8004666 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e004      	b.n	8004668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004666:	bf00      	nop
    }

    if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10d      	bne.n	800468a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800466e:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	430b      	orrs	r3, r1
 8004684:	4944      	ldr	r1, [pc, #272]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d17d      	bne.n	800478c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004690:	4b41      	ldr	r3, [pc, #260]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a40      	ldr	r2, [pc, #256]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800469a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469c:	f7fc ff7e 	bl	800159c <HAL_GetTick>
 80046a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046a2:	e009      	b.n	80046b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046a4:	f7fc ff7a 	bl	800159c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d902      	bls.n	80046b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	73fb      	strb	r3, [r7, #15]
        break;
 80046b6:	e005      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b8:	4b37      	ldr	r3, [pc, #220]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ef      	bne.n	80046a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d160      	bne.n	800478c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d111      	bne.n	80046f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046d0:	4b31      	ldr	r3, [pc, #196]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6892      	ldr	r2, [r2, #8]
 80046e0:	0211      	lsls	r1, r2, #8
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	0912      	lsrs	r2, r2, #4
 80046e8:	0452      	lsls	r2, r2, #17
 80046ea:	430a      	orrs	r2, r1
 80046ec:	492a      	ldr	r1, [pc, #168]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	610b      	str	r3, [r1, #16]
 80046f2:	e027      	b.n	8004744 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d112      	bne.n	8004720 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046fa:	4b27      	ldr	r3, [pc, #156]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6892      	ldr	r2, [r2, #8]
 800470a:	0211      	lsls	r1, r2, #8
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6912      	ldr	r2, [r2, #16]
 8004710:	0852      	lsrs	r2, r2, #1
 8004712:	3a01      	subs	r2, #1
 8004714:	0552      	lsls	r2, r2, #21
 8004716:	430a      	orrs	r2, r1
 8004718:	491f      	ldr	r1, [pc, #124]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]
 800471e:	e011      	b.n	8004744 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	0211      	lsls	r1, r2, #8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6952      	ldr	r2, [r2, #20]
 8004736:	0852      	lsrs	r2, r2, #1
 8004738:	3a01      	subs	r2, #1
 800473a:	0652      	lsls	r2, r2, #25
 800473c:	430a      	orrs	r2, r1
 800473e:	4916      	ldr	r1, [pc, #88]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	4313      	orrs	r3, r2
 8004742:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800474e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fc ff24 	bl	800159c <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004756:	e009      	b.n	800476c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004758:	f7fc ff20 	bl	800159c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d902      	bls.n	800476c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	73fb      	strb	r3, [r7, #15]
          break;
 800476a:	e005      	b.n	8004778 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	4904      	ldr	r1, [pc, #16]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047aa:	4b6a      	ldr	r3, [pc, #424]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047b6:	4b67      	ldr	r3, [pc, #412]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0203 	and.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d10d      	bne.n	80047e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047ce:	4b61      	ldr	r3, [pc, #388]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
       ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d047      	beq.n	8004872 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	e044      	b.n	8004872 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d018      	beq.n	8004822 <RCCEx_PLLSAI2_Config+0x86>
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d825      	bhi.n	8004840 <RCCEx_PLLSAI2_Config+0xa4>
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d002      	beq.n	80047fe <RCCEx_PLLSAI2_Config+0x62>
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d009      	beq.n	8004810 <RCCEx_PLLSAI2_Config+0x74>
 80047fc:	e020      	b.n	8004840 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047fe:	4b55      	ldr	r3, [pc, #340]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11d      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480e:	e01a      	b.n	8004846 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d116      	bne.n	800484a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004820:	e013      	b.n	800484a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004822:	4b4c      	ldr	r3, [pc, #304]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800482e:	4b49      	ldr	r3, [pc, #292]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800483e:	e006      	b.n	800484e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e004      	b.n	8004850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800484e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	430b      	orrs	r3, r1
 800486c:	4939      	ldr	r1, [pc, #228]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d167      	bne.n	8004948 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004878:	4b36      	ldr	r3, [pc, #216]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a35      	ldr	r2, [pc, #212]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fc fe8a 	bl	800159c <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800488a:	e009      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800488c:	f7fc fe86 	bl	800159c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	73fb      	strb	r3, [r7, #15]
        break;
 800489e:	e005      	b.n	80048ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048a0:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ef      	bne.n	800488c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d14a      	bne.n	8004948 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d111      	bne.n	80048dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048b8:	4b26      	ldr	r3, [pc, #152]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6892      	ldr	r2, [r2, #8]
 80048c8:	0211      	lsls	r1, r2, #8
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68d2      	ldr	r2, [r2, #12]
 80048ce:	0912      	lsrs	r2, r2, #4
 80048d0:	0452      	lsls	r2, r2, #17
 80048d2:	430a      	orrs	r2, r1
 80048d4:	491f      	ldr	r1, [pc, #124]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	614b      	str	r3, [r1, #20]
 80048da:	e011      	b.n	8004900 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6892      	ldr	r2, [r2, #8]
 80048ec:	0211      	lsls	r1, r2, #8
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6912      	ldr	r2, [r2, #16]
 80048f2:	0852      	lsrs	r2, r2, #1
 80048f4:	3a01      	subs	r2, #1
 80048f6:	0652      	lsls	r2, r2, #25
 80048f8:	430a      	orrs	r2, r1
 80048fa:	4916      	ldr	r1, [pc, #88]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a13      	ldr	r2, [pc, #76]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fc fe46 	bl	800159c <HAL_GetTick>
 8004910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004912:	e009      	b.n	8004928 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004914:	f7fc fe42 	bl	800159c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d902      	bls.n	8004928 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	73fb      	strb	r3, [r7, #15]
          break;
 8004926:	e005      	b.n	8004934 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ef      	beq.n	8004914 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	4904      	ldr	r1, [pc, #16]	; (8004954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004944:	4313      	orrs	r3, r2
 8004946:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000

08004958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e049      	b.n	80049fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc fbfc 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f000 fab6 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e04f      	b.n	8004ac0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01d      	beq.n	8004a7e <HAL_TIM_Base_Start_IT+0x76>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d018      	beq.n	8004a7e <HAL_TIM_Base_Start_IT+0x76>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_TIM_Base_Start_IT+0x76>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <HAL_TIM_Base_Start_IT+0x76>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_TIM_Base_Start_IT+0x76>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_TIM_Base_Start_IT+0x76>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d115      	bne.n	8004aaa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d015      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a96:	d011      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa8:	e008      	b.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e000      	b.n	8004abe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	00010007 	.word	0x00010007

08004ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d122      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d11b      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0202 	mvn.w	r2, #2
 8004b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f9ce 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9c0 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f9d1 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d122      	bne.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d11b      	bne.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0204 	mvn.w	r2, #4
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9a4 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f996 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f9a7 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d122      	bne.n	8004bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d11b      	bne.n	8004bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0208 	mvn.w	r2, #8
 8004bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f97a 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f96c 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f97d 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0210 	mvn.w	r2, #16
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2208      	movs	r2, #8
 8004c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f950 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f942 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f953 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0201 	mvn.w	r2, #1
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fb ff4a 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b80      	cmp	r3, #128	; 0x80
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fafe 	bl	8005294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d107      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 faf1 	bl	80052a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d10e      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b40      	cmp	r3, #64	; 0x40
 8004ce0:	d107      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f901 	bl	8004ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d10e      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d107      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0220 	mvn.w	r2, #32
 8004d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fab1 	bl	8005280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_TIM_ConfigClockSource+0x1c>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e0b6      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x18a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d03e      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0xd8>
 8004d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d84:	f200 8087 	bhi.w	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8c:	f000 8086 	beq.w	8004e9c <HAL_TIM_ConfigClockSource+0x176>
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d94:	d87f      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004d96:	2b70      	cmp	r3, #112	; 0x70
 8004d98:	d01a      	beq.n	8004dd0 <HAL_TIM_ConfigClockSource+0xaa>
 8004d9a:	2b70      	cmp	r3, #112	; 0x70
 8004d9c:	d87b      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004d9e:	2b60      	cmp	r3, #96	; 0x60
 8004da0:	d050      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0x11e>
 8004da2:	2b60      	cmp	r3, #96	; 0x60
 8004da4:	d877      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004da6:	2b50      	cmp	r3, #80	; 0x50
 8004da8:	d03c      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0xfe>
 8004daa:	2b50      	cmp	r3, #80	; 0x50
 8004dac:	d873      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d058      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x13e>
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d86f      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004db6:	2b30      	cmp	r3, #48	; 0x30
 8004db8:	d064      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x15e>
 8004dba:	2b30      	cmp	r3, #48	; 0x30
 8004dbc:	d86b      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d060      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x15e>
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d867      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d05c      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x15e>
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d05a      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x15e>
 8004dce:	e062      	b.n	8004e96 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f000 f9a6 	bl	8005130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004df2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	609a      	str	r2, [r3, #8]
      break;
 8004dfc:	e04f      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6899      	ldr	r1, [r3, #8]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f000 f98f 	bl	8005130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e20:	609a      	str	r2, [r3, #8]
      break;
 8004e22:	e03c      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	461a      	mov	r2, r3
 8004e32:	f000 f903 	bl	800503c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2150      	movs	r1, #80	; 0x50
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f95c 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004e42:	e02c      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	461a      	mov	r2, r3
 8004e52:	f000 f922 	bl	800509a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2160      	movs	r1, #96	; 0x60
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f94c 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004e62:	e01c      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f000 f8e3 	bl	800503c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f93c 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004e82:	e00c      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	f000 f933 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004e94:	e003      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d01b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d017      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00f      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a11      	ldr	r2, [pc, #68]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800

0800503c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 030a 	bic.w	r3, r3, #10
 8005078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800509a:	b480      	push	{r7}
 800509c:	b087      	sub	sp, #28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0210 	bic.w	r2, r3, #16
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	f043 0307 	orr.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	431a      	orrs	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005184:	2302      	movs	r3, #2
 8005186:	e068      	b.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2e      	ldr	r2, [pc, #184]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2d      	ldr	r2, [pc, #180]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d108      	bne.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01d      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fa:	d018      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a13      	ldr	r2, [pc, #76]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a14      	ldr	r2, [pc, #80]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40013400 	.word	0x40013400
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40014000 	.word	0x40014000

08005280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e040      	b.n	8005350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fb ff72 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2224      	movs	r2, #36	; 0x24
 80052e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f8c0 	bl	8005480 <UART_SetConfig>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e022      	b.n	8005350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb6c 	bl	80059f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fbf3 	bl	8005b34 <UART_CheckIdleState>
 800534e:	4603      	mov	r3, r0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536c:	2b20      	cmp	r3, #32
 800536e:	f040 8082 	bne.w	8005476 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_UART_Transmit+0x26>
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07a      	b.n	8005478 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_UART_Transmit+0x38>
 800538c:	2302      	movs	r3, #2
 800538e:	e073      	b.n	8005478 <HAL_UART_Transmit+0x120>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2221      	movs	r2, #33	; 0x21
 80053a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a6:	f7fc f8f9 	bl	800159c <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d108      	bne.n	80053d8 <HAL_UART_Transmit+0x80>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e003      	b.n	80053e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80053e8:	e02d      	b.n	8005446 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fbe6 	bl	8005bc6 <UART_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e039      	b.n	8005478 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	881a      	ldrh	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005416:	b292      	uxth	r2, r2
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3302      	adds	r3, #2
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e008      	b.n	8005434 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	b292      	uxth	r2, r2
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1cb      	bne.n	80053ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	2140      	movs	r1, #64	; 0x40
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fbb2 	bl	8005bc6 <UART_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e005      	b.n	8005478 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	e000      	b.n	8005478 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
  }
}
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005484:	b08a      	sub	sp, #40	; 0x28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	431a      	orrs	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4ba4      	ldr	r3, [pc, #656]	; (8005740 <UART_SetConfig+0x2c0>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a99      	ldr	r2, [pc, #612]	; (8005744 <UART_SetConfig+0x2c4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	4313      	orrs	r3, r2
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a90      	ldr	r2, [pc, #576]	; (8005748 <UART_SetConfig+0x2c8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d126      	bne.n	8005558 <UART_SetConfig+0xd8>
 800550a:	4b90      	ldr	r3, [pc, #576]	; (800574c <UART_SetConfig+0x2cc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d81b      	bhi.n	8005550 <UART_SetConfig+0xd0>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0xa0>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005531 	.word	0x08005531
 8005524:	08005541 	.word	0x08005541
 8005528:	08005539 	.word	0x08005539
 800552c:	08005549 	.word	0x08005549
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005536:	e116      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005538:	2302      	movs	r3, #2
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553e:	e112      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005546:	e10e      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554e:	e10a      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e106      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a7c      	ldr	r2, [pc, #496]	; (8005750 <UART_SetConfig+0x2d0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d138      	bne.n	80055d4 <UART_SetConfig+0x154>
 8005562:	4b7a      	ldr	r3, [pc, #488]	; (800574c <UART_SetConfig+0x2cc>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b0c      	cmp	r3, #12
 800556e:	d82d      	bhi.n	80055cc <UART_SetConfig+0x14c>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0xf8>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080055cd 	.word	0x080055cd
 8005580:	080055cd 	.word	0x080055cd
 8005584:	080055cd 	.word	0x080055cd
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080055cd 	.word	0x080055cd
 8005590:	080055cd 	.word	0x080055cd
 8005594:	080055cd 	.word	0x080055cd
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055cd 	.word	0x080055cd
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055c5 	.word	0x080055c5
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b2:	e0d8      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055b4:	2302      	movs	r3, #2
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e0d4      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055bc:	2304      	movs	r3, #4
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e0d0      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055c4:	2308      	movs	r3, #8
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e0cc      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055cc:	2310      	movs	r3, #16
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d2:	e0c8      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a5e      	ldr	r2, [pc, #376]	; (8005754 <UART_SetConfig+0x2d4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d125      	bne.n	800562a <UART_SetConfig+0x1aa>
 80055de:	4b5b      	ldr	r3, [pc, #364]	; (800574c <UART_SetConfig+0x2cc>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055e8:	2b30      	cmp	r3, #48	; 0x30
 80055ea:	d016      	beq.n	800561a <UART_SetConfig+0x19a>
 80055ec:	2b30      	cmp	r3, #48	; 0x30
 80055ee:	d818      	bhi.n	8005622 <UART_SetConfig+0x1a2>
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d00a      	beq.n	800560a <UART_SetConfig+0x18a>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d814      	bhi.n	8005622 <UART_SetConfig+0x1a2>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <UART_SetConfig+0x182>
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d008      	beq.n	8005612 <UART_SetConfig+0x192>
 8005600:	e00f      	b.n	8005622 <UART_SetConfig+0x1a2>
 8005602:	2300      	movs	r3, #0
 8005604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005608:	e0ad      	b.n	8005766 <UART_SetConfig+0x2e6>
 800560a:	2302      	movs	r3, #2
 800560c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005610:	e0a9      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005612:	2304      	movs	r3, #4
 8005614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005618:	e0a5      	b.n	8005766 <UART_SetConfig+0x2e6>
 800561a:	2308      	movs	r3, #8
 800561c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005620:	e0a1      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005622:	2310      	movs	r3, #16
 8005624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005628:	e09d      	b.n	8005766 <UART_SetConfig+0x2e6>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a4a      	ldr	r2, [pc, #296]	; (8005758 <UART_SetConfig+0x2d8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d125      	bne.n	8005680 <UART_SetConfig+0x200>
 8005634:	4b45      	ldr	r3, [pc, #276]	; (800574c <UART_SetConfig+0x2cc>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800563e:	2bc0      	cmp	r3, #192	; 0xc0
 8005640:	d016      	beq.n	8005670 <UART_SetConfig+0x1f0>
 8005642:	2bc0      	cmp	r3, #192	; 0xc0
 8005644:	d818      	bhi.n	8005678 <UART_SetConfig+0x1f8>
 8005646:	2b80      	cmp	r3, #128	; 0x80
 8005648:	d00a      	beq.n	8005660 <UART_SetConfig+0x1e0>
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d814      	bhi.n	8005678 <UART_SetConfig+0x1f8>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <UART_SetConfig+0x1d8>
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d008      	beq.n	8005668 <UART_SetConfig+0x1e8>
 8005656:	e00f      	b.n	8005678 <UART_SetConfig+0x1f8>
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565e:	e082      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e07e      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e07a      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e076      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e072      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a35      	ldr	r2, [pc, #212]	; (800575c <UART_SetConfig+0x2dc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d12a      	bne.n	80056e0 <UART_SetConfig+0x260>
 800568a:	4b30      	ldr	r3, [pc, #192]	; (800574c <UART_SetConfig+0x2cc>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005698:	d01a      	beq.n	80056d0 <UART_SetConfig+0x250>
 800569a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800569e:	d81b      	bhi.n	80056d8 <UART_SetConfig+0x258>
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d00c      	beq.n	80056c0 <UART_SetConfig+0x240>
 80056a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056aa:	d815      	bhi.n	80056d8 <UART_SetConfig+0x258>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <UART_SetConfig+0x238>
 80056b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b4:	d008      	beq.n	80056c8 <UART_SetConfig+0x248>
 80056b6:	e00f      	b.n	80056d8 <UART_SetConfig+0x258>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056be:	e052      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c6:	e04e      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ce:	e04a      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d6:	e046      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e042      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a17      	ldr	r2, [pc, #92]	; (8005744 <UART_SetConfig+0x2c4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d13a      	bne.n	8005760 <UART_SetConfig+0x2e0>
 80056ea:	4b18      	ldr	r3, [pc, #96]	; (800574c <UART_SetConfig+0x2cc>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056f8:	d01a      	beq.n	8005730 <UART_SetConfig+0x2b0>
 80056fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056fe:	d81b      	bhi.n	8005738 <UART_SetConfig+0x2b8>
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005704:	d00c      	beq.n	8005720 <UART_SetConfig+0x2a0>
 8005706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570a:	d815      	bhi.n	8005738 <UART_SetConfig+0x2b8>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <UART_SetConfig+0x298>
 8005710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005714:	d008      	beq.n	8005728 <UART_SetConfig+0x2a8>
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x2b8>
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571e:	e022      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005720:	2302      	movs	r3, #2
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005726:	e01e      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005728:	2304      	movs	r3, #4
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572e:	e01a      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005730:	2308      	movs	r3, #8
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005736:	e016      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005738:	2310      	movs	r3, #16
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573e:	e012      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005740:	efff69f3 	.word	0xefff69f3
 8005744:	40008000 	.word	0x40008000
 8005748:	40013800 	.word	0x40013800
 800574c:	40021000 	.word	0x40021000
 8005750:	40004400 	.word	0x40004400
 8005754:	40004800 	.word	0x40004800
 8005758:	40004c00 	.word	0x40004c00
 800575c:	40005000 	.word	0x40005000
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a9f      	ldr	r2, [pc, #636]	; (80059e8 <UART_SetConfig+0x568>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d17a      	bne.n	8005866 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005774:	2b08      	cmp	r3, #8
 8005776:	d824      	bhi.n	80057c2 <UART_SetConfig+0x342>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x300>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057c3 	.word	0x080057c3
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057c3 	.word	0x080057c3
 8005790:	080057b3 	.word	0x080057b3
 8005794:	080057c3 	.word	0x080057c3
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057c3 	.word	0x080057c3
 80057a0:	080057bb 	.word	0x080057bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fe fb90 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 80057a8:	61f8      	str	r0, [r7, #28]
        break;
 80057aa:	e010      	b.n	80057ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ac:	4b8f      	ldr	r3, [pc, #572]	; (80059ec <UART_SetConfig+0x56c>)
 80057ae:	61fb      	str	r3, [r7, #28]
        break;
 80057b0:	e00d      	b.n	80057ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b2:	f7fe faf1 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 80057b6:	61f8      	str	r0, [r7, #28]
        break;
 80057b8:	e009      	b.n	80057ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057be:	61fb      	str	r3, [r7, #28]
        break;
 80057c0:	e005      	b.n	80057ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80fb 	beq.w	80059cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4413      	add	r3, r2
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d305      	bcc.n	80057f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d903      	bls.n	80057fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057f8:	e0e8      	b.n	80059cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2200      	movs	r2, #0
 80057fe:	461c      	mov	r4, r3
 8005800:	4615      	mov	r5, r2
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	022b      	lsls	r3, r5, #8
 800580c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005810:	0222      	lsls	r2, r4, #8
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	6849      	ldr	r1, [r1, #4]
 8005816:	0849      	lsrs	r1, r1, #1
 8005818:	2000      	movs	r0, #0
 800581a:	4688      	mov	r8, r1
 800581c:	4681      	mov	r9, r0
 800581e:	eb12 0a08 	adds.w	sl, r2, r8
 8005822:	eb43 0b09 	adc.w	fp, r3, r9
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005834:	4650      	mov	r0, sl
 8005836:	4659      	mov	r1, fp
 8005838:	f7fa fd1a 	bl	8000270 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800584a:	d308      	bcc.n	800585e <UART_SetConfig+0x3de>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005852:	d204      	bcs.n	800585e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	e0b6      	b.n	80059cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005864:	e0b2      	b.n	80059cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586e:	d15e      	bne.n	800592e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005874:	2b08      	cmp	r3, #8
 8005876:	d828      	bhi.n	80058ca <UART_SetConfig+0x44a>
 8005878:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0x400>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058b5 	.word	0x080058b5
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058bb 	.word	0x080058bb
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058cb 	.word	0x080058cb
 800589c:	080058cb 	.word	0x080058cb
 80058a0:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7fe fb10 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 80058a8:	61f8      	str	r0, [r7, #28]
        break;
 80058aa:	e014      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fe fb22 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 80058b0:	61f8      	str	r0, [r7, #28]
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <UART_SetConfig+0x56c>)
 80058b6:	61fb      	str	r3, [r7, #28]
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fe fa6d 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 80058be:	61f8      	str	r0, [r7, #28]
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c6:	61fb      	str	r3, [r7, #28]
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d077      	beq.n	80059cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	005a      	lsls	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	441a      	add	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d916      	bls.n	8005926 <UART_SetConfig+0x4a6>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fe:	d212      	bcs.n	8005926 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f023 030f 	bic.w	r3, r3, #15
 8005908:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	b29b      	uxth	r3, r3
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	b29a      	uxth	r2, r3
 8005916:	8afb      	ldrh	r3, [r7, #22]
 8005918:	4313      	orrs	r3, r2
 800591a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	8afa      	ldrh	r2, [r7, #22]
 8005922:	60da      	str	r2, [r3, #12]
 8005924:	e052      	b.n	80059cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800592c:	e04e      	b.n	80059cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005932:	2b08      	cmp	r3, #8
 8005934:	d827      	bhi.n	8005986 <UART_SetConfig+0x506>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x4bc>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	08005987 	.word	0x08005987
 800594c:	08005977 	.word	0x08005977
 8005950:	08005987 	.word	0x08005987
 8005954:	08005987 	.word	0x08005987
 8005958:	08005987 	.word	0x08005987
 800595c:	0800597f 	.word	0x0800597f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005960:	f7fe fab2 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 8005964:	61f8      	str	r0, [r7, #28]
        break;
 8005966:	e014      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7fe fac4 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 800596c:	61f8      	str	r0, [r7, #28]
        break;
 800596e:	e010      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005970:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <UART_SetConfig+0x56c>)
 8005972:	61fb      	str	r3, [r7, #28]
        break;
 8005974:	e00d      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005976:	f7fe fa0f 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 800597a:	61f8      	str	r0, [r7, #28]
        break;
 800597c:	e009      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005982:	61fb      	str	r3, [r7, #28]
        break;
 8005984:	e005      	b.n	8005992 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005990:	bf00      	nop
    }

    if (pclk != 0U)
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d019      	beq.n	80059cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	085a      	lsrs	r2, r3, #1
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d909      	bls.n	80059c6 <UART_SetConfig+0x546>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d205      	bcs.n	80059c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60da      	str	r2, [r3, #12]
 80059c4:	e002      	b.n	80059cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	; 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e6:	bf00      	nop
 80059e8:	40008000 	.word	0x40008000
 80059ec:	00f42400 	.word	0x00f42400

080059f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aee:	d10a      	bne.n	8005b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b44:	f7fb fd2a 	bl	800159c <HAL_GetTick>
 8005b48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d10e      	bne.n	8005b76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f82d 	bl	8005bc6 <UART_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e023      	b.n	8005bbe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d10e      	bne.n	8005ba2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f817 	bl	8005bc6 <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e00d      	b.n	8005bbe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b09c      	sub	sp, #112	; 0x70
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd6:	e0a5      	b.n	8005d24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	f000 80a1 	beq.w	8005d24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be2:	f7fb fcdb 	bl	800159c <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d13e      	bne.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e6      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	663b      	str	r3, [r7, #96]	; 0x60
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e5      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e067      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d04f      	beq.n	8005d24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d147      	bne.n	8005d24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c9c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cf0:	623a      	str	r2, [r7, #32]
 8005cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	69f9      	ldr	r1, [r7, #28]
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e010      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	f43f af4a 	beq.w	8005bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3770      	adds	r7, #112	; 0x70
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <__errno>:
 8005d50:	4b01      	ldr	r3, [pc, #4]	; (8005d58 <__errno+0x8>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000010 	.word	0x20000010

08005d5c <__libc_init_array>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4d0d      	ldr	r5, [pc, #52]	; (8005d94 <__libc_init_array+0x38>)
 8005d60:	4c0d      	ldr	r4, [pc, #52]	; (8005d98 <__libc_init_array+0x3c>)
 8005d62:	1b64      	subs	r4, r4, r5
 8005d64:	10a4      	asrs	r4, r4, #2
 8005d66:	2600      	movs	r6, #0
 8005d68:	42a6      	cmp	r6, r4
 8005d6a:	d109      	bne.n	8005d80 <__libc_init_array+0x24>
 8005d6c:	4d0b      	ldr	r5, [pc, #44]	; (8005d9c <__libc_init_array+0x40>)
 8005d6e:	4c0c      	ldr	r4, [pc, #48]	; (8005da0 <__libc_init_array+0x44>)
 8005d70:	f000 ffae 	bl	8006cd0 <_init>
 8005d74:	1b64      	subs	r4, r4, r5
 8005d76:	10a4      	asrs	r4, r4, #2
 8005d78:	2600      	movs	r6, #0
 8005d7a:	42a6      	cmp	r6, r4
 8005d7c:	d105      	bne.n	8005d8a <__libc_init_array+0x2e>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d84:	4798      	blx	r3
 8005d86:	3601      	adds	r6, #1
 8005d88:	e7ee      	b.n	8005d68 <__libc_init_array+0xc>
 8005d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8e:	4798      	blx	r3
 8005d90:	3601      	adds	r6, #1
 8005d92:	e7f2      	b.n	8005d7a <__libc_init_array+0x1e>
 8005d94:	08006dd4 	.word	0x08006dd4
 8005d98:	08006dd4 	.word	0x08006dd4
 8005d9c:	08006dd4 	.word	0x08006dd4
 8005da0:	08006dd8 	.word	0x08006dd8

08005da4 <memset>:
 8005da4:	4402      	add	r2, r0
 8005da6:	4603      	mov	r3, r0
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d100      	bne.n	8005dae <memset+0xa>
 8005dac:	4770      	bx	lr
 8005dae:	f803 1b01 	strb.w	r1, [r3], #1
 8005db2:	e7f9      	b.n	8005da8 <memset+0x4>

08005db4 <iprintf>:
 8005db4:	b40f      	push	{r0, r1, r2, r3}
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <iprintf+0x2c>)
 8005db8:	b513      	push	{r0, r1, r4, lr}
 8005dba:	681c      	ldr	r4, [r3, #0]
 8005dbc:	b124      	cbz	r4, 8005dc8 <iprintf+0x14>
 8005dbe:	69a3      	ldr	r3, [r4, #24]
 8005dc0:	b913      	cbnz	r3, 8005dc8 <iprintf+0x14>
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 f866 	bl	8005e94 <__sinit>
 8005dc8:	ab05      	add	r3, sp, #20
 8005dca:	9a04      	ldr	r2, [sp, #16]
 8005dcc:	68a1      	ldr	r1, [r4, #8]
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 f9bd 	bl	8006150 <_vfiprintf_r>
 8005dd6:	b002      	add	sp, #8
 8005dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ddc:	b004      	add	sp, #16
 8005dde:	4770      	bx	lr
 8005de0:	20000010 	.word	0x20000010

08005de4 <std>:
 8005de4:	2300      	movs	r3, #0
 8005de6:	b510      	push	{r4, lr}
 8005de8:	4604      	mov	r4, r0
 8005dea:	e9c0 3300 	strd	r3, r3, [r0]
 8005dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005df2:	6083      	str	r3, [r0, #8]
 8005df4:	8181      	strh	r1, [r0, #12]
 8005df6:	6643      	str	r3, [r0, #100]	; 0x64
 8005df8:	81c2      	strh	r2, [r0, #14]
 8005dfa:	6183      	str	r3, [r0, #24]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	2208      	movs	r2, #8
 8005e00:	305c      	adds	r0, #92	; 0x5c
 8005e02:	f7ff ffcf 	bl	8005da4 <memset>
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <std+0x38>)
 8005e08:	6263      	str	r3, [r4, #36]	; 0x24
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <std+0x3c>)
 8005e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <std+0x40>)
 8005e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <std+0x44>)
 8005e14:	6224      	str	r4, [r4, #32]
 8005e16:	6323      	str	r3, [r4, #48]	; 0x30
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	bf00      	nop
 8005e1c:	080066f9 	.word	0x080066f9
 8005e20:	0800671b 	.word	0x0800671b
 8005e24:	08006753 	.word	0x08006753
 8005e28:	08006777 	.word	0x08006777

08005e2c <_cleanup_r>:
 8005e2c:	4901      	ldr	r1, [pc, #4]	; (8005e34 <_cleanup_r+0x8>)
 8005e2e:	f000 b8af 	b.w	8005f90 <_fwalk_reent>
 8005e32:	bf00      	nop
 8005e34:	08006a51 	.word	0x08006a51

08005e38 <__sfmoreglue>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	2268      	movs	r2, #104	; 0x68
 8005e3c:	1e4d      	subs	r5, r1, #1
 8005e3e:	4355      	muls	r5, r2
 8005e40:	460e      	mov	r6, r1
 8005e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e46:	f000 f8e5 	bl	8006014 <_malloc_r>
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	b140      	cbz	r0, 8005e60 <__sfmoreglue+0x28>
 8005e4e:	2100      	movs	r1, #0
 8005e50:	e9c0 1600 	strd	r1, r6, [r0]
 8005e54:	300c      	adds	r0, #12
 8005e56:	60a0      	str	r0, [r4, #8]
 8005e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e5c:	f7ff ffa2 	bl	8005da4 <memset>
 8005e60:	4620      	mov	r0, r4
 8005e62:	bd70      	pop	{r4, r5, r6, pc}

08005e64 <__sfp_lock_acquire>:
 8005e64:	4801      	ldr	r0, [pc, #4]	; (8005e6c <__sfp_lock_acquire+0x8>)
 8005e66:	f000 b8b3 	b.w	8005fd0 <__retarget_lock_acquire_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	2000043d 	.word	0x2000043d

08005e70 <__sfp_lock_release>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__sfp_lock_release+0x8>)
 8005e72:	f000 b8ae 	b.w	8005fd2 <__retarget_lock_release_recursive>
 8005e76:	bf00      	nop
 8005e78:	2000043d 	.word	0x2000043d

08005e7c <__sinit_lock_acquire>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__sinit_lock_acquire+0x8>)
 8005e7e:	f000 b8a7 	b.w	8005fd0 <__retarget_lock_acquire_recursive>
 8005e82:	bf00      	nop
 8005e84:	2000043e 	.word	0x2000043e

08005e88 <__sinit_lock_release>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__sinit_lock_release+0x8>)
 8005e8a:	f000 b8a2 	b.w	8005fd2 <__retarget_lock_release_recursive>
 8005e8e:	bf00      	nop
 8005e90:	2000043e 	.word	0x2000043e

08005e94 <__sinit>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	4604      	mov	r4, r0
 8005e98:	f7ff fff0 	bl	8005e7c <__sinit_lock_acquire>
 8005e9c:	69a3      	ldr	r3, [r4, #24]
 8005e9e:	b11b      	cbz	r3, 8005ea8 <__sinit+0x14>
 8005ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea4:	f7ff bff0 	b.w	8005e88 <__sinit_lock_release>
 8005ea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005eac:	6523      	str	r3, [r4, #80]	; 0x50
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <__sinit+0x68>)
 8005eb0:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <__sinit+0x6c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	bf04      	itt	eq
 8005eba:	2301      	moveq	r3, #1
 8005ebc:	61a3      	streq	r3, [r4, #24]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 f820 	bl	8005f04 <__sfp>
 8005ec4:	6060      	str	r0, [r4, #4]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 f81c 	bl	8005f04 <__sfp>
 8005ecc:	60a0      	str	r0, [r4, #8]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f818 	bl	8005f04 <__sfp>
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60e0      	str	r0, [r4, #12]
 8005ed8:	2104      	movs	r1, #4
 8005eda:	6860      	ldr	r0, [r4, #4]
 8005edc:	f7ff ff82 	bl	8005de4 <std>
 8005ee0:	68a0      	ldr	r0, [r4, #8]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	2109      	movs	r1, #9
 8005ee6:	f7ff ff7d 	bl	8005de4 <std>
 8005eea:	68e0      	ldr	r0, [r4, #12]
 8005eec:	2202      	movs	r2, #2
 8005eee:	2112      	movs	r1, #18
 8005ef0:	f7ff ff78 	bl	8005de4 <std>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61a3      	str	r3, [r4, #24]
 8005ef8:	e7d2      	b.n	8005ea0 <__sinit+0xc>
 8005efa:	bf00      	nop
 8005efc:	08006d34 	.word	0x08006d34
 8005f00:	08005e2d 	.word	0x08005e2d

08005f04 <__sfp>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	4607      	mov	r7, r0
 8005f08:	f7ff ffac 	bl	8005e64 <__sfp_lock_acquire>
 8005f0c:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <__sfp+0x84>)
 8005f0e:	681e      	ldr	r6, [r3, #0]
 8005f10:	69b3      	ldr	r3, [r6, #24]
 8005f12:	b913      	cbnz	r3, 8005f1a <__sfp+0x16>
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7ff ffbd 	bl	8005e94 <__sinit>
 8005f1a:	3648      	adds	r6, #72	; 0x48
 8005f1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	d503      	bpl.n	8005f2c <__sfp+0x28>
 8005f24:	6833      	ldr	r3, [r6, #0]
 8005f26:	b30b      	cbz	r3, 8005f6c <__sfp+0x68>
 8005f28:	6836      	ldr	r6, [r6, #0]
 8005f2a:	e7f7      	b.n	8005f1c <__sfp+0x18>
 8005f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f30:	b9d5      	cbnz	r5, 8005f68 <__sfp+0x64>
 8005f32:	4b16      	ldr	r3, [pc, #88]	; (8005f8c <__sfp+0x88>)
 8005f34:	60e3      	str	r3, [r4, #12]
 8005f36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f3a:	6665      	str	r5, [r4, #100]	; 0x64
 8005f3c:	f000 f847 	bl	8005fce <__retarget_lock_init_recursive>
 8005f40:	f7ff ff96 	bl	8005e70 <__sfp_lock_release>
 8005f44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f4c:	6025      	str	r5, [r4, #0]
 8005f4e:	61a5      	str	r5, [r4, #24]
 8005f50:	2208      	movs	r2, #8
 8005f52:	4629      	mov	r1, r5
 8005f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f58:	f7ff ff24 	bl	8005da4 <memset>
 8005f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f64:	4620      	mov	r0, r4
 8005f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f68:	3468      	adds	r4, #104	; 0x68
 8005f6a:	e7d9      	b.n	8005f20 <__sfp+0x1c>
 8005f6c:	2104      	movs	r1, #4
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f7ff ff62 	bl	8005e38 <__sfmoreglue>
 8005f74:	4604      	mov	r4, r0
 8005f76:	6030      	str	r0, [r6, #0]
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d1d5      	bne.n	8005f28 <__sfp+0x24>
 8005f7c:	f7ff ff78 	bl	8005e70 <__sfp_lock_release>
 8005f80:	230c      	movs	r3, #12
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	e7ee      	b.n	8005f64 <__sfp+0x60>
 8005f86:	bf00      	nop
 8005f88:	08006d34 	.word	0x08006d34
 8005f8c:	ffff0001 	.word	0xffff0001

08005f90 <_fwalk_reent>:
 8005f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f94:	4606      	mov	r6, r0
 8005f96:	4688      	mov	r8, r1
 8005f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f9c:	2700      	movs	r7, #0
 8005f9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fa2:	f1b9 0901 	subs.w	r9, r9, #1
 8005fa6:	d505      	bpl.n	8005fb4 <_fwalk_reent+0x24>
 8005fa8:	6824      	ldr	r4, [r4, #0]
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	d1f7      	bne.n	8005f9e <_fwalk_reent+0xe>
 8005fae:	4638      	mov	r0, r7
 8005fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb4:	89ab      	ldrh	r3, [r5, #12]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d907      	bls.n	8005fca <_fwalk_reent+0x3a>
 8005fba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	d003      	beq.n	8005fca <_fwalk_reent+0x3a>
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	47c0      	blx	r8
 8005fc8:	4307      	orrs	r7, r0
 8005fca:	3568      	adds	r5, #104	; 0x68
 8005fcc:	e7e9      	b.n	8005fa2 <_fwalk_reent+0x12>

08005fce <__retarget_lock_init_recursive>:
 8005fce:	4770      	bx	lr

08005fd0 <__retarget_lock_acquire_recursive>:
 8005fd0:	4770      	bx	lr

08005fd2 <__retarget_lock_release_recursive>:
 8005fd2:	4770      	bx	lr

08005fd4 <sbrk_aligned>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	4e0e      	ldr	r6, [pc, #56]	; (8006010 <sbrk_aligned+0x3c>)
 8005fd8:	460c      	mov	r4, r1
 8005fda:	6831      	ldr	r1, [r6, #0]
 8005fdc:	4605      	mov	r5, r0
 8005fde:	b911      	cbnz	r1, 8005fe6 <sbrk_aligned+0x12>
 8005fe0:	f000 fb7a 	bl	80066d8 <_sbrk_r>
 8005fe4:	6030      	str	r0, [r6, #0]
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f000 fb75 	bl	80066d8 <_sbrk_r>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d00a      	beq.n	8006008 <sbrk_aligned+0x34>
 8005ff2:	1cc4      	adds	r4, r0, #3
 8005ff4:	f024 0403 	bic.w	r4, r4, #3
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d007      	beq.n	800600c <sbrk_aligned+0x38>
 8005ffc:	1a21      	subs	r1, r4, r0
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fb6a 	bl	80066d8 <_sbrk_r>
 8006004:	3001      	adds	r0, #1
 8006006:	d101      	bne.n	800600c <sbrk_aligned+0x38>
 8006008:	f04f 34ff 	mov.w	r4, #4294967295
 800600c:	4620      	mov	r0, r4
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	20000444 	.word	0x20000444

08006014 <_malloc_r>:
 8006014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006018:	1ccd      	adds	r5, r1, #3
 800601a:	f025 0503 	bic.w	r5, r5, #3
 800601e:	3508      	adds	r5, #8
 8006020:	2d0c      	cmp	r5, #12
 8006022:	bf38      	it	cc
 8006024:	250c      	movcc	r5, #12
 8006026:	2d00      	cmp	r5, #0
 8006028:	4607      	mov	r7, r0
 800602a:	db01      	blt.n	8006030 <_malloc_r+0x1c>
 800602c:	42a9      	cmp	r1, r5
 800602e:	d905      	bls.n	800603c <_malloc_r+0x28>
 8006030:	230c      	movs	r3, #12
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	2600      	movs	r6, #0
 8006036:	4630      	mov	r0, r6
 8006038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603c:	4e2e      	ldr	r6, [pc, #184]	; (80060f8 <_malloc_r+0xe4>)
 800603e:	f000 fdbb 	bl	8006bb8 <__malloc_lock>
 8006042:	6833      	ldr	r3, [r6, #0]
 8006044:	461c      	mov	r4, r3
 8006046:	bb34      	cbnz	r4, 8006096 <_malloc_r+0x82>
 8006048:	4629      	mov	r1, r5
 800604a:	4638      	mov	r0, r7
 800604c:	f7ff ffc2 	bl	8005fd4 <sbrk_aligned>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	4604      	mov	r4, r0
 8006054:	d14d      	bne.n	80060f2 <_malloc_r+0xde>
 8006056:	6834      	ldr	r4, [r6, #0]
 8006058:	4626      	mov	r6, r4
 800605a:	2e00      	cmp	r6, #0
 800605c:	d140      	bne.n	80060e0 <_malloc_r+0xcc>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4631      	mov	r1, r6
 8006062:	4638      	mov	r0, r7
 8006064:	eb04 0803 	add.w	r8, r4, r3
 8006068:	f000 fb36 	bl	80066d8 <_sbrk_r>
 800606c:	4580      	cmp	r8, r0
 800606e:	d13a      	bne.n	80060e6 <_malloc_r+0xd2>
 8006070:	6821      	ldr	r1, [r4, #0]
 8006072:	3503      	adds	r5, #3
 8006074:	1a6d      	subs	r5, r5, r1
 8006076:	f025 0503 	bic.w	r5, r5, #3
 800607a:	3508      	adds	r5, #8
 800607c:	2d0c      	cmp	r5, #12
 800607e:	bf38      	it	cc
 8006080:	250c      	movcc	r5, #12
 8006082:	4629      	mov	r1, r5
 8006084:	4638      	mov	r0, r7
 8006086:	f7ff ffa5 	bl	8005fd4 <sbrk_aligned>
 800608a:	3001      	adds	r0, #1
 800608c:	d02b      	beq.n	80060e6 <_malloc_r+0xd2>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	442b      	add	r3, r5
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	e00e      	b.n	80060b4 <_malloc_r+0xa0>
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	1b52      	subs	r2, r2, r5
 800609a:	d41e      	bmi.n	80060da <_malloc_r+0xc6>
 800609c:	2a0b      	cmp	r2, #11
 800609e:	d916      	bls.n	80060ce <_malloc_r+0xba>
 80060a0:	1961      	adds	r1, r4, r5
 80060a2:	42a3      	cmp	r3, r4
 80060a4:	6025      	str	r5, [r4, #0]
 80060a6:	bf18      	it	ne
 80060a8:	6059      	strne	r1, [r3, #4]
 80060aa:	6863      	ldr	r3, [r4, #4]
 80060ac:	bf08      	it	eq
 80060ae:	6031      	streq	r1, [r6, #0]
 80060b0:	5162      	str	r2, [r4, r5]
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	4638      	mov	r0, r7
 80060b6:	f104 060b 	add.w	r6, r4, #11
 80060ba:	f000 fd83 	bl	8006bc4 <__malloc_unlock>
 80060be:	f026 0607 	bic.w	r6, r6, #7
 80060c2:	1d23      	adds	r3, r4, #4
 80060c4:	1af2      	subs	r2, r6, r3
 80060c6:	d0b6      	beq.n	8006036 <_malloc_r+0x22>
 80060c8:	1b9b      	subs	r3, r3, r6
 80060ca:	50a3      	str	r3, [r4, r2]
 80060cc:	e7b3      	b.n	8006036 <_malloc_r+0x22>
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	bf0c      	ite	eq
 80060d4:	6032      	streq	r2, [r6, #0]
 80060d6:	605a      	strne	r2, [r3, #4]
 80060d8:	e7ec      	b.n	80060b4 <_malloc_r+0xa0>
 80060da:	4623      	mov	r3, r4
 80060dc:	6864      	ldr	r4, [r4, #4]
 80060de:	e7b2      	b.n	8006046 <_malloc_r+0x32>
 80060e0:	4634      	mov	r4, r6
 80060e2:	6876      	ldr	r6, [r6, #4]
 80060e4:	e7b9      	b.n	800605a <_malloc_r+0x46>
 80060e6:	230c      	movs	r3, #12
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	4638      	mov	r0, r7
 80060ec:	f000 fd6a 	bl	8006bc4 <__malloc_unlock>
 80060f0:	e7a1      	b.n	8006036 <_malloc_r+0x22>
 80060f2:	6025      	str	r5, [r4, #0]
 80060f4:	e7de      	b.n	80060b4 <_malloc_r+0xa0>
 80060f6:	bf00      	nop
 80060f8:	20000440 	.word	0x20000440

080060fc <__sfputc_r>:
 80060fc:	6893      	ldr	r3, [r2, #8]
 80060fe:	3b01      	subs	r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	b410      	push	{r4}
 8006104:	6093      	str	r3, [r2, #8]
 8006106:	da08      	bge.n	800611a <__sfputc_r+0x1e>
 8006108:	6994      	ldr	r4, [r2, #24]
 800610a:	42a3      	cmp	r3, r4
 800610c:	db01      	blt.n	8006112 <__sfputc_r+0x16>
 800610e:	290a      	cmp	r1, #10
 8006110:	d103      	bne.n	800611a <__sfputc_r+0x1e>
 8006112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006116:	f000 bb33 	b.w	8006780 <__swbuf_r>
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	1c58      	adds	r0, r3, #1
 800611e:	6010      	str	r0, [r2, #0]
 8006120:	7019      	strb	r1, [r3, #0]
 8006122:	4608      	mov	r0, r1
 8006124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006128:	4770      	bx	lr

0800612a <__sfputs_r>:
 800612a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	4614      	mov	r4, r2
 8006132:	18d5      	adds	r5, r2, r3
 8006134:	42ac      	cmp	r4, r5
 8006136:	d101      	bne.n	800613c <__sfputs_r+0x12>
 8006138:	2000      	movs	r0, #0
 800613a:	e007      	b.n	800614c <__sfputs_r+0x22>
 800613c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006140:	463a      	mov	r2, r7
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffda 	bl	80060fc <__sfputc_r>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d1f3      	bne.n	8006134 <__sfputs_r+0xa>
 800614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006150 <_vfiprintf_r>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	460d      	mov	r5, r1
 8006156:	b09d      	sub	sp, #116	; 0x74
 8006158:	4614      	mov	r4, r2
 800615a:	4698      	mov	r8, r3
 800615c:	4606      	mov	r6, r0
 800615e:	b118      	cbz	r0, 8006168 <_vfiprintf_r+0x18>
 8006160:	6983      	ldr	r3, [r0, #24]
 8006162:	b90b      	cbnz	r3, 8006168 <_vfiprintf_r+0x18>
 8006164:	f7ff fe96 	bl	8005e94 <__sinit>
 8006168:	4b89      	ldr	r3, [pc, #548]	; (8006390 <_vfiprintf_r+0x240>)
 800616a:	429d      	cmp	r5, r3
 800616c:	d11b      	bne.n	80061a6 <_vfiprintf_r+0x56>
 800616e:	6875      	ldr	r5, [r6, #4]
 8006170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006172:	07d9      	lsls	r1, r3, #31
 8006174:	d405      	bmi.n	8006182 <_vfiprintf_r+0x32>
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	059a      	lsls	r2, r3, #22
 800617a:	d402      	bmi.n	8006182 <_vfiprintf_r+0x32>
 800617c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800617e:	f7ff ff27 	bl	8005fd0 <__retarget_lock_acquire_recursive>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	071b      	lsls	r3, r3, #28
 8006186:	d501      	bpl.n	800618c <_vfiprintf_r+0x3c>
 8006188:	692b      	ldr	r3, [r5, #16]
 800618a:	b9eb      	cbnz	r3, 80061c8 <_vfiprintf_r+0x78>
 800618c:	4629      	mov	r1, r5
 800618e:	4630      	mov	r0, r6
 8006190:	f000 fb5a 	bl	8006848 <__swsetup_r>
 8006194:	b1c0      	cbz	r0, 80061c8 <_vfiprintf_r+0x78>
 8006196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006198:	07dc      	lsls	r4, r3, #31
 800619a:	d50e      	bpl.n	80061ba <_vfiprintf_r+0x6a>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	b01d      	add	sp, #116	; 0x74
 80061a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a6:	4b7b      	ldr	r3, [pc, #492]	; (8006394 <_vfiprintf_r+0x244>)
 80061a8:	429d      	cmp	r5, r3
 80061aa:	d101      	bne.n	80061b0 <_vfiprintf_r+0x60>
 80061ac:	68b5      	ldr	r5, [r6, #8]
 80061ae:	e7df      	b.n	8006170 <_vfiprintf_r+0x20>
 80061b0:	4b79      	ldr	r3, [pc, #484]	; (8006398 <_vfiprintf_r+0x248>)
 80061b2:	429d      	cmp	r5, r3
 80061b4:	bf08      	it	eq
 80061b6:	68f5      	ldreq	r5, [r6, #12]
 80061b8:	e7da      	b.n	8006170 <_vfiprintf_r+0x20>
 80061ba:	89ab      	ldrh	r3, [r5, #12]
 80061bc:	0598      	lsls	r0, r3, #22
 80061be:	d4ed      	bmi.n	800619c <_vfiprintf_r+0x4c>
 80061c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061c2:	f7ff ff06 	bl	8005fd2 <__retarget_lock_release_recursive>
 80061c6:	e7e9      	b.n	800619c <_vfiprintf_r+0x4c>
 80061c8:	2300      	movs	r3, #0
 80061ca:	9309      	str	r3, [sp, #36]	; 0x24
 80061cc:	2320      	movs	r3, #32
 80061ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80061d6:	2330      	movs	r3, #48	; 0x30
 80061d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800639c <_vfiprintf_r+0x24c>
 80061dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061e0:	f04f 0901 	mov.w	r9, #1
 80061e4:	4623      	mov	r3, r4
 80061e6:	469a      	mov	sl, r3
 80061e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ec:	b10a      	cbz	r2, 80061f2 <_vfiprintf_r+0xa2>
 80061ee:	2a25      	cmp	r2, #37	; 0x25
 80061f0:	d1f9      	bne.n	80061e6 <_vfiprintf_r+0x96>
 80061f2:	ebba 0b04 	subs.w	fp, sl, r4
 80061f6:	d00b      	beq.n	8006210 <_vfiprintf_r+0xc0>
 80061f8:	465b      	mov	r3, fp
 80061fa:	4622      	mov	r2, r4
 80061fc:	4629      	mov	r1, r5
 80061fe:	4630      	mov	r0, r6
 8006200:	f7ff ff93 	bl	800612a <__sfputs_r>
 8006204:	3001      	adds	r0, #1
 8006206:	f000 80aa 	beq.w	800635e <_vfiprintf_r+0x20e>
 800620a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800620c:	445a      	add	r2, fp
 800620e:	9209      	str	r2, [sp, #36]	; 0x24
 8006210:	f89a 3000 	ldrb.w	r3, [sl]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80a2 	beq.w	800635e <_vfiprintf_r+0x20e>
 800621a:	2300      	movs	r3, #0
 800621c:	f04f 32ff 	mov.w	r2, #4294967295
 8006220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006224:	f10a 0a01 	add.w	sl, sl, #1
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	9307      	str	r3, [sp, #28]
 800622c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006230:	931a      	str	r3, [sp, #104]	; 0x68
 8006232:	4654      	mov	r4, sl
 8006234:	2205      	movs	r2, #5
 8006236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623a:	4858      	ldr	r0, [pc, #352]	; (800639c <_vfiprintf_r+0x24c>)
 800623c:	f7f9 ffc8 	bl	80001d0 <memchr>
 8006240:	9a04      	ldr	r2, [sp, #16]
 8006242:	b9d8      	cbnz	r0, 800627c <_vfiprintf_r+0x12c>
 8006244:	06d1      	lsls	r1, r2, #27
 8006246:	bf44      	itt	mi
 8006248:	2320      	movmi	r3, #32
 800624a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800624e:	0713      	lsls	r3, r2, #28
 8006250:	bf44      	itt	mi
 8006252:	232b      	movmi	r3, #43	; 0x2b
 8006254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006258:	f89a 3000 	ldrb.w	r3, [sl]
 800625c:	2b2a      	cmp	r3, #42	; 0x2a
 800625e:	d015      	beq.n	800628c <_vfiprintf_r+0x13c>
 8006260:	9a07      	ldr	r2, [sp, #28]
 8006262:	4654      	mov	r4, sl
 8006264:	2000      	movs	r0, #0
 8006266:	f04f 0c0a 	mov.w	ip, #10
 800626a:	4621      	mov	r1, r4
 800626c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006270:	3b30      	subs	r3, #48	; 0x30
 8006272:	2b09      	cmp	r3, #9
 8006274:	d94e      	bls.n	8006314 <_vfiprintf_r+0x1c4>
 8006276:	b1b0      	cbz	r0, 80062a6 <_vfiprintf_r+0x156>
 8006278:	9207      	str	r2, [sp, #28]
 800627a:	e014      	b.n	80062a6 <_vfiprintf_r+0x156>
 800627c:	eba0 0308 	sub.w	r3, r0, r8
 8006280:	fa09 f303 	lsl.w	r3, r9, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	9304      	str	r3, [sp, #16]
 8006288:	46a2      	mov	sl, r4
 800628a:	e7d2      	b.n	8006232 <_vfiprintf_r+0xe2>
 800628c:	9b03      	ldr	r3, [sp, #12]
 800628e:	1d19      	adds	r1, r3, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	9103      	str	r1, [sp, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	bfbb      	ittet	lt
 8006298:	425b      	neglt	r3, r3
 800629a:	f042 0202 	orrlt.w	r2, r2, #2
 800629e:	9307      	strge	r3, [sp, #28]
 80062a0:	9307      	strlt	r3, [sp, #28]
 80062a2:	bfb8      	it	lt
 80062a4:	9204      	strlt	r2, [sp, #16]
 80062a6:	7823      	ldrb	r3, [r4, #0]
 80062a8:	2b2e      	cmp	r3, #46	; 0x2e
 80062aa:	d10c      	bne.n	80062c6 <_vfiprintf_r+0x176>
 80062ac:	7863      	ldrb	r3, [r4, #1]
 80062ae:	2b2a      	cmp	r3, #42	; 0x2a
 80062b0:	d135      	bne.n	800631e <_vfiprintf_r+0x1ce>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	1d1a      	adds	r2, r3, #4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	9203      	str	r2, [sp, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bfb8      	it	lt
 80062be:	f04f 33ff 	movlt.w	r3, #4294967295
 80062c2:	3402      	adds	r4, #2
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063ac <_vfiprintf_r+0x25c>
 80062ca:	7821      	ldrb	r1, [r4, #0]
 80062cc:	2203      	movs	r2, #3
 80062ce:	4650      	mov	r0, sl
 80062d0:	f7f9 ff7e 	bl	80001d0 <memchr>
 80062d4:	b140      	cbz	r0, 80062e8 <_vfiprintf_r+0x198>
 80062d6:	2340      	movs	r3, #64	; 0x40
 80062d8:	eba0 000a 	sub.w	r0, r0, sl
 80062dc:	fa03 f000 	lsl.w	r0, r3, r0
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	4303      	orrs	r3, r0
 80062e4:	3401      	adds	r4, #1
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ec:	482c      	ldr	r0, [pc, #176]	; (80063a0 <_vfiprintf_r+0x250>)
 80062ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062f2:	2206      	movs	r2, #6
 80062f4:	f7f9 ff6c 	bl	80001d0 <memchr>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d03f      	beq.n	800637c <_vfiprintf_r+0x22c>
 80062fc:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <_vfiprintf_r+0x254>)
 80062fe:	bb1b      	cbnz	r3, 8006348 <_vfiprintf_r+0x1f8>
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	3307      	adds	r3, #7
 8006304:	f023 0307 	bic.w	r3, r3, #7
 8006308:	3308      	adds	r3, #8
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630e:	443b      	add	r3, r7
 8006310:	9309      	str	r3, [sp, #36]	; 0x24
 8006312:	e767      	b.n	80061e4 <_vfiprintf_r+0x94>
 8006314:	fb0c 3202 	mla	r2, ip, r2, r3
 8006318:	460c      	mov	r4, r1
 800631a:	2001      	movs	r0, #1
 800631c:	e7a5      	b.n	800626a <_vfiprintf_r+0x11a>
 800631e:	2300      	movs	r3, #0
 8006320:	3401      	adds	r4, #1
 8006322:	9305      	str	r3, [sp, #20]
 8006324:	4619      	mov	r1, r3
 8006326:	f04f 0c0a 	mov.w	ip, #10
 800632a:	4620      	mov	r0, r4
 800632c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006330:	3a30      	subs	r2, #48	; 0x30
 8006332:	2a09      	cmp	r2, #9
 8006334:	d903      	bls.n	800633e <_vfiprintf_r+0x1ee>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0c5      	beq.n	80062c6 <_vfiprintf_r+0x176>
 800633a:	9105      	str	r1, [sp, #20]
 800633c:	e7c3      	b.n	80062c6 <_vfiprintf_r+0x176>
 800633e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006342:	4604      	mov	r4, r0
 8006344:	2301      	movs	r3, #1
 8006346:	e7f0      	b.n	800632a <_vfiprintf_r+0x1da>
 8006348:	ab03      	add	r3, sp, #12
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	462a      	mov	r2, r5
 800634e:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <_vfiprintf_r+0x258>)
 8006350:	a904      	add	r1, sp, #16
 8006352:	4630      	mov	r0, r6
 8006354:	f3af 8000 	nop.w
 8006358:	4607      	mov	r7, r0
 800635a:	1c78      	adds	r0, r7, #1
 800635c:	d1d6      	bne.n	800630c <_vfiprintf_r+0x1bc>
 800635e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006360:	07d9      	lsls	r1, r3, #31
 8006362:	d405      	bmi.n	8006370 <_vfiprintf_r+0x220>
 8006364:	89ab      	ldrh	r3, [r5, #12]
 8006366:	059a      	lsls	r2, r3, #22
 8006368:	d402      	bmi.n	8006370 <_vfiprintf_r+0x220>
 800636a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800636c:	f7ff fe31 	bl	8005fd2 <__retarget_lock_release_recursive>
 8006370:	89ab      	ldrh	r3, [r5, #12]
 8006372:	065b      	lsls	r3, r3, #25
 8006374:	f53f af12 	bmi.w	800619c <_vfiprintf_r+0x4c>
 8006378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800637a:	e711      	b.n	80061a0 <_vfiprintf_r+0x50>
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	462a      	mov	r2, r5
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <_vfiprintf_r+0x258>)
 8006384:	a904      	add	r1, sp, #16
 8006386:	4630      	mov	r0, r6
 8006388:	f000 f880 	bl	800648c <_printf_i>
 800638c:	e7e4      	b.n	8006358 <_vfiprintf_r+0x208>
 800638e:	bf00      	nop
 8006390:	08006d58 	.word	0x08006d58
 8006394:	08006d78 	.word	0x08006d78
 8006398:	08006d38 	.word	0x08006d38
 800639c:	08006d98 	.word	0x08006d98
 80063a0:	08006da2 	.word	0x08006da2
 80063a4:	00000000 	.word	0x00000000
 80063a8:	0800612b 	.word	0x0800612b
 80063ac:	08006d9e 	.word	0x08006d9e

080063b0 <_printf_common>:
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	4616      	mov	r6, r2
 80063b6:	4699      	mov	r9, r3
 80063b8:	688a      	ldr	r2, [r1, #8]
 80063ba:	690b      	ldr	r3, [r1, #16]
 80063bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	bfb8      	it	lt
 80063c4:	4613      	movlt	r3, r2
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063cc:	4607      	mov	r7, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	b10a      	cbz	r2, 80063d6 <_printf_common+0x26>
 80063d2:	3301      	adds	r3, #1
 80063d4:	6033      	str	r3, [r6, #0]
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	0699      	lsls	r1, r3, #26
 80063da:	bf42      	ittt	mi
 80063dc:	6833      	ldrmi	r3, [r6, #0]
 80063de:	3302      	addmi	r3, #2
 80063e0:	6033      	strmi	r3, [r6, #0]
 80063e2:	6825      	ldr	r5, [r4, #0]
 80063e4:	f015 0506 	ands.w	r5, r5, #6
 80063e8:	d106      	bne.n	80063f8 <_printf_common+0x48>
 80063ea:	f104 0a19 	add.w	sl, r4, #25
 80063ee:	68e3      	ldr	r3, [r4, #12]
 80063f0:	6832      	ldr	r2, [r6, #0]
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	42ab      	cmp	r3, r5
 80063f6:	dc26      	bgt.n	8006446 <_printf_common+0x96>
 80063f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063fc:	1e13      	subs	r3, r2, #0
 80063fe:	6822      	ldr	r2, [r4, #0]
 8006400:	bf18      	it	ne
 8006402:	2301      	movne	r3, #1
 8006404:	0692      	lsls	r2, r2, #26
 8006406:	d42b      	bmi.n	8006460 <_printf_common+0xb0>
 8006408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800640c:	4649      	mov	r1, r9
 800640e:	4638      	mov	r0, r7
 8006410:	47c0      	blx	r8
 8006412:	3001      	adds	r0, #1
 8006414:	d01e      	beq.n	8006454 <_printf_common+0xa4>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	68e5      	ldr	r5, [r4, #12]
 800641a:	6832      	ldr	r2, [r6, #0]
 800641c:	f003 0306 	and.w	r3, r3, #6
 8006420:	2b04      	cmp	r3, #4
 8006422:	bf08      	it	eq
 8006424:	1aad      	subeq	r5, r5, r2
 8006426:	68a3      	ldr	r3, [r4, #8]
 8006428:	6922      	ldr	r2, [r4, #16]
 800642a:	bf0c      	ite	eq
 800642c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006430:	2500      	movne	r5, #0
 8006432:	4293      	cmp	r3, r2
 8006434:	bfc4      	itt	gt
 8006436:	1a9b      	subgt	r3, r3, r2
 8006438:	18ed      	addgt	r5, r5, r3
 800643a:	2600      	movs	r6, #0
 800643c:	341a      	adds	r4, #26
 800643e:	42b5      	cmp	r5, r6
 8006440:	d11a      	bne.n	8006478 <_printf_common+0xc8>
 8006442:	2000      	movs	r0, #0
 8006444:	e008      	b.n	8006458 <_printf_common+0xa8>
 8006446:	2301      	movs	r3, #1
 8006448:	4652      	mov	r2, sl
 800644a:	4649      	mov	r1, r9
 800644c:	4638      	mov	r0, r7
 800644e:	47c0      	blx	r8
 8006450:	3001      	adds	r0, #1
 8006452:	d103      	bne.n	800645c <_printf_common+0xac>
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645c:	3501      	adds	r5, #1
 800645e:	e7c6      	b.n	80063ee <_printf_common+0x3e>
 8006460:	18e1      	adds	r1, r4, r3
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	2030      	movs	r0, #48	; 0x30
 8006466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800646a:	4422      	add	r2, r4
 800646c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006474:	3302      	adds	r3, #2
 8006476:	e7c7      	b.n	8006408 <_printf_common+0x58>
 8006478:	2301      	movs	r3, #1
 800647a:	4622      	mov	r2, r4
 800647c:	4649      	mov	r1, r9
 800647e:	4638      	mov	r0, r7
 8006480:	47c0      	blx	r8
 8006482:	3001      	adds	r0, #1
 8006484:	d0e6      	beq.n	8006454 <_printf_common+0xa4>
 8006486:	3601      	adds	r6, #1
 8006488:	e7d9      	b.n	800643e <_printf_common+0x8e>
	...

0800648c <_printf_i>:
 800648c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	7e0f      	ldrb	r7, [r1, #24]
 8006492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006494:	2f78      	cmp	r7, #120	; 0x78
 8006496:	4691      	mov	r9, r2
 8006498:	4680      	mov	r8, r0
 800649a:	460c      	mov	r4, r1
 800649c:	469a      	mov	sl, r3
 800649e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064a2:	d807      	bhi.n	80064b4 <_printf_i+0x28>
 80064a4:	2f62      	cmp	r7, #98	; 0x62
 80064a6:	d80a      	bhi.n	80064be <_printf_i+0x32>
 80064a8:	2f00      	cmp	r7, #0
 80064aa:	f000 80d8 	beq.w	800665e <_printf_i+0x1d2>
 80064ae:	2f58      	cmp	r7, #88	; 0x58
 80064b0:	f000 80a3 	beq.w	80065fa <_printf_i+0x16e>
 80064b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064bc:	e03a      	b.n	8006534 <_printf_i+0xa8>
 80064be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064c2:	2b15      	cmp	r3, #21
 80064c4:	d8f6      	bhi.n	80064b4 <_printf_i+0x28>
 80064c6:	a101      	add	r1, pc, #4	; (adr r1, 80064cc <_printf_i+0x40>)
 80064c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064cc:	08006525 	.word	0x08006525
 80064d0:	08006539 	.word	0x08006539
 80064d4:	080064b5 	.word	0x080064b5
 80064d8:	080064b5 	.word	0x080064b5
 80064dc:	080064b5 	.word	0x080064b5
 80064e0:	080064b5 	.word	0x080064b5
 80064e4:	08006539 	.word	0x08006539
 80064e8:	080064b5 	.word	0x080064b5
 80064ec:	080064b5 	.word	0x080064b5
 80064f0:	080064b5 	.word	0x080064b5
 80064f4:	080064b5 	.word	0x080064b5
 80064f8:	08006645 	.word	0x08006645
 80064fc:	08006569 	.word	0x08006569
 8006500:	08006627 	.word	0x08006627
 8006504:	080064b5 	.word	0x080064b5
 8006508:	080064b5 	.word	0x080064b5
 800650c:	08006667 	.word	0x08006667
 8006510:	080064b5 	.word	0x080064b5
 8006514:	08006569 	.word	0x08006569
 8006518:	080064b5 	.word	0x080064b5
 800651c:	080064b5 	.word	0x080064b5
 8006520:	0800662f 	.word	0x0800662f
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	1d1a      	adds	r2, r3, #4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	602a      	str	r2, [r5, #0]
 800652c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006534:	2301      	movs	r3, #1
 8006536:	e0a3      	b.n	8006680 <_printf_i+0x1f4>
 8006538:	6820      	ldr	r0, [r4, #0]
 800653a:	6829      	ldr	r1, [r5, #0]
 800653c:	0606      	lsls	r6, r0, #24
 800653e:	f101 0304 	add.w	r3, r1, #4
 8006542:	d50a      	bpl.n	800655a <_printf_i+0xce>
 8006544:	680e      	ldr	r6, [r1, #0]
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	2e00      	cmp	r6, #0
 800654a:	da03      	bge.n	8006554 <_printf_i+0xc8>
 800654c:	232d      	movs	r3, #45	; 0x2d
 800654e:	4276      	negs	r6, r6
 8006550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006554:	485e      	ldr	r0, [pc, #376]	; (80066d0 <_printf_i+0x244>)
 8006556:	230a      	movs	r3, #10
 8006558:	e019      	b.n	800658e <_printf_i+0x102>
 800655a:	680e      	ldr	r6, [r1, #0]
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006562:	bf18      	it	ne
 8006564:	b236      	sxthne	r6, r6
 8006566:	e7ef      	b.n	8006548 <_printf_i+0xbc>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	1d19      	adds	r1, r3, #4
 800656e:	6029      	str	r1, [r5, #0]
 8006570:	0601      	lsls	r1, r0, #24
 8006572:	d501      	bpl.n	8006578 <_printf_i+0xec>
 8006574:	681e      	ldr	r6, [r3, #0]
 8006576:	e002      	b.n	800657e <_printf_i+0xf2>
 8006578:	0646      	lsls	r6, r0, #25
 800657a:	d5fb      	bpl.n	8006574 <_printf_i+0xe8>
 800657c:	881e      	ldrh	r6, [r3, #0]
 800657e:	4854      	ldr	r0, [pc, #336]	; (80066d0 <_printf_i+0x244>)
 8006580:	2f6f      	cmp	r7, #111	; 0x6f
 8006582:	bf0c      	ite	eq
 8006584:	2308      	moveq	r3, #8
 8006586:	230a      	movne	r3, #10
 8006588:	2100      	movs	r1, #0
 800658a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800658e:	6865      	ldr	r5, [r4, #4]
 8006590:	60a5      	str	r5, [r4, #8]
 8006592:	2d00      	cmp	r5, #0
 8006594:	bfa2      	ittt	ge
 8006596:	6821      	ldrge	r1, [r4, #0]
 8006598:	f021 0104 	bicge.w	r1, r1, #4
 800659c:	6021      	strge	r1, [r4, #0]
 800659e:	b90e      	cbnz	r6, 80065a4 <_printf_i+0x118>
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	d04d      	beq.n	8006640 <_printf_i+0x1b4>
 80065a4:	4615      	mov	r5, r2
 80065a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065aa:	fb03 6711 	mls	r7, r3, r1, r6
 80065ae:	5dc7      	ldrb	r7, [r0, r7]
 80065b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065b4:	4637      	mov	r7, r6
 80065b6:	42bb      	cmp	r3, r7
 80065b8:	460e      	mov	r6, r1
 80065ba:	d9f4      	bls.n	80065a6 <_printf_i+0x11a>
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d10b      	bne.n	80065d8 <_printf_i+0x14c>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07de      	lsls	r6, r3, #31
 80065c4:	d508      	bpl.n	80065d8 <_printf_i+0x14c>
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	6861      	ldr	r1, [r4, #4]
 80065ca:	4299      	cmp	r1, r3
 80065cc:	bfde      	ittt	le
 80065ce:	2330      	movle	r3, #48	; 0x30
 80065d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065d8:	1b52      	subs	r2, r2, r5
 80065da:	6122      	str	r2, [r4, #16]
 80065dc:	f8cd a000 	str.w	sl, [sp]
 80065e0:	464b      	mov	r3, r9
 80065e2:	aa03      	add	r2, sp, #12
 80065e4:	4621      	mov	r1, r4
 80065e6:	4640      	mov	r0, r8
 80065e8:	f7ff fee2 	bl	80063b0 <_printf_common>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d14c      	bne.n	800668a <_printf_i+0x1fe>
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	b004      	add	sp, #16
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	4835      	ldr	r0, [pc, #212]	; (80066d0 <_printf_i+0x244>)
 80065fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006600:	6829      	ldr	r1, [r5, #0]
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f851 6b04 	ldr.w	r6, [r1], #4
 8006608:	6029      	str	r1, [r5, #0]
 800660a:	061d      	lsls	r5, r3, #24
 800660c:	d514      	bpl.n	8006638 <_printf_i+0x1ac>
 800660e:	07df      	lsls	r7, r3, #31
 8006610:	bf44      	itt	mi
 8006612:	f043 0320 	orrmi.w	r3, r3, #32
 8006616:	6023      	strmi	r3, [r4, #0]
 8006618:	b91e      	cbnz	r6, 8006622 <_printf_i+0x196>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	f023 0320 	bic.w	r3, r3, #32
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	2310      	movs	r3, #16
 8006624:	e7b0      	b.n	8006588 <_printf_i+0xfc>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	f043 0320 	orr.w	r3, r3, #32
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	2378      	movs	r3, #120	; 0x78
 8006630:	4828      	ldr	r0, [pc, #160]	; (80066d4 <_printf_i+0x248>)
 8006632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006636:	e7e3      	b.n	8006600 <_printf_i+0x174>
 8006638:	0659      	lsls	r1, r3, #25
 800663a:	bf48      	it	mi
 800663c:	b2b6      	uxthmi	r6, r6
 800663e:	e7e6      	b.n	800660e <_printf_i+0x182>
 8006640:	4615      	mov	r5, r2
 8006642:	e7bb      	b.n	80065bc <_printf_i+0x130>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	6826      	ldr	r6, [r4, #0]
 8006648:	6961      	ldr	r1, [r4, #20]
 800664a:	1d18      	adds	r0, r3, #4
 800664c:	6028      	str	r0, [r5, #0]
 800664e:	0635      	lsls	r5, r6, #24
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	d501      	bpl.n	8006658 <_printf_i+0x1cc>
 8006654:	6019      	str	r1, [r3, #0]
 8006656:	e002      	b.n	800665e <_printf_i+0x1d2>
 8006658:	0670      	lsls	r0, r6, #25
 800665a:	d5fb      	bpl.n	8006654 <_printf_i+0x1c8>
 800665c:	8019      	strh	r1, [r3, #0]
 800665e:	2300      	movs	r3, #0
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	4615      	mov	r5, r2
 8006664:	e7ba      	b.n	80065dc <_printf_i+0x150>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	1d1a      	adds	r2, r3, #4
 800666a:	602a      	str	r2, [r5, #0]
 800666c:	681d      	ldr	r5, [r3, #0]
 800666e:	6862      	ldr	r2, [r4, #4]
 8006670:	2100      	movs	r1, #0
 8006672:	4628      	mov	r0, r5
 8006674:	f7f9 fdac 	bl	80001d0 <memchr>
 8006678:	b108      	cbz	r0, 800667e <_printf_i+0x1f2>
 800667a:	1b40      	subs	r0, r0, r5
 800667c:	6060      	str	r0, [r4, #4]
 800667e:	6863      	ldr	r3, [r4, #4]
 8006680:	6123      	str	r3, [r4, #16]
 8006682:	2300      	movs	r3, #0
 8006684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006688:	e7a8      	b.n	80065dc <_printf_i+0x150>
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	462a      	mov	r2, r5
 800668e:	4649      	mov	r1, r9
 8006690:	4640      	mov	r0, r8
 8006692:	47d0      	blx	sl
 8006694:	3001      	adds	r0, #1
 8006696:	d0ab      	beq.n	80065f0 <_printf_i+0x164>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	079b      	lsls	r3, r3, #30
 800669c:	d413      	bmi.n	80066c6 <_printf_i+0x23a>
 800669e:	68e0      	ldr	r0, [r4, #12]
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	4298      	cmp	r0, r3
 80066a4:	bfb8      	it	lt
 80066a6:	4618      	movlt	r0, r3
 80066a8:	e7a4      	b.n	80065f4 <_printf_i+0x168>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4632      	mov	r2, r6
 80066ae:	4649      	mov	r1, r9
 80066b0:	4640      	mov	r0, r8
 80066b2:	47d0      	blx	sl
 80066b4:	3001      	adds	r0, #1
 80066b6:	d09b      	beq.n	80065f0 <_printf_i+0x164>
 80066b8:	3501      	adds	r5, #1
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	9903      	ldr	r1, [sp, #12]
 80066be:	1a5b      	subs	r3, r3, r1
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dcf2      	bgt.n	80066aa <_printf_i+0x21e>
 80066c4:	e7eb      	b.n	800669e <_printf_i+0x212>
 80066c6:	2500      	movs	r5, #0
 80066c8:	f104 0619 	add.w	r6, r4, #25
 80066cc:	e7f5      	b.n	80066ba <_printf_i+0x22e>
 80066ce:	bf00      	nop
 80066d0:	08006da9 	.word	0x08006da9
 80066d4:	08006dba 	.word	0x08006dba

080066d8 <_sbrk_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d06      	ldr	r5, [pc, #24]	; (80066f4 <_sbrk_r+0x1c>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fa fe78 	bl	80013d8 <_sbrk>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_sbrk_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_sbrk_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	20000448 	.word	0x20000448

080066f8 <__sread>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	460c      	mov	r4, r1
 80066fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006700:	f000 fab2 	bl	8006c68 <_read_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	bfab      	itete	ge
 8006708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800670a:	89a3      	ldrhlt	r3, [r4, #12]
 800670c:	181b      	addge	r3, r3, r0
 800670e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006712:	bfac      	ite	ge
 8006714:	6563      	strge	r3, [r4, #84]	; 0x54
 8006716:	81a3      	strhlt	r3, [r4, #12]
 8006718:	bd10      	pop	{r4, pc}

0800671a <__swrite>:
 800671a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	461f      	mov	r7, r3
 8006720:	898b      	ldrh	r3, [r1, #12]
 8006722:	05db      	lsls	r3, r3, #23
 8006724:	4605      	mov	r5, r0
 8006726:	460c      	mov	r4, r1
 8006728:	4616      	mov	r6, r2
 800672a:	d505      	bpl.n	8006738 <__swrite+0x1e>
 800672c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006730:	2302      	movs	r3, #2
 8006732:	2200      	movs	r2, #0
 8006734:	f000 f9c8 	bl	8006ac8 <_lseek_r>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800673e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	4632      	mov	r2, r6
 8006746:	463b      	mov	r3, r7
 8006748:	4628      	mov	r0, r5
 800674a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	f000 b869 	b.w	8006824 <_write_r>

08006752 <__sseek>:
 8006752:	b510      	push	{r4, lr}
 8006754:	460c      	mov	r4, r1
 8006756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675a:	f000 f9b5 	bl	8006ac8 <_lseek_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	bf15      	itete	ne
 8006764:	6560      	strne	r0, [r4, #84]	; 0x54
 8006766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800676a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800676e:	81a3      	strheq	r3, [r4, #12]
 8006770:	bf18      	it	ne
 8006772:	81a3      	strhne	r3, [r4, #12]
 8006774:	bd10      	pop	{r4, pc}

08006776 <__sclose>:
 8006776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677a:	f000 b8d3 	b.w	8006924 <_close_r>
	...

08006780 <__swbuf_r>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	460e      	mov	r6, r1
 8006784:	4614      	mov	r4, r2
 8006786:	4605      	mov	r5, r0
 8006788:	b118      	cbz	r0, 8006792 <__swbuf_r+0x12>
 800678a:	6983      	ldr	r3, [r0, #24]
 800678c:	b90b      	cbnz	r3, 8006792 <__swbuf_r+0x12>
 800678e:	f7ff fb81 	bl	8005e94 <__sinit>
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <__swbuf_r+0x98>)
 8006794:	429c      	cmp	r4, r3
 8006796:	d12b      	bne.n	80067f0 <__swbuf_r+0x70>
 8006798:	686c      	ldr	r4, [r5, #4]
 800679a:	69a3      	ldr	r3, [r4, #24]
 800679c:	60a3      	str	r3, [r4, #8]
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	071a      	lsls	r2, r3, #28
 80067a2:	d52f      	bpl.n	8006804 <__swbuf_r+0x84>
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	b36b      	cbz	r3, 8006804 <__swbuf_r+0x84>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	1ac0      	subs	r0, r0, r3
 80067ae:	6963      	ldr	r3, [r4, #20]
 80067b0:	b2f6      	uxtb	r6, r6
 80067b2:	4283      	cmp	r3, r0
 80067b4:	4637      	mov	r7, r6
 80067b6:	dc04      	bgt.n	80067c2 <__swbuf_r+0x42>
 80067b8:	4621      	mov	r1, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f948 	bl	8006a50 <_fflush_r>
 80067c0:	bb30      	cbnz	r0, 8006810 <__swbuf_r+0x90>
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	60a3      	str	r3, [r4, #8]
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	6022      	str	r2, [r4, #0]
 80067ce:	701e      	strb	r6, [r3, #0]
 80067d0:	6963      	ldr	r3, [r4, #20]
 80067d2:	3001      	adds	r0, #1
 80067d4:	4283      	cmp	r3, r0
 80067d6:	d004      	beq.n	80067e2 <__swbuf_r+0x62>
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	07db      	lsls	r3, r3, #31
 80067dc:	d506      	bpl.n	80067ec <__swbuf_r+0x6c>
 80067de:	2e0a      	cmp	r6, #10
 80067e0:	d104      	bne.n	80067ec <__swbuf_r+0x6c>
 80067e2:	4621      	mov	r1, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 f933 	bl	8006a50 <_fflush_r>
 80067ea:	b988      	cbnz	r0, 8006810 <__swbuf_r+0x90>
 80067ec:	4638      	mov	r0, r7
 80067ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <__swbuf_r+0x9c>)
 80067f2:	429c      	cmp	r4, r3
 80067f4:	d101      	bne.n	80067fa <__swbuf_r+0x7a>
 80067f6:	68ac      	ldr	r4, [r5, #8]
 80067f8:	e7cf      	b.n	800679a <__swbuf_r+0x1a>
 80067fa:	4b09      	ldr	r3, [pc, #36]	; (8006820 <__swbuf_r+0xa0>)
 80067fc:	429c      	cmp	r4, r3
 80067fe:	bf08      	it	eq
 8006800:	68ec      	ldreq	r4, [r5, #12]
 8006802:	e7ca      	b.n	800679a <__swbuf_r+0x1a>
 8006804:	4621      	mov	r1, r4
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f81e 	bl	8006848 <__swsetup_r>
 800680c:	2800      	cmp	r0, #0
 800680e:	d0cb      	beq.n	80067a8 <__swbuf_r+0x28>
 8006810:	f04f 37ff 	mov.w	r7, #4294967295
 8006814:	e7ea      	b.n	80067ec <__swbuf_r+0x6c>
 8006816:	bf00      	nop
 8006818:	08006d58 	.word	0x08006d58
 800681c:	08006d78 	.word	0x08006d78
 8006820:	08006d38 	.word	0x08006d38

08006824 <_write_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d07      	ldr	r5, [pc, #28]	; (8006844 <_write_r+0x20>)
 8006828:	4604      	mov	r4, r0
 800682a:	4608      	mov	r0, r1
 800682c:	4611      	mov	r1, r2
 800682e:	2200      	movs	r2, #0
 8006830:	602a      	str	r2, [r5, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	f7fa fd7f 	bl	8001336 <_write>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_write_r+0x1e>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_write_r+0x1e>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	20000448 	.word	0x20000448

08006848 <__swsetup_r>:
 8006848:	4b32      	ldr	r3, [pc, #200]	; (8006914 <__swsetup_r+0xcc>)
 800684a:	b570      	push	{r4, r5, r6, lr}
 800684c:	681d      	ldr	r5, [r3, #0]
 800684e:	4606      	mov	r6, r0
 8006850:	460c      	mov	r4, r1
 8006852:	b125      	cbz	r5, 800685e <__swsetup_r+0x16>
 8006854:	69ab      	ldr	r3, [r5, #24]
 8006856:	b913      	cbnz	r3, 800685e <__swsetup_r+0x16>
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff fb1b 	bl	8005e94 <__sinit>
 800685e:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <__swsetup_r+0xd0>)
 8006860:	429c      	cmp	r4, r3
 8006862:	d10f      	bne.n	8006884 <__swsetup_r+0x3c>
 8006864:	686c      	ldr	r4, [r5, #4]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800686c:	0719      	lsls	r1, r3, #28
 800686e:	d42c      	bmi.n	80068ca <__swsetup_r+0x82>
 8006870:	06dd      	lsls	r5, r3, #27
 8006872:	d411      	bmi.n	8006898 <__swsetup_r+0x50>
 8006874:	2309      	movs	r3, #9
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
 8006882:	e03e      	b.n	8006902 <__swsetup_r+0xba>
 8006884:	4b25      	ldr	r3, [pc, #148]	; (800691c <__swsetup_r+0xd4>)
 8006886:	429c      	cmp	r4, r3
 8006888:	d101      	bne.n	800688e <__swsetup_r+0x46>
 800688a:	68ac      	ldr	r4, [r5, #8]
 800688c:	e7eb      	b.n	8006866 <__swsetup_r+0x1e>
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <__swsetup_r+0xd8>)
 8006890:	429c      	cmp	r4, r3
 8006892:	bf08      	it	eq
 8006894:	68ec      	ldreq	r4, [r5, #12]
 8006896:	e7e6      	b.n	8006866 <__swsetup_r+0x1e>
 8006898:	0758      	lsls	r0, r3, #29
 800689a:	d512      	bpl.n	80068c2 <__swsetup_r+0x7a>
 800689c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800689e:	b141      	cbz	r1, 80068b2 <__swsetup_r+0x6a>
 80068a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a4:	4299      	cmp	r1, r3
 80068a6:	d002      	beq.n	80068ae <__swsetup_r+0x66>
 80068a8:	4630      	mov	r0, r6
 80068aa:	f000 f991 	bl	8006bd0 <_free_r>
 80068ae:	2300      	movs	r3, #0
 80068b0:	6363      	str	r3, [r4, #52]	; 0x34
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068b8:	81a3      	strh	r3, [r4, #12]
 80068ba:	2300      	movs	r3, #0
 80068bc:	6063      	str	r3, [r4, #4]
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	f043 0308 	orr.w	r3, r3, #8
 80068c8:	81a3      	strh	r3, [r4, #12]
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	b94b      	cbnz	r3, 80068e2 <__swsetup_r+0x9a>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d8:	d003      	beq.n	80068e2 <__swsetup_r+0x9a>
 80068da:	4621      	mov	r1, r4
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f92b 	bl	8006b38 <__smakebuf_r>
 80068e2:	89a0      	ldrh	r0, [r4, #12]
 80068e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e8:	f010 0301 	ands.w	r3, r0, #1
 80068ec:	d00a      	beq.n	8006904 <__swsetup_r+0xbc>
 80068ee:	2300      	movs	r3, #0
 80068f0:	60a3      	str	r3, [r4, #8]
 80068f2:	6963      	ldr	r3, [r4, #20]
 80068f4:	425b      	negs	r3, r3
 80068f6:	61a3      	str	r3, [r4, #24]
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	b943      	cbnz	r3, 800690e <__swsetup_r+0xc6>
 80068fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006900:	d1ba      	bne.n	8006878 <__swsetup_r+0x30>
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	0781      	lsls	r1, r0, #30
 8006906:	bf58      	it	pl
 8006908:	6963      	ldrpl	r3, [r4, #20]
 800690a:	60a3      	str	r3, [r4, #8]
 800690c:	e7f4      	b.n	80068f8 <__swsetup_r+0xb0>
 800690e:	2000      	movs	r0, #0
 8006910:	e7f7      	b.n	8006902 <__swsetup_r+0xba>
 8006912:	bf00      	nop
 8006914:	20000010 	.word	0x20000010
 8006918:	08006d58 	.word	0x08006d58
 800691c:	08006d78 	.word	0x08006d78
 8006920:	08006d38 	.word	0x08006d38

08006924 <_close_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d06      	ldr	r5, [pc, #24]	; (8006940 <_close_r+0x1c>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fa fd1d 	bl	800136e <_close>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_close_r+0x1a>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_close_r+0x1a>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20000448 	.word	0x20000448

08006944 <__sflush_r>:
 8006944:	898a      	ldrh	r2, [r1, #12]
 8006946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694a:	4605      	mov	r5, r0
 800694c:	0710      	lsls	r0, r2, #28
 800694e:	460c      	mov	r4, r1
 8006950:	d458      	bmi.n	8006a04 <__sflush_r+0xc0>
 8006952:	684b      	ldr	r3, [r1, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	dc05      	bgt.n	8006964 <__sflush_r+0x20>
 8006958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	dc02      	bgt.n	8006964 <__sflush_r+0x20>
 800695e:	2000      	movs	r0, #0
 8006960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006966:	2e00      	cmp	r6, #0
 8006968:	d0f9      	beq.n	800695e <__sflush_r+0x1a>
 800696a:	2300      	movs	r3, #0
 800696c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006970:	682f      	ldr	r7, [r5, #0]
 8006972:	602b      	str	r3, [r5, #0]
 8006974:	d032      	beq.n	80069dc <__sflush_r+0x98>
 8006976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	075a      	lsls	r2, r3, #29
 800697c:	d505      	bpl.n	800698a <__sflush_r+0x46>
 800697e:	6863      	ldr	r3, [r4, #4]
 8006980:	1ac0      	subs	r0, r0, r3
 8006982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006984:	b10b      	cbz	r3, 800698a <__sflush_r+0x46>
 8006986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006988:	1ac0      	subs	r0, r0, r3
 800698a:	2300      	movs	r3, #0
 800698c:	4602      	mov	r2, r0
 800698e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006990:	6a21      	ldr	r1, [r4, #32]
 8006992:	4628      	mov	r0, r5
 8006994:	47b0      	blx	r6
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	d106      	bne.n	80069aa <__sflush_r+0x66>
 800699c:	6829      	ldr	r1, [r5, #0]
 800699e:	291d      	cmp	r1, #29
 80069a0:	d82c      	bhi.n	80069fc <__sflush_r+0xb8>
 80069a2:	4a2a      	ldr	r2, [pc, #168]	; (8006a4c <__sflush_r+0x108>)
 80069a4:	40ca      	lsrs	r2, r1
 80069a6:	07d6      	lsls	r6, r2, #31
 80069a8:	d528      	bpl.n	80069fc <__sflush_r+0xb8>
 80069aa:	2200      	movs	r2, #0
 80069ac:	6062      	str	r2, [r4, #4]
 80069ae:	04d9      	lsls	r1, r3, #19
 80069b0:	6922      	ldr	r2, [r4, #16]
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	d504      	bpl.n	80069c0 <__sflush_r+0x7c>
 80069b6:	1c42      	adds	r2, r0, #1
 80069b8:	d101      	bne.n	80069be <__sflush_r+0x7a>
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	b903      	cbnz	r3, 80069c0 <__sflush_r+0x7c>
 80069be:	6560      	str	r0, [r4, #84]	; 0x54
 80069c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069c2:	602f      	str	r7, [r5, #0]
 80069c4:	2900      	cmp	r1, #0
 80069c6:	d0ca      	beq.n	800695e <__sflush_r+0x1a>
 80069c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d002      	beq.n	80069d6 <__sflush_r+0x92>
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 f8fd 	bl	8006bd0 <_free_r>
 80069d6:	2000      	movs	r0, #0
 80069d8:	6360      	str	r0, [r4, #52]	; 0x34
 80069da:	e7c1      	b.n	8006960 <__sflush_r+0x1c>
 80069dc:	6a21      	ldr	r1, [r4, #32]
 80069de:	2301      	movs	r3, #1
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b0      	blx	r6
 80069e4:	1c41      	adds	r1, r0, #1
 80069e6:	d1c7      	bne.n	8006978 <__sflush_r+0x34>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0c4      	beq.n	8006978 <__sflush_r+0x34>
 80069ee:	2b1d      	cmp	r3, #29
 80069f0:	d001      	beq.n	80069f6 <__sflush_r+0xb2>
 80069f2:	2b16      	cmp	r3, #22
 80069f4:	d101      	bne.n	80069fa <__sflush_r+0xb6>
 80069f6:	602f      	str	r7, [r5, #0]
 80069f8:	e7b1      	b.n	800695e <__sflush_r+0x1a>
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	e7ad      	b.n	8006960 <__sflush_r+0x1c>
 8006a04:	690f      	ldr	r7, [r1, #16]
 8006a06:	2f00      	cmp	r7, #0
 8006a08:	d0a9      	beq.n	800695e <__sflush_r+0x1a>
 8006a0a:	0793      	lsls	r3, r2, #30
 8006a0c:	680e      	ldr	r6, [r1, #0]
 8006a0e:	bf08      	it	eq
 8006a10:	694b      	ldreq	r3, [r1, #20]
 8006a12:	600f      	str	r7, [r1, #0]
 8006a14:	bf18      	it	ne
 8006a16:	2300      	movne	r3, #0
 8006a18:	eba6 0807 	sub.w	r8, r6, r7
 8006a1c:	608b      	str	r3, [r1, #8]
 8006a1e:	f1b8 0f00 	cmp.w	r8, #0
 8006a22:	dd9c      	ble.n	800695e <__sflush_r+0x1a>
 8006a24:	6a21      	ldr	r1, [r4, #32]
 8006a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a28:	4643      	mov	r3, r8
 8006a2a:	463a      	mov	r2, r7
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b0      	blx	r6
 8006a30:	2800      	cmp	r0, #0
 8006a32:	dc06      	bgt.n	8006a42 <__sflush_r+0xfe>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	e78e      	b.n	8006960 <__sflush_r+0x1c>
 8006a42:	4407      	add	r7, r0
 8006a44:	eba8 0800 	sub.w	r8, r8, r0
 8006a48:	e7e9      	b.n	8006a1e <__sflush_r+0xda>
 8006a4a:	bf00      	nop
 8006a4c:	20400001 	.word	0x20400001

08006a50 <_fflush_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	690b      	ldr	r3, [r1, #16]
 8006a54:	4605      	mov	r5, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	b913      	cbnz	r3, 8006a60 <_fflush_r+0x10>
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	b118      	cbz	r0, 8006a6a <_fflush_r+0x1a>
 8006a62:	6983      	ldr	r3, [r0, #24]
 8006a64:	b90b      	cbnz	r3, 8006a6a <_fflush_r+0x1a>
 8006a66:	f7ff fa15 	bl	8005e94 <__sinit>
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <_fflush_r+0x6c>)
 8006a6c:	429c      	cmp	r4, r3
 8006a6e:	d11b      	bne.n	8006aa8 <_fflush_r+0x58>
 8006a70:	686c      	ldr	r4, [r5, #4]
 8006a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0ef      	beq.n	8006a5a <_fflush_r+0xa>
 8006a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a7c:	07d0      	lsls	r0, r2, #31
 8006a7e:	d404      	bmi.n	8006a8a <_fflush_r+0x3a>
 8006a80:	0599      	lsls	r1, r3, #22
 8006a82:	d402      	bmi.n	8006a8a <_fflush_r+0x3a>
 8006a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a86:	f7ff faa3 	bl	8005fd0 <__retarget_lock_acquire_recursive>
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	f7ff ff59 	bl	8006944 <__sflush_r>
 8006a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a94:	07da      	lsls	r2, r3, #31
 8006a96:	4605      	mov	r5, r0
 8006a98:	d4e0      	bmi.n	8006a5c <_fflush_r+0xc>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	059b      	lsls	r3, r3, #22
 8006a9e:	d4dd      	bmi.n	8006a5c <_fflush_r+0xc>
 8006aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa2:	f7ff fa96 	bl	8005fd2 <__retarget_lock_release_recursive>
 8006aa6:	e7d9      	b.n	8006a5c <_fflush_r+0xc>
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <_fflush_r+0x70>)
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d101      	bne.n	8006ab2 <_fflush_r+0x62>
 8006aae:	68ac      	ldr	r4, [r5, #8]
 8006ab0:	e7df      	b.n	8006a72 <_fflush_r+0x22>
 8006ab2:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <_fflush_r+0x74>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	bf08      	it	eq
 8006ab8:	68ec      	ldreq	r4, [r5, #12]
 8006aba:	e7da      	b.n	8006a72 <_fflush_r+0x22>
 8006abc:	08006d58 	.word	0x08006d58
 8006ac0:	08006d78 	.word	0x08006d78
 8006ac4:	08006d38 	.word	0x08006d38

08006ac8 <_lseek_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d07      	ldr	r5, [pc, #28]	; (8006ae8 <_lseek_r+0x20>)
 8006acc:	4604      	mov	r4, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f7fa fc70 	bl	80013bc <_lseek>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_lseek_r+0x1e>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_lseek_r+0x1e>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20000448 	.word	0x20000448

08006aec <__swhatbuf_r>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	460e      	mov	r6, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	2900      	cmp	r1, #0
 8006af6:	b096      	sub	sp, #88	; 0x58
 8006af8:	4614      	mov	r4, r2
 8006afa:	461d      	mov	r5, r3
 8006afc:	da08      	bge.n	8006b10 <__swhatbuf_r+0x24>
 8006afe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	602a      	str	r2, [r5, #0]
 8006b06:	061a      	lsls	r2, r3, #24
 8006b08:	d410      	bmi.n	8006b2c <__swhatbuf_r+0x40>
 8006b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b0e:	e00e      	b.n	8006b2e <__swhatbuf_r+0x42>
 8006b10:	466a      	mov	r2, sp
 8006b12:	f000 f8bb 	bl	8006c8c <_fstat_r>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	dbf1      	blt.n	8006afe <__swhatbuf_r+0x12>
 8006b1a:	9a01      	ldr	r2, [sp, #4]
 8006b1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b24:	425a      	negs	r2, r3
 8006b26:	415a      	adcs	r2, r3
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	e7ee      	b.n	8006b0a <__swhatbuf_r+0x1e>
 8006b2c:	2340      	movs	r3, #64	; 0x40
 8006b2e:	2000      	movs	r0, #0
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	b016      	add	sp, #88	; 0x58
 8006b34:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b38 <__smakebuf_r>:
 8006b38:	898b      	ldrh	r3, [r1, #12]
 8006b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b3c:	079d      	lsls	r5, r3, #30
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	d507      	bpl.n	8006b54 <__smakebuf_r+0x1c>
 8006b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	6163      	str	r3, [r4, #20]
 8006b50:	b002      	add	sp, #8
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	ab01      	add	r3, sp, #4
 8006b56:	466a      	mov	r2, sp
 8006b58:	f7ff ffc8 	bl	8006aec <__swhatbuf_r>
 8006b5c:	9900      	ldr	r1, [sp, #0]
 8006b5e:	4605      	mov	r5, r0
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff fa57 	bl	8006014 <_malloc_r>
 8006b66:	b948      	cbnz	r0, 8006b7c <__smakebuf_r+0x44>
 8006b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6c:	059a      	lsls	r2, r3, #22
 8006b6e:	d4ef      	bmi.n	8006b50 <__smakebuf_r+0x18>
 8006b70:	f023 0303 	bic.w	r3, r3, #3
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	e7e3      	b.n	8006b44 <__smakebuf_r+0xc>
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <__smakebuf_r+0x7c>)
 8006b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	6020      	str	r0, [r4, #0]
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	6163      	str	r3, [r4, #20]
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	6120      	str	r0, [r4, #16]
 8006b92:	b15b      	cbz	r3, 8006bac <__smakebuf_r+0x74>
 8006b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f000 f889 	bl	8006cb0 <_isatty_r>
 8006b9e:	b128      	cbz	r0, 8006bac <__smakebuf_r+0x74>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	89a0      	ldrh	r0, [r4, #12]
 8006bae:	4305      	orrs	r5, r0
 8006bb0:	81a5      	strh	r5, [r4, #12]
 8006bb2:	e7cd      	b.n	8006b50 <__smakebuf_r+0x18>
 8006bb4:	08005e2d 	.word	0x08005e2d

08006bb8 <__malloc_lock>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__malloc_lock+0x8>)
 8006bba:	f7ff ba09 	b.w	8005fd0 <__retarget_lock_acquire_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	2000043c 	.word	0x2000043c

08006bc4 <__malloc_unlock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__malloc_unlock+0x8>)
 8006bc6:	f7ff ba04 	b.w	8005fd2 <__retarget_lock_release_recursive>
 8006bca:	bf00      	nop
 8006bcc:	2000043c 	.word	0x2000043c

08006bd0 <_free_r>:
 8006bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d044      	beq.n	8006c60 <_free_r+0x90>
 8006bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bda:	9001      	str	r0, [sp, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f1a1 0404 	sub.w	r4, r1, #4
 8006be2:	bfb8      	it	lt
 8006be4:	18e4      	addlt	r4, r4, r3
 8006be6:	f7ff ffe7 	bl	8006bb8 <__malloc_lock>
 8006bea:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <_free_r+0x94>)
 8006bec:	9801      	ldr	r0, [sp, #4]
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	b933      	cbnz	r3, 8006c00 <_free_r+0x30>
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	6014      	str	r4, [r2, #0]
 8006bf6:	b003      	add	sp, #12
 8006bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bfc:	f7ff bfe2 	b.w	8006bc4 <__malloc_unlock>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d908      	bls.n	8006c16 <_free_r+0x46>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf01      	itttt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	1949      	addeq	r1, r1, r5
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	e7ed      	b.n	8006bf2 <_free_r+0x22>
 8006c16:	461a      	mov	r2, r3
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b10b      	cbz	r3, 8006c20 <_free_r+0x50>
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d9fa      	bls.n	8006c16 <_free_r+0x46>
 8006c20:	6811      	ldr	r1, [r2, #0]
 8006c22:	1855      	adds	r5, r2, r1
 8006c24:	42a5      	cmp	r5, r4
 8006c26:	d10b      	bne.n	8006c40 <_free_r+0x70>
 8006c28:	6824      	ldr	r4, [r4, #0]
 8006c2a:	4421      	add	r1, r4
 8006c2c:	1854      	adds	r4, r2, r1
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	6011      	str	r1, [r2, #0]
 8006c32:	d1e0      	bne.n	8006bf6 <_free_r+0x26>
 8006c34:	681c      	ldr	r4, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	6053      	str	r3, [r2, #4]
 8006c3a:	4421      	add	r1, r4
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	e7da      	b.n	8006bf6 <_free_r+0x26>
 8006c40:	d902      	bls.n	8006c48 <_free_r+0x78>
 8006c42:	230c      	movs	r3, #12
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	e7d6      	b.n	8006bf6 <_free_r+0x26>
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	1961      	adds	r1, r4, r5
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf04      	itt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	bf04      	itt	eq
 8006c58:	1949      	addeq	r1, r1, r5
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	6054      	str	r4, [r2, #4]
 8006c5e:	e7ca      	b.n	8006bf6 <_free_r+0x26>
 8006c60:	b003      	add	sp, #12
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	20000440 	.word	0x20000440

08006c68 <_read_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d07      	ldr	r5, [pc, #28]	; (8006c88 <_read_r+0x20>)
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	4608      	mov	r0, r1
 8006c70:	4611      	mov	r1, r2
 8006c72:	2200      	movs	r2, #0
 8006c74:	602a      	str	r2, [r5, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f7fa fb40 	bl	80012fc <_read>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_read_r+0x1e>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_read_r+0x1e>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	20000448 	.word	0x20000448

08006c8c <_fstat_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d07      	ldr	r5, [pc, #28]	; (8006cac <_fstat_r+0x20>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	602b      	str	r3, [r5, #0]
 8006c9a:	f7fa fb74 	bl	8001386 <_fstat>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d102      	bne.n	8006ca8 <_fstat_r+0x1c>
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	b103      	cbz	r3, 8006ca8 <_fstat_r+0x1c>
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	bd38      	pop	{r3, r4, r5, pc}
 8006caa:	bf00      	nop
 8006cac:	20000448 	.word	0x20000448

08006cb0 <_isatty_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_isatty_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f7fa fb73 	bl	80013a6 <_isatty>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_isatty_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_isatty_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000448 	.word	0x20000448

08006cd0 <_init>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	bf00      	nop
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr

08006cdc <_fini>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	bf00      	nop
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr
