
PongGameProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e50  08006e50  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e58  08006e58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000074  08006ed4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08006ed4  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001617a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a86  00000000  00000000  0003621e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00038ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e48  00000000  00000000  0003b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164db  00000000  00000000  00065270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001091fe  00000000  00000000  0007b74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e90  00000000  00000000  0018499c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d54 	.word	0x08006d54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006d54 	.word	0x08006d54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 ffc8 	bl	800150c <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_setRST(LCD_RST_GPIO_Port, LCD_RST_Pin);
 800057c:	2108      	movs	r1, #8
 800057e:	4851      	ldr	r0, [pc, #324]	; (80006c4 <main+0x150>)
 8000580:	f000 fb36 	bl	8000bf0 <LCD_setRST>
  LCD_setCE(LCD_CE_GPIO_Port, LCD_CE_Pin);
 8000584:	2104      	movs	r1, #4
 8000586:	484f      	ldr	r0, [pc, #316]	; (80006c4 <main+0x150>)
 8000588:	f000 fb46 	bl	8000c18 <LCD_setCE>
  LCD_setDC(LCD_DC_GPIO_Port, LCD_DC_Pin);
 800058c:	2102      	movs	r1, #2
 800058e:	484d      	ldr	r0, [pc, #308]	; (80006c4 <main+0x150>)
 8000590:	f000 fb56 	bl	8000c40 <LCD_setDC>
  LCD_setDIN(LCD_DIN_GPIO_Port, LCD_DIN_Pin);
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	484a      	ldr	r0, [pc, #296]	; (80006c4 <main+0x150>)
 800059a:	f000 fb65 	bl	8000c68 <LCD_setDIN>
  LCD_setCLK(LCD_CLK_GPIO_Port, LCD_CLK_Pin);
 800059e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a2:	4848      	ldr	r0, [pc, #288]	; (80006c4 <main+0x150>)
 80005a4:	f000 fb74 	bl	8000c90 <LCD_setCLK>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f89e 	bl	80006e8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fa14 	bl	80009d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f9f4 	bl	800099c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f9c2 	bl	800093c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b8:	f000 f8e8 	bl	800078c <MX_ADC1_Init>
  MX_TIM3_Init();
 80005bc:	f000 f96e 	bl	800089c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005c0:	4841      	ldr	r0, [pc, #260]	; (80006c8 <main+0x154>)
 80005c2:	f004 fa63 	bl	8004a8c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, joystick, 2);
 80005c6:	2202      	movs	r2, #2
 80005c8:	4940      	ldr	r1, [pc, #256]	; (80006cc <main+0x158>)
 80005ca:	4841      	ldr	r0, [pc, #260]	; (80006d0 <main+0x15c>)
 80005cc:	f001 fb46 	bl	8001c5c <HAL_ADC_Start_DMA>
  LCD_init();
 80005d0:	f000 fbf6 	bl	8000dc0 <LCD_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_drawHLine(platform_pos, PLATFORM_LVL, platform_length); // poczatkowe polozenie platformy
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <main+0x160>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <main+0x164>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	212f      	movs	r1, #47	; 0x2f
 80005e2:	f000 fceb 	bl	8000fbc <LCD_drawHLine>
  LCD_refreshArea(platform_pos, PLATFORM_LVL, platform_pos + platform_length, PLATFORM_LVL);
 80005e6:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <main+0x160>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <main+0x160>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <main+0x164>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	441a      	add	r2, r3
 80005f8:	232f      	movs	r3, #47	; 0x2f
 80005fa:	212f      	movs	r1, #47	; 0x2f
 80005fc:	f000 fc34 	bl	8000e68 <LCD_refreshArea>
		  }
		  for (int i = 64; i > 0; i--){
			  PlatformMoveLeft(i, 20);
			  //HAL_Delay(50);
		  }*/
		  if (JOY1 > 2300){
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <main+0x158>)
 8000602:	885b      	ldrh	r3, [r3, #2]
 8000604:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000608:	4293      	cmp	r3, r2
 800060a:	d923      	bls.n	8000654 <main+0xe0>
			  joystick_left += JOY1;
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <main+0x158>)
 800060e:	885a      	ldrh	r2, [r3, #2]
 8000610:	4b32      	ldr	r3, [pc, #200]	; (80006dc <main+0x168>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4413      	add	r3, r2
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <main+0x168>)
 800061a:	801a      	strh	r2, [r3, #0]
			  if (joystick_left > (4030 * JOYSTICK_DELAY) && platform_pos > 0){
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <main+0x168>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	f64e 4222 	movw	r2, #60450	; 0xec22
 8000624:	4293      	cmp	r3, r2
 8000626:	d915      	bls.n	8000654 <main+0xe0>
 8000628:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <main+0x160>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d011      	beq.n	8000654 <main+0xe0>
				  PlatformMoveLeft(platform_pos, platform_length);
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <main+0x160>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <main+0x164>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	4610      	mov	r0, r2
 800063e:	f000 fa70 	bl	8000b22 <PlatformMoveLeft>
				  platform_pos--;
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <main+0x160>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <main+0x160>)
 800064c:	701a      	strb	r2, [r3, #0]
				  joystick_left = 0;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <main+0x168>)
 8000650:	2200      	movs	r2, #0
 8000652:	801a      	strh	r2, [r3, #0]
			  }
		  }
		  if (JOY1 < 1600){
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <main+0x158>)
 8000656:	885b      	ldrh	r3, [r3, #2]
 8000658:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800065c:	d22a      	bcs.n	80006b4 <main+0x140>
			  joystick_right += (1899 - JOY1);
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <main+0x16c>)
 8000660:	881a      	ldrh	r2, [r3, #0]
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <main+0x158>)
 8000664:	885b      	ldrh	r3, [r3, #2]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	b29b      	uxth	r3, r3
 800066a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <main+0x16c>)
 8000672:	801a      	strh	r2, [r3, #0]
			  if (joystick_right > (3768 * JOYSTICK_DELAY) && (platform_pos + platform_length) < 84){
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <main+0x16c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	f64d 42c8 	movw	r2, #56520	; 0xdcc8
 800067c:	4293      	cmp	r3, r2
 800067e:	d919      	bls.n	80006b4 <main+0x140>
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <main+0x160>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <main+0x164>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	2b53      	cmp	r3, #83	; 0x53
 800068e:	dc11      	bgt.n	80006b4 <main+0x140>
				  PlatformMoveRight(platform_pos, platform_length);
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <main+0x160>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <main+0x164>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	4610      	mov	r0, r2
 800069e:	f000 fa17 	bl	8000ad0 <PlatformMoveRight>
				  platform_pos++;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <main+0x160>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <main+0x160>)
 80006ac:	701a      	strb	r2, [r3, #0]
				  joystick_right = 0;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <main+0x16c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	801a      	strh	r2, [r3, #0]
			  }
		  }
		  printf("%d\n", JOY1);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <main+0x158>)
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	4619      	mov	r1, r3
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <main+0x170>)
 80006bc:	f005 fbbc 	bl	8005e38 <iprintf>
		  if (JOY1 > 2300){
 80006c0:	e79e      	b.n	8000600 <main+0x8c>
 80006c2:	bf00      	nop
 80006c4:	48000800 	.word	0x48000800
 80006c8:	2000013c 	.word	0x2000013c
 80006cc:	2000020c 	.word	0x2000020c
 80006d0:	20000090 	.word	0x20000090
 80006d4:	20000001 	.word	0x20000001
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000210 	.word	0x20000210
 80006e0:	20000212 	.word	0x20000212
 80006e4:	08006d6c 	.word	0x08006d6c

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	; 0x58
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2244      	movs	r2, #68	; 0x44
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 fb96 	bl	8005e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070e:	f002 fe53 	bl	80033b8 <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000718:	f000 fa64 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000724:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000726:	2310      	movs	r3, #16
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072e:	2302      	movs	r3, #2
 8000730:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000736:	230a      	movs	r3, #10
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800073a:	2307      	movs	r3, #7
 800073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fe8a 	bl	8003464 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000756:	f000 fa45 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2303      	movs	r3, #3
 8000760:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fa52 	bl	8003c1c <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800077e:	f000 fa31 	bl	8000be4 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3758      	adds	r7, #88	; 0x58
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_ADC1_Init+0x100>)
 80007b0:	4a37      	ldr	r2, [pc, #220]	; (8000890 <MX_ADC1_Init+0x104>)
 80007b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80007b4:	4b35      	ldr	r3, [pc, #212]	; (800088c <MX_ADC1_Init+0x100>)
 80007b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_ADC1_Init+0x100>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <MX_ADC1_Init+0x100>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007c8:	4b30      	ldr	r3, [pc, #192]	; (800088c <MX_ADC1_Init+0x100>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0x100>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_ADC1_Init+0x100>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_ADC1_Init+0x100>)
 80007dc:	2201      	movs	r2, #1
 80007de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0x100>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0x100>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0x100>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_ADC1_Init+0x100>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0x100>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_ADC1_Init+0x100>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_ADC1_Init+0x100>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	481e      	ldr	r0, [pc, #120]	; (800088c <MX_ADC1_Init+0x100>)
 8000812:	f001 f8cd 	bl	80019b0 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800081c:	f000 f9e2 	bl	8000be4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4818      	ldr	r0, [pc, #96]	; (800088c <MX_ADC1_Init+0x100>)
 800082c:	f002 f820 	bl	8002870 <HAL_ADCEx_MultiModeConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000836:	f000 f9d5 	bl	8000be4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_ADC1_Init+0x108>)
 800083c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083e:	2306      	movs	r3, #6
 8000840:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000842:	2307      	movs	r3, #7
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000846:	237f      	movs	r3, #127	; 0x7f
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084a:	2304      	movs	r3, #4
 800084c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_ADC1_Init+0x100>)
 8000858:	f001 fada 	bl	8001e10 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000862:	f000 f9bf 	bl	8000be4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_ADC1_Init+0x10c>)
 8000868:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800086a:	230c      	movs	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_ADC1_Init+0x100>)
 8000874:	f001 facc 	bl	8001e10 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800087e:	f000 f9b1 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000090 	.word	0x20000090
 8000890:	50040000 	.word	0x50040000
 8000894:	25b00200 	.word	0x25b00200
 8000898:	2e300800 	.word	0x2e300800

0800089c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_TIM3_Init+0x98>)
 80008bc:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <MX_TIM3_Init+0x9c>)
 80008be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM3_Init+0x98>)
 80008c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM3_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM3_Init+0x98>)
 80008d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80008d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_TIM3_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_TIM3_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <MX_TIM3_Init+0x98>)
 80008e4:	f004 f87a 	bl	80049dc <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008ee:	f000 f979 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_TIM3_Init+0x98>)
 8000900:	f004 fa53 	bl	8004daa <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800090a:	f000 f96b 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_TIM3_Init+0x98>)
 800091c:	f004 fc6a 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000926:	f000 f95d 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000013c 	.word	0x2000013c
 8000938:	40000400 	.word	0x40000400

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_USART2_UART_Init+0x5c>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000980:	f004 fcde 	bl	8005340 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098a:	f000 f92b 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000188 	.word	0x20000188
 8000998:	40004400 	.word	0x40004400

0800099c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_DMA_Init+0x38>)
 80009a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <MX_DMA_Init+0x38>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6493      	str	r3, [r2, #72]	; 0x48
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_DMA_Init+0x38>)
 80009b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	200b      	movs	r0, #11
 80009c0:	f002 f8e1 	bl	8002b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c4:	200b      	movs	r0, #11
 80009c6:	f002 f8fa 	bl	8002bbe <HAL_NVIC_EnableIRQ>

}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a35      	ldr	r2, [pc, #212]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f640 410e 	movw	r1, #3086	; 0xc0e
 8000a54:	481d      	ldr	r0, [pc, #116]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a56:	f002 fc6f 	bl	8003338 <HAL_GPIO_WritePin>
                          |LCD_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f002 fc69 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a7e:	f002 fab1 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin LCD_DIN_Pin
                           LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 8000a82:	f640 430e 	movw	r3, #3086	; 0xc0e
 8000a86:	617b      	str	r3, [r7, #20]
                          |LCD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a9c:	f002 faa2 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f002 fa93 	bl	8002fe4 <HAL_GPIO_Init>

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <PlatformMoveRight>:

/* USER CODE BEGIN 4 */
static void PlatformMoveRight(int startPoint, int length){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint, PLATFORM_LVL, 0); // zgaś lewy skrajny pxl
 8000ada:	2200      	movs	r2, #0
 8000adc:	212f      	movs	r1, #47	; 0x2f
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fa10 	bl	8000f04 <LCD_setPixel>
	LCD_refreshArea(startPoint, PLATFORM_LVL, startPoint, PLATFORM_LVL);
 8000ae4:	232f      	movs	r3, #47	; 0x2f
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	212f      	movs	r1, #47	; 0x2f
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 f9bc 	bl	8000e68 <LCD_refreshArea>
	LCD_setPixel(startPoint+length+1, PLATFORM_LVL, 1); // zapal prawy skrajny pxl
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	3301      	adds	r3, #1
 8000af8:	2201      	movs	r2, #1
 8000afa:	212f      	movs	r1, #47	; 0x2f
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fa01 	bl	8000f04 <LCD_setPixel>
	LCD_refreshArea(startPoint+length+1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	1c58      	adds	r0, r3, #1
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	232f      	movs	r3, #47	; 0x2f
 8000b14:	212f      	movs	r1, #47	; 0x2f
 8000b16:	f000 f9a7 	bl	8000e68 <LCD_refreshArea>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <PlatformMoveLeft>:
static void PlatformMoveLeft(int startPoint, int length){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint+length, PLATFORM_LVL, 0); // zgas prawy skrajny pxl
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	212f      	movs	r1, #47	; 0x2f
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f9e4 	bl	8000f04 <LCD_setPixel>
	LCD_refreshArea(startPoint+length, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	18d0      	adds	r0, r2, r3
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	232f      	movs	r3, #47	; 0x2f
 8000b4c:	212f      	movs	r1, #47	; 0x2f
 8000b4e:	f000 f98b 	bl	8000e68 <LCD_refreshArea>
	LCD_setPixel(startPoint-1, PLATFORM_LVL, 1); // zapal lewy skrajny pxl
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	2201      	movs	r2, #1
 8000b58:	212f      	movs	r1, #47	; 0x2f
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f9d2 	bl	8000f04 <LCD_setPixel>
	LCD_refreshArea(startPoint-1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1e58      	subs	r0, r3, #1
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	232f      	movs	r3, #47	; 0x2f
 8000b6e:	212f      	movs	r1, #47	; 0x2f
 8000b70:	f000 f97a 	bl	8000e68 <LCD_refreshArea>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <__io_putchar>:
int __io_putchar(int ch)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d109      	bne.n	8000b9e <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8000b8a:	230d      	movs	r3, #13
 8000b8c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000b8e:	f107 010f 	add.w	r1, r7, #15
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	2201      	movs	r2, #1
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <__io_putchar+0x3c>)
 8000b9a:	f004 fc1f 	bl	80053dc <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000b9e:	1d39      	adds	r1, r7, #4
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <__io_putchar+0x3c>)
 8000ba8:	f004 fc18 	bl	80053dc <HAL_UART_Transmit>
	return 1;
 8000bac:	2301      	movs	r3, #1
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000188 	.word	0x20000188

08000bbc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d104      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bcc:	2120      	movs	r1, #32
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f002 fbc9 	bl	8003368 <HAL_GPIO_TogglePin>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000013c 	.word	0x2000013c

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000bfc:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <LCD_setRST+0x24>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <LCD_setRST+0x24>)
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	8093      	strh	r3, [r2, #4]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000410 	.word	0x20000410

08000c18 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000c24:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <LCD_setCE+0x24>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <LCD_setCE+0x24>)
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	8193      	strh	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	20000410 	.word	0x20000410

08000c40 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8000c4c:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <LCD_setDC+0x24>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <LCD_setDC+0x24>)
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	8293      	strh	r3, [r2, #20]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	20000410 	.word	0x20000410

08000c68 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <LCD_setDIN+0x24>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <LCD_setDIN+0x24>)
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	8393      	strh	r3, [r2, #28]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20000410 	.word	0x20000410

08000c90 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <LCD_setCLK+0x24>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <LCD_setCLK+0x24>)
 8000ca4:	887b      	ldrh	r3, [r7, #2]
 8000ca6:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	20000410 	.word	0x20000410

08000cb8 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e026      	b.n	8000d16 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <LCD_send+0x70>)
 8000cca:	6998      	ldr	r0, [r3, #24]
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <LCD_send+0x70>)
 8000cce:	8b99      	ldrh	r1, [r3, #28]
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	f1c3 0307 	rsb	r3, r3, #7
 8000cd8:	fa42 f303 	asr.w	r3, r2, r3
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	f002 fb24 	bl	8003338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <LCD_send+0x70>)
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <LCD_send+0x70>)
 8000cf6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fb1c 	bl	8003338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <LCD_send+0x70>)
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <LCD_send+0x70>)
 8000d06:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fb14 	bl	8003338 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3301      	adds	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	d9d5      	bls.n	8000cc8 <LCD_send+0x10>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000410 	.word	0x20000410

08000d2c <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d11c      	bne.n	8000d7c <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <LCD_write+0x90>)
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <LCD_write+0x90>)
 8000d48:	8a91      	ldrh	r1, [r2, #20]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 faf3 	bl	8003338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <LCD_write+0x90>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <LCD_write+0x90>)
 8000d58:	8991      	ldrh	r1, [r2, #12]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 faeb 	bl	8003338 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ffa7 	bl	8000cb8 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <LCD_write+0x90>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <LCD_write+0x90>)
 8000d70:	8991      	ldrh	r1, [r2, #12]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fadf 	bl	8003338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000d7a:	e01b      	b.n	8000db4 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <LCD_write+0x90>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LCD_write+0x90>)
 8000d82:	8a91      	ldrh	r1, [r2, #20]
 8000d84:	2201      	movs	r2, #1
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fad6 	bl	8003338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <LCD_write+0x90>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LCD_write+0x90>)
 8000d92:	8991      	ldrh	r1, [r2, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 face 	bl	8003338 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff8a 	bl	8000cb8 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LCD_write+0x90>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <LCD_write+0x90>)
 8000daa:	8991      	ldrh	r1, [r2, #12]
 8000dac:	2201      	movs	r2, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fac2 	bl	8003338 <HAL_GPIO_WritePin>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000410 	.word	0x20000410

08000dc0 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <LCD_init+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <LCD_init+0x64>)
 8000dca:	8891      	ldrh	r1, [r2, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fab2 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <LCD_init+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <LCD_init+0x64>)
 8000dda:	8891      	ldrh	r1, [r2, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 faaa 	bl	8003338 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000de4:	2100      	movs	r1, #0
 8000de6:	2021      	movs	r0, #33	; 0x21
 8000de8:	f7ff ffa0 	bl	8000d2c <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000dec:	2100      	movs	r1, #0
 8000dee:	20b8      	movs	r0, #184	; 0xb8
 8000df0:	f7ff ff9c 	bl	8000d2c <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000df4:	2100      	movs	r1, #0
 8000df6:	2004      	movs	r0, #4
 8000df8:	f7ff ff98 	bl	8000d2c <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2014      	movs	r0, #20
 8000e00:	f7ff ff94 	bl	8000d2c <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000e04:	2100      	movs	r1, #0
 8000e06:	2020      	movs	r0, #32
 8000e08:	f7ff ff90 	bl	8000d2c <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	200c      	movs	r0, #12
 8000e10:	f7ff ff8c 	bl	8000d2c <LCD_write>
  LCD_clrScr();
 8000e14:	f000 f80a 	bl	8000e2c <LCD_clrScr>
  lcd.inverttext = false;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <LCD_init+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000410 	.word	0x20000410
 8000e28:	20000214 	.word	0x20000214

08000e2c <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e00b      	b.n	8000e50 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff ff76 	bl	8000d2c <LCD_write>
    lcd.buffer[i] = 0;
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <LCD_clrScr+0x38>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000e56:	dbef      	blt.n	8000e38 <LCD_clrScr+0xc>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000214 	.word	0x20000214

08000e68 <LCD_refreshArea>:
 * @param xmin: starting point on the x-axis
 * @param xmax: ending point on the x-axis
 * @param ymin: starting point on the y-axis
 * @param ymax: ending point on the y-axis
 */
void LCD_refreshArea(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax){
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	4611      	mov	r1, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	4623      	mov	r3, r4
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71bb      	strb	r3, [r7, #6]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	717b      	strb	r3, [r7, #5]
 8000e82:	4613      	mov	r3, r2
 8000e84:	713b      	strb	r3, [r7, #4]
  for(int i = 0; i < 6; i++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	e02f      	b.n	8000eec <LCD_refreshArea+0x84>
    if(i * 8 > ymax){
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	00da      	lsls	r2, r3, #3
 8000e90:	793b      	ldrb	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dc2e      	bgt.n	8000ef4 <LCD_refreshArea+0x8c>
      break;
    }
    //LCD_goXY(xmin, i);
    LCD_write(LCD_SETYADDR | i, LCD_COMMAND);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff41 	bl	8000d2c <LCD_write>
    LCD_write(LCD_SETXADDR | xmin, LCD_COMMAND);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff39 	bl	8000d2c <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	e00e      	b.n	8000ede <LCD_refreshArea+0x76>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2254      	movs	r2, #84	; 0x54
 8000ec4:	fb03 f202 	mul.w	r2, r3, r2
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <LCD_refreshArea+0x98>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff2a 	bl	8000d2c <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	797b      	ldrb	r3, [r7, #5]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	ddec      	ble.n	8000ec0 <LCD_refreshArea+0x58>
  for(int i = 0; i < 6; i++){
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	ddcc      	ble.n	8000e8c <LCD_refreshArea+0x24>
    }
  }
}
 8000ef2:	e000      	b.n	8000ef6 <LCD_refreshArea+0x8e>
      break;
 8000ef4:	bf00      	nop
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000214 	.word	0x20000214

08000f04 <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	4613      	mov	r3, r2
 8000f14:	717b      	strb	r3, [r7, #5]
  if(x >= LCD_WIDTH)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b53      	cmp	r3, #83	; 0x53
 8000f1a:	d901      	bls.n	8000f20 <LCD_setPixel+0x1c>
    x = LCD_WIDTH - 1;
 8000f1c:	2353      	movs	r3, #83	; 0x53
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if(y >= LCD_HEIGHT)
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b2f      	cmp	r3, #47	; 0x2f
 8000f24:	d901      	bls.n	8000f2a <LCD_setPixel+0x26>
    y = LCD_HEIGHT - 1;
 8000f26:	232f      	movs	r3, #47	; 0x2f
 8000f28:	71bb      	strb	r3, [r7, #6]
    
  if(pixel != false){
 8000f2a:	797b      	ldrb	r3, [r7, #5]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d01d      	beq.n	8000f6c <LCD_setPixel+0x68>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	b2d8      	uxtb	r0, r3
 8000f38:	4601      	mov	r1, r0
 8000f3a:	2354      	movs	r3, #84	; 0x54
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <LCD_setPixel+0xb4>)
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b259      	sxtb	r1, r3
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	2354      	movs	r3, #84	; 0x54
 8000f5e:	fb00 f303 	mul.w	r3, r0, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	b2c9      	uxtb	r1, r1
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <LCD_setPixel+0xb4>)
 8000f68:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8000f6a:	e01e      	b.n	8000faa <LCD_setPixel+0xa6>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	b2d8      	uxtb	r0, r3
 8000f74:	4601      	mov	r1, r0
 8000f76:	2354      	movs	r3, #84	; 0x54
 8000f78:	fb01 f303 	mul.w	r3, r1, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <LCD_setPixel+0xb4>)
 8000f80:	5cd3      	ldrb	r3, [r2, r3]
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	4013      	ands	r3, r2
 8000f98:	b259      	sxtb	r1, r3
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	2354      	movs	r3, #84	; 0x54
 8000f9e:	fb00 f303 	mul.w	r3, r0, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2c9      	uxtb	r1, r1
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <LCD_setPixel+0xb4>)
 8000fa8:	54d1      	strb	r1, [r2, r3]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000214 	.word	0x20000214

08000fbc <LCD_drawHLine>:
 * @brief Draws a horizontal line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void LCD_drawHLine(int x, int y, int l){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  int by, bi;

  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT)){
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db3a      	blt.n	8001044 <LCD_drawHLine+0x88>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b53      	cmp	r3, #83	; 0x53
 8000fd2:	dc37      	bgt.n	8001044 <LCD_drawHLine+0x88>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db34      	blt.n	8001044 <LCD_drawHLine+0x88>
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b2f      	cmp	r3, #47	; 0x2f
 8000fde:	dc31      	bgt.n	8001044 <LCD_drawHLine+0x88>
    for (int cx=0; cx<l; cx++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	e02a      	b.n	800103c <LCD_drawHLine+0x80>
      by=((y/8)*84)+x;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da00      	bge.n	8000fee <LCD_drawHLine+0x32>
 8000fec:	3307      	adds	r3, #7
 8000fee:	10db      	asrs	r3, r3, #3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2354      	movs	r3, #84	; 0x54
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      bi=y % 8;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	425a      	negs	r2, r3
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	f002 0207 	and.w	r2, r2, #7
 800100a:	bf58      	it	pl
 800100c:	4253      	negpl	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
      lcd.buffer[by+cx] |= (1<<bi);
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	4413      	add	r3, r2
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LCD_drawHLine+0x94>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	b25a      	sxtb	r2, r3
 800101c:	2101      	movs	r1, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	b25b      	sxtb	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b259      	sxtb	r1, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	4413      	add	r3, r2
 8001030:	b2c9      	uxtb	r1, r1
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <LCD_drawHLine+0x94>)
 8001034:	54d1      	strb	r1, [r2, r3]
    for (int cx=0; cx<l; cx++){
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbd0      	blt.n	8000fe6 <LCD_drawHLine+0x2a>
    }
  }
}
 8001044:	bf00      	nop
 8001046:	3724      	adds	r7, #36	; 0x24
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000214 	.word	0x20000214

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	; 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ac      	sub	sp, #176	; 0xb0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2288      	movs	r2, #136	; 0x88
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 feb3 	bl	8005e28 <memset>
  if(hadc->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <HAL_ADC_MspInit+0x120>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d172      	bne.n	80011b2 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010e2:	2308      	movs	r3, #8
 80010e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010e6:	2307      	movs	r3, #7
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 ffb1 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001108:	f7ff fd6c 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <HAL_ADC_MspInit+0x124>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <HAL_ADC_MspInit+0x124>)
 8001112:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_ADC_MspInit+0x124>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_ADC_MspInit+0x124>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_ADC_MspInit+0x124>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_ADC_MspInit+0x124>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800113c:	2350      	movs	r3, #80	; 0x50
 800113e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001142:	230b      	movs	r3, #11
 8001144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f001 ff44 	bl	8002fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_ADC_MspInit+0x12c>)
 8001160:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 800117c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001180:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 800118c:	2220      	movs	r2, #32
 800118e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 8001198:	f001 fd2c 	bl	8002bf4 <HAL_DMA_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80011a2:	f7ff fd1f 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 80011aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_ADC_MspInit+0x128>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	37b0      	adds	r7, #176	; 0xb0
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	50040000 	.word	0x50040000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	200000f4 	.word	0x200000f4
 80011c8:	40020008 	.word	0x40020008

080011cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_TIM_Base_MspInit+0x44>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d113      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_TIM_Base_MspInit+0x48>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_TIM_Base_MspInit+0x48>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_TIM_Base_MspInit+0x48>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	210a      	movs	r1, #10
 80011fa:	201d      	movs	r0, #29
 80011fc:	f001 fcc3 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001200:	201d      	movs	r0, #29
 8001202:	f001 fcdc 	bl	8002bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40000400 	.word	0x40000400
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0ac      	sub	sp, #176	; 0xb0
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2288      	movs	r2, #136	; 0x88
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fdf5 	bl	8005e28 <memset>
  if(huart->Instance==USART2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <HAL_UART_MspInit+0xb0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d13b      	bne.n	80012c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f002 ff05 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001260:	f7ff fcc0 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_UART_MspInit+0xb4>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_UART_MspInit+0xb4>)
 800126a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126e:	6593      	str	r3, [r2, #88]	; 0x58
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_UART_MspInit+0xb4>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_UART_MspInit+0xb4>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_UART_MspInit+0xb4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_UART_MspInit+0xb4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001294:	230c      	movs	r3, #12
 8001296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ac:	2307      	movs	r3, #7
 80012ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f001 fe92 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	37b0      	adds	r7, #176	; 0xb0
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40004400 	.word	0x40004400
 80012cc:	40021000 	.word	0x40021000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 f952 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA1_Channel1_IRQHandler+0x10>)
 800132a:	f001 fd7b 	bl	8002e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000f4 	.word	0x200000f4

08001338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <TIM3_IRQHandler+0x10>)
 800133e:	f003 fc15 	bl	8004b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000013c 	.word	0x2000013c

0800134c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e00a      	b.n	8001374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800135e:	f3af 8000 	nop.w
 8001362:	4601      	mov	r1, r0
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60ba      	str	r2, [r7, #8]
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbf0      	blt.n	800135e <_read+0x12>
  }

  return len;
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e009      	b.n	80013ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fbeb 	bl	8000b7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbf1      	blt.n	8001398 <_write+0x12>
  }
  return len;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_close>:

int _close(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e6:	605a      	str	r2, [r3, #4]
  return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_isatty>:

int _isatty(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f004 fcbc 	bl	8005dd4 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20018000 	.word	0x20018000
 8001488:	00000400 	.word	0x00000400
 800148c:	20000438 	.word	0x20000438
 8001490:	20000450 	.word	0x20000450

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ffea 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f004 fc7b 	bl	8005de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff f843 	bl	8000574 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014fc:	08006e60 	.word	0x08006e60
  ldr r2, =_sbss
 8001500:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001504:	20000450 	.word	0x20000450

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>
	...

0800150c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_Init+0x3c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_Init+0x3c>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001522:	2003      	movs	r0, #3
 8001524:	f001 fb24 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001528:	2000      	movs	r0, #0
 800152a:	f000 f80f 	bl	800154c <HAL_InitTick>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	e001      	b.n	800153e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153a:	f7ff fd8b 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800153e:	79fb      	ldrb	r3, [r7, #7]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_InitTick+0x6c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_InitTick+0x70>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f001 fb2f 	bl	8002bda <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d809      	bhi.n	800159c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f001 faf9 	bl	8002b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_InitTick+0x74>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e007      	b.n	80015ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e004      	b.n	80015ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e001      	b.n	80015ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	20000004 	.word	0x20000004
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	2000043c 	.word	0x2000043c

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000043c 	.word	0x2000043c

08001604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3360      	adds	r3, #96	; 0x60
 800167e:	461a      	mov	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <LL_ADC_SetOffset+0x44>)
 800168e:	4013      	ands	r3, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	4313      	orrs	r3, r2
 800169c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	03fff000 	.word	0x03fff000

080016b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3360      	adds	r3, #96	; 0x60
 80016c2:	461a      	mov	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3360      	adds	r3, #96	; 0x60
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	431a      	orrs	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3330      	adds	r3, #48	; 0x30
 800174c:	461a      	mov	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	4413      	add	r3, r2
 800175a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	211f      	movs	r1, #31
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0e9b      	lsrs	r3, r3, #26
 8001774:	f003 011f 	and.w	r1, r3, #31
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	431a      	orrs	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3314      	adds	r3, #20
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	0e5b      	lsrs	r3, r3, #25
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	4413      	add	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	0d1b      	lsrs	r3, r3, #20
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2107      	movs	r1, #7
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	401a      	ands	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0d1b      	lsrs	r3, r3, #20
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017de:	bf00      	nop
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0318 	and.w	r3, r3, #24
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001810:	40d9      	lsrs	r1, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	400b      	ands	r3, r1
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	431a      	orrs	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	0007ffff 	.word	0x0007ffff

08001834 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 031f 	and.w	r3, r3, #31
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6093      	str	r3, [r2, #8]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001888:	d101      	bne.n	800188e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018d8:	d101      	bne.n	80018de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <LL_ADC_IsEnabled+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_ADC_IsEnabled+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800194a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800194e:	f043 0204 	orr.w	r2, r3, #4
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b04      	cmp	r3, #4
 8001974:	d101      	bne.n	800197a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d101      	bne.n	80019a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e136      	b.n	8001c38 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fb5f 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff3f 	bl	8001874 <LL_ADC_IsDeepPowerDownEnabled>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff25 	bl	8001850 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff5a 	bl	80018c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff3e 	bl	800189c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a20:	4b87      	ldr	r3, [pc, #540]	; (8001c40 <HAL_ADC_Init+0x290>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	4a87      	ldr	r2, [pc, #540]	; (8001c44 <HAL_ADC_Init+0x294>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a34:	e002      	b.n	8001a3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff3c 	bl	80018c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	f043 0210 	orr.w	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff75 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001a78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 80cf 	bne.w	8001c26 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 80cb 	bne.w	8001c26 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a98:	f043 0202 	orr.w	r2, r3, #2
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff35 	bl	8001914 <LL_ADC_IsEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d115      	bne.n	8001adc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab0:	4865      	ldr	r0, [pc, #404]	; (8001c48 <HAL_ADC_Init+0x298>)
 8001ab2:	f7ff ff2f 	bl	8001914 <LL_ADC_IsEnabled>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4864      	ldr	r0, [pc, #400]	; (8001c4c <HAL_ADC_Init+0x29c>)
 8001aba:	f7ff ff2b 	bl	8001914 <LL_ADC_IsEnabled>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	431c      	orrs	r4, r3
 8001ac2:	4863      	ldr	r0, [pc, #396]	; (8001c50 <HAL_ADC_Init+0x2a0>)
 8001ac4:	f7ff ff26 	bl	8001914 <LL_ADC_IsEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4323      	orrs	r3, r4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	485f      	ldr	r0, [pc, #380]	; (8001c54 <HAL_ADC_Init+0x2a4>)
 8001ad8:	f7ff fd94 	bl	8001604 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7e5b      	ldrb	r3, [r3, #25]
 8001ae0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ae6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001aec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001af2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001afa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d106      	bne.n	8001b18 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	045b      	lsls	r3, r3, #17
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_ADC_Init+0x2a8>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff08 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001b52:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff15 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8001b5e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d13d      	bne.n	8001be2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d13a      	bne.n	8001be2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b70:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b78:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b88:	f023 0302 	bic.w	r3, r3, #2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	69b9      	ldr	r1, [r7, #24]
 8001b92:	430b      	orrs	r3, r1
 8001b94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d118      	bne.n	8001bd2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb6:	4311      	orrs	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	e007      	b.n	8001be2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10c      	bne.n	8001c04 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	f023 010f 	bic.w	r1, r3, #15
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
 8001c02:	e007      	b.n	8001c14 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020f 	bic.w	r2, r2, #15
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f023 0303 	bic.w	r3, r3, #3
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54
 8001c24:	e007      	b.n	8001c36 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f043 0210 	orr.w	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3724      	adds	r7, #36	; 0x24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	20000004 	.word	0x20000004
 8001c44:	053e2d63 	.word	0x053e2d63
 8001c48:	50040000 	.word	0x50040000
 8001c4c:	50040100 	.word	0x50040100
 8001c50:	50040200 	.word	0x50040200
 8001c54:	50040300 	.word	0x50040300
 8001c58:	fff0c007 	.word	0xfff0c007

08001c5c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c68:	4853      	ldr	r0, [pc, #332]	; (8001db8 <HAL_ADC_Start_DMA+0x15c>)
 8001c6a:	f7ff fde3 	bl	8001834 <LL_ADC_GetMultimode>
 8001c6e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fe74 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 8093 	bne.w	8001da8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_Start_DMA+0x34>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e08e      	b.n	8001dae <HAL_ADC_Start_DMA+0x152>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <HAL_ADC_Start_DMA+0x160>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d008      	beq.n	8001cb4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d002      	beq.n	8001cb4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d172      	bne.n	8001d9a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fc9b 	bl	80025f0 <ADC_Enable>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d165      	bne.n	8001d90 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <HAL_ADC_Start_DMA+0x164>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_Start_DMA+0x8c>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_Start_DMA+0x8e>
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_ADC_Start_DMA+0x168>)
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d002      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	f023 0206 	bic.w	r2, r3, #6
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_ADC_Start_DMA+0x16c>)
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <HAL_ADC_Start_DMA+0x170>)
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <HAL_ADC_Start_DMA+0x174>)
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	221c      	movs	r2, #28
 8001d42:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0210 	orr.w	r2, r2, #16
 8001d5a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3340      	adds	r3, #64	; 0x40
 8001d76:	4619      	mov	r1, r3
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f000 fff2 	bl	8002d64 <HAL_DMA_Start_IT>
 8001d80:	4603      	mov	r3, r0
 8001d82:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fdd6 	bl	800193a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d8e:	e00d      	b.n	8001dac <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d98:	e008      	b.n	8001dac <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001da6:	e001      	b.n	8001dac <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
 8001daa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	50040300 	.word	0x50040300
 8001dbc:	50040200 	.word	0x50040200
 8001dc0:	50040100 	.word	0x50040100
 8001dc4:	50040000 	.word	0x50040000
 8001dc8:	080026fd 	.word	0x080026fd
 8001dcc:	080027d5 	.word	0x080027d5
 8001dd0:	080027f1 	.word	0x080027f1

08001dd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0b6      	sub	sp, #216	; 0xd8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x22>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e3c7      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x7b2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fd8f 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 83a8 	bne.w	800259c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d824      	bhi.n	8001e9e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	3b02      	subs	r3, #2
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d81b      	bhi.n	8001e96 <HAL_ADC_ConfigChannel+0x86>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <HAL_ADC_ConfigChannel+0x54>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e7d 	.word	0x08001e7d
 8001e6c:	08001e85 	.word	0x08001e85
 8001e70:	08001e8d 	.word	0x08001e8d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	220c      	movs	r2, #12
 8001e78:	605a      	str	r2, [r3, #4]
          break;
 8001e7a:	e011      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2212      	movs	r2, #18
 8001e80:	605a      	str	r2, [r3, #4]
          break;
 8001e82:	e00d      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2218      	movs	r2, #24
 8001e88:	605a      	str	r2, [r3, #4]
          break;
 8001e8a:	e009      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e92:	605a      	str	r2, [r3, #4]
          break;
 8001e94:	e004      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2206      	movs	r2, #6
 8001e9a:	605a      	str	r2, [r3, #4]
          break;
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e9e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	f7ff fc45 	bl	800173c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd53 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001ebc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fd5f 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8001eca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ece:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 81a6 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 81a1 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f7ff fc50 	bl	8001794 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d00a      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f26:	f7ff fba1 	bl	800166c <LL_ADC_SetOffset>
 8001f2a:	e17b      	b.n	8002224 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fbbe 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x148>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fbb3 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	f003 021f 	and.w	r2, r3, #31
 8001f56:	e01e      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x186>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fba8 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e004      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x19e>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d0>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e004      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb77 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fb5b 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x20e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb50 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	e01e      	b.n	800205c <HAL_ADC_ConfigChannel+0x24c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fb45 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800203c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e004      	b.n	800205a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x264>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	e018      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x296>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002088:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800208c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e004      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800209c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d106      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb14 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff faf8 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x2d4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2102      	movs	r1, #2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff faed 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	e01e      	b.n	8002122 <HAL_ADC_ConfigChannel+0x312>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fae2 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800210a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e004      	b.n	8002120 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_ADC_ConfigChannel+0x32a>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	e016      	b.n	8002168 <HAL_ADC_ConfigChannel+0x358>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800214c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800214e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800215a:	2320      	movs	r3, #32
 800215c:	e004      	b.n	8002168 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800215e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002168:	429a      	cmp	r2, r3
 800216a:	d106      	bne.n	800217a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	2102      	movs	r1, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fab3 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2103      	movs	r1, #3
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fa97 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x396>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2103      	movs	r1, #3
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fa8c 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	e017      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x3c6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2103      	movs	r1, #3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa81 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e003      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80021cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x3de>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	e011      	b.n	8002212 <HAL_ADC_ConfigChannel+0x402>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e003      	b.n	8002212 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002212:	429a      	cmp	r2, r3
 8002214:	d106      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	2103      	movs	r1, #3
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fa5e 	bl	80016e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fb73 	bl	8001914 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 813f 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	461a      	mov	r2, r3
 8002244:	f7ff fad2 	bl	80017ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a8e      	ldr	r2, [pc, #568]	; (8002488 <HAL_ADC_ConfigChannel+0x678>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 8130 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <HAL_ADC_ConfigChannel+0x46c>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b09      	cmp	r3, #9
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e019      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x4a0>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800228a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800228e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	bf94      	ite	ls
 80022aa:	2301      	movls	r3, #1
 80022ac:	2300      	movhi	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d079      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x4c0>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	3301      	adds	r3, #1
 80022c8:	069b      	lsls	r3, r3, #26
 80022ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ce:	e015      	b.n	80022fc <HAL_ADC_ConfigChannel+0x4ec>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_ConfigChannel+0x50c>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	e017      	b.n	800234c <HAL_ADC_ConfigChannel+0x53c>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e003      	b.n	8002340 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	ea42 0103 	orr.w	r1, r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x562>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	051b      	lsls	r3, r3, #20
 8002370:	e018      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x594>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a4:	430b      	orrs	r3, r1
 80023a6:	e080      	b.n	80024aa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x5b4>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	3301      	adds	r3, #1
 80023bc:	069b      	lsls	r3, r3, #26
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c2:	e015      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x5e0>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x600>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	3301      	adds	r3, #1
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	e017      	b.n	8002440 <HAL_ADC_ConfigChannel+0x630>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	61fb      	str	r3, [r7, #28]
  return result;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e003      	b.n	8002434 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10d      	bne.n	800246c <HAL_ADC_ConfigChannel+0x65c>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	3b1e      	subs	r3, #30
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800246a:	e01d      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x698>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	613b      	str	r3, [r7, #16]
  return result;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e005      	b.n	8002494 <HAL_ADC_ConfigChannel+0x684>
 8002488:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	3b1e      	subs	r3, #30
 80024a2:	051b      	lsls	r3, r3, #20
 80024a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a8:	430b      	orrs	r3, r1
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	6892      	ldr	r2, [r2, #8]
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7ff f970 	bl	8001794 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_ADC_ConfigChannel+0x7bc>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d07a      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c0:	4843      	ldr	r0, [pc, #268]	; (80025d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80024c2:	f7ff f8c5 	bl	8001650 <LL_ADC_GetCommonPathInternalCh>
 80024c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a41      	ldr	r2, [pc, #260]	; (80025d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d12c      	bne.n	800252e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d126      	bne.n	800252e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x6e4>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <HAL_ADC_ConfigChannel+0x7cc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d15d      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024fc:	4619      	mov	r1, r3
 80024fe:	4834      	ldr	r0, [pc, #208]	; (80025d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002500:	f7ff f893 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800251e:	e002      	b.n	8002526 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3b01      	subs	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f9      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800252c:	e040      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d118      	bne.n	800256a <HAL_ADC_ConfigChannel+0x75a>
 8002538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d112      	bne.n	800256a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <HAL_ADC_ConfigChannel+0x7c8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x748>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_ADC_ConfigChannel+0x7cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d12d      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800255c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002560:	4619      	mov	r1, r3
 8002562:	481b      	ldr	r0, [pc, #108]	; (80025d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002564:	f7ff f861 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002568:	e024      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_ADC_ConfigChannel+0x7dc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d120      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d115      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800258a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800258e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002592:	4619      	mov	r1, r3
 8002594:	480e      	ldr	r0, [pc, #56]	; (80025d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002596:	f7ff f848 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
 800259a:	e00c      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	37d8      	adds	r7, #216	; 0xd8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	80080000 	.word	0x80080000
 80025d0:	50040300 	.word	0x50040300
 80025d4:	c7520000 	.word	0xc7520000
 80025d8:	50040000 	.word	0x50040000
 80025dc:	50040200 	.word	0x50040200
 80025e0:	20000004 	.word	0x20000004
 80025e4:	053e2d63 	.word	0x053e2d63
 80025e8:	cb840000 	.word	0xcb840000
 80025ec:	80000001 	.word	0x80000001

080025f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f987 	bl	8001914 <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d169      	bne.n	80026e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <ADC_Enable+0xfc>)
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e055      	b.n	80026e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f956 	bl	80018ec <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002640:	482b      	ldr	r0, [pc, #172]	; (80026f0 <ADC_Enable+0x100>)
 8002642:	f7ff f805 	bl	8001650 <LL_ADC_GetCommonPathInternalCh>
 8002646:	4603      	mov	r3, r0
 8002648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <ADC_Enable+0x104>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <ADC_Enable+0x108>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800266a:	e002      	b.n	8002672 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	3b01      	subs	r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002678:	f7fe ffb8 	bl	80015ec <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800267e:	e028      	b.n	80026d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff f945 	bl	8001914 <LL_ADC_IsEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f929 	bl	80018ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269a:	f7fe ffa7 	bl	80015ec <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d914      	bls.n	80026d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d00d      	beq.n	80026d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d1cf      	bne.n	8002680 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	8000003f 	.word	0x8000003f
 80026f0:	50040300 	.word	0x50040300
 80026f4:	20000004 	.word	0x20000004
 80026f8:	053e2d63 	.word	0x053e2d63

080026fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002712:	2b00      	cmp	r3, #0
 8002714:	d14b      	bne.n	80027ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d021      	beq.n	8002774 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe ffee 	bl	8001716 <LL_ADC_REG_IsTriggerSourceSWStart>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d032      	beq.n	80027a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12b      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11f      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
 8002772:	e018      	b.n	80027a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d111      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fb14 	bl	8001dd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027ac:	e00e      	b.n	80027cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fb1e 	bl	8001dfc <HAL_ADC_ErrorCallback>
}
 80027c0:	e004      	b.n	80027cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff fb00 	bl	8001de8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f043 0204 	orr.w	r2, r3, #4
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff faf0 	bl	8001dfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <LL_ADC_IsEnabled>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <LL_ADC_IsEnabled+0x18>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <LL_ADC_IsEnabled+0x1a>
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_REG_IsConversionOngoing>:
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b04      	cmp	r3, #4
 800285c:	d101      	bne.n	8002862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b09f      	sub	sp, #124	; 0x7c
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800288a:	2302      	movs	r3, #2
 800288c:	e093      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002896:	2300      	movs	r3, #0
 8002898:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800289a:	2300      	movs	r3, #0
 800289c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d102      	bne.n	80028ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028a8:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	e001      	b.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e072      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffb9 	bl	800284a <LL_ADC_REG_IsConversionOngoing>
 80028d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ffb3 	bl	800284a <LL_ADC_REG_IsConversionOngoing>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d154      	bne.n	8002994 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d151      	bne.n	8002994 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80028f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d02c      	beq.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800290e:	035b      	lsls	r3, r3, #13
 8002910:	430b      	orrs	r3, r1
 8002912:	431a      	orrs	r2, r3
 8002914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002916:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002918:	4829      	ldr	r0, [pc, #164]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800291a:	f7ff ff83 	bl	8002824 <LL_ADC_IsEnabled>
 800291e:	4604      	mov	r4, r0
 8002920:	4828      	ldr	r0, [pc, #160]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002922:	f7ff ff7f 	bl	8002824 <LL_ADC_IsEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	431c      	orrs	r4, r3
 800292a:	4828      	ldr	r0, [pc, #160]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800292c:	f7ff ff7a 	bl	8002824 <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	4323      	orrs	r3, r4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d137      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002940:	f023 030f 	bic.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6811      	ldr	r1, [r2, #0]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	430a      	orrs	r2, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002952:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002954:	e028      	b.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002960:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002962:	4817      	ldr	r0, [pc, #92]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002964:	f7ff ff5e 	bl	8002824 <LL_ADC_IsEnabled>
 8002968:	4604      	mov	r4, r0
 800296a:	4816      	ldr	r0, [pc, #88]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800296c:	f7ff ff5a 	bl	8002824 <LL_ADC_IsEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	431c      	orrs	r4, r3
 8002974:	4815      	ldr	r0, [pc, #84]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002976:	f7ff ff55 	bl	8002824 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	4323      	orrs	r3, r4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d112      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800298a:	f023 030f 	bic.w	r3, r3, #15
 800298e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002990:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002992:	e009      	b.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f043 0220 	orr.w	r2, r3, #32
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029a6:	e000      	b.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	377c      	adds	r7, #124	; 0x7c
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	bf00      	nop
 80029c0:	50040000 	.word	0x50040000
 80029c4:	50040100 	.word	0x50040100
 80029c8:	50040300 	.word	0x50040300
 80029cc:	50040200 	.word	0x50040200

080029d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a02:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	60d3      	str	r3, [r2, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
         );
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff8e 	bl	8002a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff29 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b98:	f7ff ff3e 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff ff8e 	bl	8002ac4 <NVIC_EncodePriority>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff5d 	bl	8002a70 <__NVIC_SetPriority>
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff31 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ffa2 	bl	8002b2c <SysTick_Config>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e098      	b.n	8002d38 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <HAL_DMA_Init+0x150>)
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d80f      	bhi.n	8002c32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <HAL_DMA_Init+0x154>)
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a4b      	ldr	r2, [pc, #300]	; (8002d4c <HAL_DMA_Init+0x158>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	009a      	lsls	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <HAL_DMA_Init+0x15c>)
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c30:	e00e      	b.n	8002c50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_DMA_Init+0x160>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a43      	ldr	r2, [pc, #268]	; (8002d4c <HAL_DMA_Init+0x158>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	009a      	lsls	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a42      	ldr	r2, [pc, #264]	; (8002d58 <HAL_DMA_Init+0x164>)
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002caa:	d039      	beq.n	8002d20 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_DMA_Init+0x15c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d11a      	bne.n	8002cec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <HAL_DMA_Init+0x168>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f003 031c 	and.w	r3, r3, #28
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4924      	ldr	r1, [pc, #144]	; (8002d5c <HAL_DMA_Init+0x168>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_DMA_Init+0x168>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	f003 031c 	and.w	r3, r3, #28
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	491d      	ldr	r1, [pc, #116]	; (8002d5c <HAL_DMA_Init+0x168>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
 8002cea:	e019      	b.n	8002d20 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <HAL_DMA_Init+0x16c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f003 031c 	and.w	r3, r3, #28
 8002cf8:	210f      	movs	r1, #15
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	4917      	ldr	r1, [pc, #92]	; (8002d60 <HAL_DMA_Init+0x16c>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_DMA_Init+0x16c>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f003 031c 	and.w	r3, r3, #28
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	4911      	ldr	r1, [pc, #68]	; (8002d60 <HAL_DMA_Init+0x16c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40020407 	.word	0x40020407
 8002d48:	bffdfff8 	.word	0xbffdfff8
 8002d4c:	cccccccd 	.word	0xcccccccd
 8002d50:	40020000 	.word	0x40020000
 8002d54:	bffdfbf8 	.word	0xbffdfbf8
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	400200a8 	.word	0x400200a8
 8002d60:	400204a8 	.word	0x400204a8

08002d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Start_IT+0x20>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e04b      	b.n	8002e1c <HAL_DMA_Start_IT+0xb8>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d13a      	bne.n	8002e0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f8e0 	bl	8002f82 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 020e 	orr.w	r2, r2, #14
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e00f      	b.n	8002dfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 020a 	orr.w	r2, r2, #10
 8002dfa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e005      	b.n	8002e1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
 8002e18:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f003 031c 	and.w	r3, r3, #28
 8002e44:	2204      	movs	r2, #4
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d026      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x7a>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d021      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0204 	bic.w	r2, r2, #4
 8002e76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f003 021c 	and.w	r2, r3, #28
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2104      	movs	r1, #4
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d071      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002e9c:	e06c      	b.n	8002f78 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f003 031c 	and.w	r3, r3, #28
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d02e      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xec>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d029      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 020a 	bic.w	r2, r2, #10
 8002ed8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 021c 	and.w	r2, r3, #28
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2102      	movs	r1, #2
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d038      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f0e:	e033      	b.n	8002f78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f003 031c 	and.w	r3, r3, #28
 8002f18:	2208      	movs	r2, #8
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02a      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x156>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d025      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020e 	bic.w	r2, r2, #14
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f003 021c 	and.w	r2, r3, #28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
}
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 021c 	and.w	r2, r3, #28
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d108      	bne.n	8002fc6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fc4:	e007      	b.n	8002fd6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	60da      	str	r2, [r3, #12]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff2:	e17f      	b.n	80032f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8171 	beq.w	80032ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d005      	beq.n	8003024 <HAL_GPIO_Init+0x40>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d130      	bne.n	8003086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305a:	2201      	movs	r2, #1
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 0201 	and.w	r2, r3, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d118      	bne.n	80030c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003098:	2201      	movs	r2, #1
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f003 0201 	and.w	r2, r3, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d017      	beq.n	8003100 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d123      	bne.n	8003154 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	08da      	lsrs	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3208      	adds	r2, #8
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	220f      	movs	r2, #15
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	6939      	ldr	r1, [r7, #16]
 8003150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0203 	and.w	r2, r3, #3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80ac 	beq.w	80032ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_GPIO_Init+0x330>)
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	4a5e      	ldr	r2, [pc, #376]	; (8003314 <HAL_GPIO_Init+0x330>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6613      	str	r3, [r2, #96]	; 0x60
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_GPIO_Init+0x330>)
 80031a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ae:	4a5a      	ldr	r2, [pc, #360]	; (8003318 <HAL_GPIO_Init+0x334>)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031d8:	d025      	beq.n	8003226 <HAL_GPIO_Init+0x242>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4f      	ldr	r2, [pc, #316]	; (800331c <HAL_GPIO_Init+0x338>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <HAL_GPIO_Init+0x23e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4e      	ldr	r2, [pc, #312]	; (8003320 <HAL_GPIO_Init+0x33c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d019      	beq.n	800321e <HAL_GPIO_Init+0x23a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_GPIO_Init+0x340>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0x236>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4c      	ldr	r2, [pc, #304]	; (8003328 <HAL_GPIO_Init+0x344>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_GPIO_Init+0x232>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4b      	ldr	r2, [pc, #300]	; (800332c <HAL_GPIO_Init+0x348>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_Init+0x22e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <HAL_GPIO_Init+0x34c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_GPIO_Init+0x22a>
 800320a:	2306      	movs	r3, #6
 800320c:	e00c      	b.n	8003228 <HAL_GPIO_Init+0x244>
 800320e:	2307      	movs	r3, #7
 8003210:	e00a      	b.n	8003228 <HAL_GPIO_Init+0x244>
 8003212:	2305      	movs	r3, #5
 8003214:	e008      	b.n	8003228 <HAL_GPIO_Init+0x244>
 8003216:	2304      	movs	r3, #4
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x244>
 800321a:	2303      	movs	r3, #3
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x244>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x244>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x244>
 8003226:	2300      	movs	r3, #0
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	f002 0203 	and.w	r2, r2, #3
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4093      	lsls	r3, r2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003238:	4937      	ldr	r1, [pc, #220]	; (8003318 <HAL_GPIO_Init+0x334>)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_GPIO_Init+0x350>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800326a:	4a32      	ldr	r2, [pc, #200]	; (8003334 <HAL_GPIO_Init+0x350>)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_GPIO_Init+0x350>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <HAL_GPIO_Init+0x350>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_GPIO_Init+0x350>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032be:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_GPIO_Init+0x350>)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_GPIO_Init+0x350>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_GPIO_Init+0x350>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3301      	adds	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f47f ae78 	bne.w	8002ff4 <HAL_GPIO_Init+0x10>
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	40010000 	.word	0x40010000
 800331c:	48000400 	.word	0x48000400
 8003320:	48000800 	.word	0x48000800
 8003324:	48000c00 	.word	0x48000c00
 8003328:	48001000 	.word	0x48001000
 800332c:	48001400 	.word	0x48001400
 8003330:	48001800 	.word	0x48001800
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003354:	e002      	b.n	800335c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	43d9      	mvns	r1, r3
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	400b      	ands	r3, r1
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40007000 	.word	0x40007000

080033b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c6:	d130      	bne.n	800342a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d4:	d038      	beq.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033de:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2232      	movs	r2, #50	; 0x32
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0c9b      	lsrs	r3, r3, #18
 80033f8:	3301      	adds	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033fc:	e002      	b.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3b01      	subs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d102      	bne.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f2      	bne.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d110      	bne.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e00f      	b.n	800344a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d007      	beq.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003440:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003446:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40007000 	.word	0x40007000
 800345c:	20000004 	.word	0x20000004
 8003460:	431bde83 	.word	0x431bde83

08003464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e3ca      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4b97      	ldr	r3, [pc, #604]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	4b94      	ldr	r3, [pc, #592]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80e4 	beq.w	8003660 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_RCC_OscConfig+0x4a>
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	f040 808b 	bne.w	80035bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f040 8087 	bne.w	80035bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ae:	4b89      	ldr	r3, [pc, #548]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x62>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e3a2      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1a      	ldr	r2, [r3, #32]
 80034ca:	4b82      	ldr	r3, [pc, #520]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d004      	beq.n	80034e0 <HAL_RCC_OscConfig+0x7c>
 80034d6:	4b7f      	ldr	r3, [pc, #508]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034de:	e005      	b.n	80034ec <HAL_RCC_OscConfig+0x88>
 80034e0:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d223      	bcs.n	8003538 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fd55 	bl	8003fa4 <RCC_SetFlashLatencyFromMSIRange>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e383      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003504:	4b73      	ldr	r3, [pc, #460]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b70      	ldr	r3, [pc, #448]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	496d      	ldr	r1, [pc, #436]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	4968      	ldr	r1, [pc, #416]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
 8003536:	e025      	b.n	8003584 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a65      	ldr	r2, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800353e:	f043 0308 	orr.w	r3, r3, #8
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4960      	ldr	r1, [pc, #384]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	495b      	ldr	r1, [pc, #364]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fd15 	bl	8003fa4 <RCC_SetFlashLatencyFromMSIRange>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e343      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003584:	f000 fc4a 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b52      	ldr	r3, [pc, #328]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	4950      	ldr	r1, [pc, #320]	; (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
 80035a0:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_RCC_OscConfig+0x278>)
 80035a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035a4:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd ffcf 	bl	800154c <HAL_InitTick>
 80035ae:	4603      	mov	r3, r0
 80035b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d052      	beq.n	800365e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	e327      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d032      	beq.n	800362a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035c4:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a42      	ldr	r2, [pc, #264]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035d0:	f7fe f80c 	bl	80015ec <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035d8:	f7fe f808 	bl	80015ec <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e310      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ea:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a36      	ldr	r2, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80035fc:	f043 0308 	orr.w	r3, r3, #8
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4931      	ldr	r1, [pc, #196]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003614:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	492c      	ldr	r1, [pc, #176]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
 8003628:	e01a      	b.n	8003660 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800362a:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003636:	f7fd ffd9 	bl	80015ec <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800363e:	f7fd ffd5 	bl	80015ec <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e2dd      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f0      	bne.n	800363e <HAL_RCC_OscConfig+0x1da>
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800365e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d074      	beq.n	8003756 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x21a>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d10e      	bne.n	8003696 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d10b      	bne.n	8003696 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d064      	beq.n	8003754 <HAL_RCC_OscConfig+0x2f0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d160      	bne.n	8003754 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e2ba      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x24a>
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e026      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b6:	d115      	bne.n	80036e4 <HAL_RCC_OscConfig+0x280>
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80036be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a02      	ldr	r2, [pc, #8]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08006d70 	.word	0x08006d70
 80036dc:	20000004 	.word	0x20000004
 80036e0:	20000008 	.word	0x20000008
 80036e4:	4ba0      	ldr	r3, [pc, #640]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a9f      	ldr	r2, [pc, #636]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4b9d      	ldr	r3, [pc, #628]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a9c      	ldr	r2, [pc, #624]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd ff72 	bl	80015ec <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fd ff6e 	bl	80015ec <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e276      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800371e:	4b92      	ldr	r3, [pc, #584]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x2a8>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fd ff5e 	bl	80015ec <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003734:	f7fd ff5a 	bl	80015ec <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e262      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003746:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x2d0>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d060      	beq.n	8003824 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d005      	beq.n	8003774 <HAL_RCC_OscConfig+0x310>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d119      	bne.n	80037a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d116      	bne.n	80037a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003774:	4b7c      	ldr	r3, [pc, #496]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_OscConfig+0x328>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e23f      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4b76      	ldr	r3, [pc, #472]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	4973      	ldr	r1, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a0:	e040      	b.n	8003824 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d023      	beq.n	80037f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037aa:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6e      	ldr	r2, [pc, #440]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fd ff19 	bl	80015ec <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7fd ff15 	bl	80015ec <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e21d      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d0:	4b65      	ldr	r3, [pc, #404]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037dc:	4b62      	ldr	r3, [pc, #392]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	495f      	ldr	r1, [pc, #380]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
 80037f0:	e018      	b.n	8003824 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f2:	4b5d      	ldr	r3, [pc, #372]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5c      	ldr	r2, [pc, #368]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80037f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd fef5 	bl	80015ec <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003806:	f7fd fef1 	bl	80015ec <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1f9      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d03c      	beq.n	80038aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01c      	beq.n	8003872 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003838:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fed0 	bl	80015ec <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fd fecc 	bl	80015ec <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1d4      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ef      	beq.n	8003850 <HAL_RCC_OscConfig+0x3ec>
 8003870:	e01b      	b.n	80038aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003872:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003878:	4a3b      	ldr	r2, [pc, #236]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fd feb3 	bl	80015ec <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388a:	f7fd feaf 	bl	80015ec <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1b7      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800389c:	4b32      	ldr	r3, [pc, #200]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ef      	bne.n	800388a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80a6 	beq.w	8003a04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b8:	2300      	movs	r3, #0
 80038ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	4a26      	ldr	r2, [pc, #152]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	; 0x58
 80038d4:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e0:	2301      	movs	r3, #1
 80038e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <HAL_RCC_OscConfig+0x508>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d118      	bne.n	8003922 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <HAL_RCC_OscConfig+0x508>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_RCC_OscConfig+0x508>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fc:	f7fd fe76 	bl	80015ec <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fd fe72 	bl	80015ec <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e17a      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_RCC_OscConfig+0x508>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d108      	bne.n	800393c <HAL_RCC_OscConfig+0x4d8>
 800392a:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393a:	e029      	b.n	8003990 <HAL_RCC_OscConfig+0x52c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d115      	bne.n	8003970 <HAL_RCC_OscConfig+0x50c>
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	4a03      	ldr	r2, [pc, #12]	; (8003968 <HAL_RCC_OscConfig+0x504>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003964:	e014      	b.n	8003990 <HAL_RCC_OscConfig+0x52c>
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
 8003970:	4b9c      	ldr	r3, [pc, #624]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	4a9b      	ldr	r2, [pc, #620]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003980:	4b98      	ldr	r3, [pc, #608]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	4a97      	ldr	r2, [pc, #604]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d016      	beq.n	80039c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fd fe28 	bl	80015ec <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7fd fe24 	bl	80015ec <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e12a      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b6:	4b8b      	ldr	r3, [pc, #556]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ed      	beq.n	80039a0 <HAL_RCC_OscConfig+0x53c>
 80039c4:	e015      	b.n	80039f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd fe11 	bl	80015ec <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f7fd fe0d 	bl	80015ec <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e113      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e4:	4b7f      	ldr	r3, [pc, #508]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1ed      	bne.n	80039ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f2:	7ffb      	ldrb	r3, [r7, #31]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	4b7a      	ldr	r3, [pc, #488]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	4a79      	ldr	r2, [pc, #484]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 80039fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80fe 	beq.w	8003c0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	f040 80d0 	bne.w	8003bb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a18:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0203 	and.w	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d130      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	3b01      	subs	r3, #1
 8003a38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d127      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d11f      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a58:	2a07      	cmp	r2, #7
 8003a5a:	bf14      	ite	ne
 8003a5c:	2201      	movne	r2, #1
 8003a5e:	2200      	moveq	r2, #0
 8003a60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d113      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d06e      	beq.n	8003b6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d069      	beq.n	8003b68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a94:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0ad      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003abc:	f7fd fd96 	bl	80015ec <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fd92 	bl	80015ec <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e09a      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad6:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae2:	4b40      	ldr	r3, [pc, #256]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCC_OscConfig+0x784>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003af2:	3a01      	subs	r2, #1
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003afc:	0212      	lsls	r2, r2, #8
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b04:	0852      	lsrs	r2, r2, #1
 8003b06:	3a01      	subs	r2, #1
 8003b08:	0552      	lsls	r2, r2, #21
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b10:	0852      	lsrs	r2, r2, #1
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0652      	lsls	r2, r2, #25
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b1c:	0912      	lsrs	r2, r2, #4
 8003b1e:	0452      	lsls	r2, r2, #17
 8003b20:	430a      	orrs	r2, r1
 8003b22:	4930      	ldr	r1, [pc, #192]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b28:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b40:	f7fd fd54 	bl	80015ec <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fd50 	bl	80015ec <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e058      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5a:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b66:	e050      	b.n	8003c0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e04f      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d148      	bne.n	8003c0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b90:	f7fd fd2c 	bl	80015ec <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fd fd28 	bl	80015ec <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e030      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x734>
 8003bb6:	e028      	b.n	8003c0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d023      	beq.n	8003c06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <HAL_RCC_OscConfig+0x780>)
 8003bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd fd0f 	bl	80015ec <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd0:	e00c      	b.n	8003bec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fd fd0b 	bl	80015ec <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d905      	bls.n	8003bec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e013      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
 8003be4:	40021000 	.word	0x40021000
 8003be8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x7b0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ec      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_OscConfig+0x7b0>)
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	4905      	ldr	r1, [pc, #20]	; (8003c14 <HAL_RCC_OscConfig+0x7b0>)
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x7b4>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60cb      	str	r3, [r1, #12]
 8003c04:	e001      	b.n	8003c0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	feeefffc 	.word	0xfeeefffc

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0e7      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 0207 	bic.w	r2, r3, #7
 8003c46:	4970      	ldr	r1, [pc, #448]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b6e      	ldr	r3, [pc, #440]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0cf      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d908      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b63      	ldr	r3, [pc, #396]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4960      	ldr	r1, [pc, #384]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d04c      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b5a      	ldr	r3, [pc, #360]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d121      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0a6      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d115      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e09a      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cd2:	4b4e      	ldr	r3, [pc, #312]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e08e      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e086      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cf2:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f023 0203 	bic.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4943      	ldr	r1, [pc, #268]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fd fc72 	bl	80015ec <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0c:	f7fd fc6e 	bl	80015ec <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e06e      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 020c 	and.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d1eb      	bne.n	8003d0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d208      	bcs.n	8003d62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	492b      	ldr	r1, [pc, #172]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d62:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d210      	bcs.n	8003d92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 0207 	bic.w	r2, r3, #7
 8003d78:	4923      	ldr	r1, [pc, #140]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d80:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e036      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4918      	ldr	r1, [pc, #96]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4910      	ldr	r1, [pc, #64]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dd0:	f000 f824 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	490b      	ldr	r1, [pc, #44]	; (8003e10 <HAL_RCC_ClockConfig+0x1f4>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1f8>)
 8003dee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_ClockConfig+0x1fc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fd fba9 	bl	800154c <HAL_InitTick>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dfe:	7afb      	ldrb	r3, [r7, #11]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40022000 	.word	0x40022000
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08006d70 	.word	0x08006d70
 8003e14:	20000004 	.word	0x20000004
 8003e18:	20000008 	.word	0x20000008

08003e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x34>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d121      	bne.n	8003e8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d11e      	bne.n	8003e8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e50:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e5c:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e005      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e6c:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e78:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10d      	bne.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d102      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e004      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ea2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d134      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d003      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ec0:	e005      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ec4:	617b      	str	r3, [r7, #20]
      break;
 8003ec6:	e005      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eca:	617b      	str	r3, [r7, #20]
      break;
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	617b      	str	r3, [r7, #20]
      break;
 8003ed2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	3301      	adds	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ee2:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	fb03 f202 	mul.w	r2, r3, r2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	0e5b      	lsrs	r3, r3, #25
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	3301      	adds	r3, #1
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f14:	69bb      	ldr	r3, [r7, #24]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	; 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	08006d88 	.word	0x08006d88
 8003f2c:	00f42400 	.word	0x00f42400
 8003f30:	007a1200 	.word	0x007a1200

08003f34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f50:	f7ff fff0 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4904      	ldr	r1, [pc, #16]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000
 8003f74:	08006d80 	.word	0x08006d80

08003f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f7c:	f7ff ffda 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0adb      	lsrs	r3, r3, #11
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4904      	ldr	r1, [pc, #16]	; (8003fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	08006d80 	.word	0x08006d80

08003fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fbc:	f7ff f9ee 	bl	800339c <HAL_PWREx_GetVoltageRange>
 8003fc0:	6178      	str	r0, [r7, #20]
 8003fc2:	e014      	b.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fdc:	f7ff f9de 	bl	800339c <HAL_PWREx_GetVoltageRange>
 8003fe0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d10b      	bne.n	800400e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d919      	bls.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2ba0      	cmp	r3, #160	; 0xa0
 8004000:	d902      	bls.n	8004008 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004002:	2302      	movs	r3, #2
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e013      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004008:	2301      	movs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e010      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d902      	bls.n	800401a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004014:	2303      	movs	r3, #3
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e00a      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d102      	bne.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004020:	2302      	movs	r3, #2
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e004      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b70      	cmp	r3, #112	; 0x70
 800402a:	d101      	bne.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800402c:	2301      	movs	r3, #1
 800402e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 0207 	bic.w	r2, r3, #7
 8004038:	4909      	ldr	r1, [pc, #36]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	40022000 	.word	0x40022000

08004064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800406c:	2300      	movs	r3, #0
 800406e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004070:	2300      	movs	r3, #0
 8004072:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407c:	2b00      	cmp	r3, #0
 800407e:	d041      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004088:	d02a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800408a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800408e:	d824      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409a:	d81e      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d010      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040a6:	e018      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a8:	4b86      	ldr	r3, [pc, #536]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a85      	ldr	r2, [pc, #532]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b4:	e015      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fabb 	bl	8004638 <RCCEx_PLLSAI1_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c6:	e00c      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3320      	adds	r3, #32
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fba6 	bl	8004820 <RCCEx_PLLSAI2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	74fb      	strb	r3, [r7, #19]
      break;
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e8:	4b76      	ldr	r3, [pc, #472]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	4973      	ldr	r1, [pc, #460]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040fe:	e001      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d041      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004118:	d02a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800411a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800411e:	d824      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004124:	d008      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412a:	d81e      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004134:	d010      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004136:	e018      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004138:	4b62      	ldr	r3, [pc, #392]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a61      	ldr	r2, [pc, #388]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004142:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004144:	e015      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa73 	bl	8004638 <RCCEx_PLLSAI1_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004156:	e00c      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3320      	adds	r3, #32
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fb5e 	bl	8004820 <RCCEx_PLLSAI2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	74fb      	strb	r3, [r7, #19]
      break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004178:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004186:	494f      	ldr	r1, [pc, #316]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80a0 	beq.w	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e4:	f7fd fa02 	bl	80015ec <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ea:	e009      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fd f9fe 	bl	80015ec <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d902      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	74fb      	strb	r3, [r7, #19]
        break;
 80041fe:	e005      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004200:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d15c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01f      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	d019      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800425c:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fd f9bd 	bl	80015ec <HAL_GetTick>
 8004272:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004274:	e00b      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fd f9b9 	bl	80015ec <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d902      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	74fb      	strb	r3, [r7, #19]
            break;
 800428c:	e006      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ec      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10c      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ba:	e009      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
 80042c0:	e006      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d0:	7c7b      	ldrb	r3, [r7, #17]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d105      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d6:	4b9e      	ldr	r3, [pc, #632]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	4a9d      	ldr	r2, [pc, #628]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ee:	4b98      	ldr	r3, [pc, #608]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 0203 	bic.w	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	4994      	ldr	r1, [pc, #592]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004310:	4b8f      	ldr	r3, [pc, #572]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 020c 	bic.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	498c      	ldr	r1, [pc, #560]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004332:	4b87      	ldr	r3, [pc, #540]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	4983      	ldr	r1, [pc, #524]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004354:	4b7e      	ldr	r3, [pc, #504]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	497b      	ldr	r1, [pc, #492]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004376:	4b76      	ldr	r3, [pc, #472]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	4972      	ldr	r1, [pc, #456]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004398:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	496a      	ldr	r1, [pc, #424]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ba:	4b65      	ldr	r3, [pc, #404]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	4961      	ldr	r1, [pc, #388]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043dc:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	4959      	ldr	r1, [pc, #356]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	4950      	ldr	r1, [pc, #320]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004420:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	4948      	ldr	r1, [pc, #288]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004442:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	493f      	ldr	r1, [pc, #252]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d028      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004464:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004472:	4937      	ldr	r1, [pc, #220]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004482:	d106      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b32      	ldr	r3, [pc, #200]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a31      	ldr	r2, [pc, #196]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
 8004490:	e011      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800449a:	d10c      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f8c8 	bl	8004638 <RCCEx_PLLSAI1_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044b2:	7cfb      	ldrb	r3, [r7, #19]
 80044b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d028      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	491f      	ldr	r1, [pc, #124]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e0:	d106      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ec:	60d3      	str	r3, [r2, #12]
 80044ee:	e011      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2101      	movs	r1, #1
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f899 	bl	8004638 <RCCEx_PLLSAI1_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004510:	7cfb      	ldrb	r3, [r7, #19]
 8004512:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02b      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452e:	4908      	ldr	r1, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800453e:	d109      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a02      	ldr	r2, [pc, #8]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454a:	60d3      	str	r3, [r2, #12]
 800454c:	e014      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800455c:	d10c      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	2101      	movs	r1, #1
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f867 	bl	8004638 <RCCEx_PLLSAI1_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02f      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004592:	4928      	ldr	r1, [pc, #160]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a2:	d10d      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f844 	bl	8004638 <RCCEx_PLLSAI1_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	74bb      	strb	r3, [r7, #18]
 80045be:	e011      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3320      	adds	r3, #32
 80045ce:	2102      	movs	r1, #2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f925 	bl	8004820 <RCCEx_PLLSAI2_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fe:	490d      	ldr	r1, [pc, #52]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800462a:	7cbb      	ldrb	r3, [r7, #18]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40021000 	.word	0x40021000

08004638 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004646:	4b75      	ldr	r3, [pc, #468]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d018      	beq.n	8004684 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0203 	and.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d10d      	bne.n	800467e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
       ||
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800466a:	4b6c      	ldr	r3, [pc, #432]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
       ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d047      	beq.n	800470e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e044      	b.n	800470e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d018      	beq.n	80046be <RCCEx_PLLSAI1_Config+0x86>
 800468c:	2b03      	cmp	r3, #3
 800468e:	d825      	bhi.n	80046dc <RCCEx_PLLSAI1_Config+0xa4>
 8004690:	2b01      	cmp	r3, #1
 8004692:	d002      	beq.n	800469a <RCCEx_PLLSAI1_Config+0x62>
 8004694:	2b02      	cmp	r3, #2
 8004696:	d009      	beq.n	80046ac <RCCEx_PLLSAI1_Config+0x74>
 8004698:	e020      	b.n	80046dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800469a:	4b60      	ldr	r3, [pc, #384]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11d      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046aa:	e01a      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046ac:	4b5b      	ldr	r3, [pc, #364]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046bc:	e013      	b.n	80046e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046be:	4b57      	ldr	r3, [pc, #348]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ca:	4b54      	ldr	r3, [pc, #336]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046da:	e006      	b.n	80046ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e004      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e2:	bf00      	nop
 80046e4:	e002      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046f2:	4b4a      	ldr	r3, [pc, #296]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	430b      	orrs	r3, r1
 8004708:	4944      	ldr	r1, [pc, #272]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d17d      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004714:	4b41      	ldr	r3, [pc, #260]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a40      	ldr	r2, [pc, #256]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800471e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fc ff64 	bl	80015ec <HAL_GetTick>
 8004724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004726:	e009      	b.n	800473c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004728:	f7fc ff60 	bl	80015ec <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d902      	bls.n	800473c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	73fb      	strb	r3, [r7, #15]
        break;
 800473a:	e005      	b.n	8004748 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ef      	bne.n	8004728 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d160      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004754:	4b31      	ldr	r3, [pc, #196]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6892      	ldr	r2, [r2, #8]
 8004764:	0211      	lsls	r1, r2, #8
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	0912      	lsrs	r2, r2, #4
 800476c:	0452      	lsls	r2, r2, #17
 800476e:	430a      	orrs	r2, r1
 8004770:	492a      	ldr	r1, [pc, #168]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	610b      	str	r3, [r1, #16]
 8004776:	e027      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d112      	bne.n	80047a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477e:	4b27      	ldr	r3, [pc, #156]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004786:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6892      	ldr	r2, [r2, #8]
 800478e:	0211      	lsls	r1, r2, #8
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6912      	ldr	r2, [r2, #16]
 8004794:	0852      	lsrs	r2, r2, #1
 8004796:	3a01      	subs	r2, #1
 8004798:	0552      	lsls	r2, r2, #21
 800479a:	430a      	orrs	r2, r1
 800479c:	491f      	ldr	r1, [pc, #124]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
 80047a2:	e011      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a4:	4b1d      	ldr	r3, [pc, #116]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6952      	ldr	r2, [r2, #20]
 80047ba:	0852      	lsrs	r2, r2, #1
 80047bc:	3a01      	subs	r2, #1
 80047be:	0652      	lsls	r2, r2, #25
 80047c0:	430a      	orrs	r2, r1
 80047c2:	4916      	ldr	r1, [pc, #88]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fc ff0a 	bl	80015ec <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047dc:	f7fc ff06 	bl	80015ec <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
          break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	4904      	ldr	r1, [pc, #16]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004810:	7bfb      	ldrb	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000

08004820 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800483a:	4b67      	ldr	r3, [pc, #412]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0203 	and.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d10d      	bne.n	8004866 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
       ||
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
       ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d047      	beq.n	80048f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	e044      	b.n	80048f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d018      	beq.n	80048a6 <RCCEx_PLLSAI2_Config+0x86>
 8004874:	2b03      	cmp	r3, #3
 8004876:	d825      	bhi.n	80048c4 <RCCEx_PLLSAI2_Config+0xa4>
 8004878:	2b01      	cmp	r3, #1
 800487a:	d002      	beq.n	8004882 <RCCEx_PLLSAI2_Config+0x62>
 800487c:	2b02      	cmp	r3, #2
 800487e:	d009      	beq.n	8004894 <RCCEx_PLLSAI2_Config+0x74>
 8004880:	e020      	b.n	80048c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004882:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11d      	bne.n	80048ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004892:	e01a      	b.n	80048ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004894:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e013      	b.n	80048ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048a6:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10f      	bne.n	80048d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048b2:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048c2:	e006      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
      break;
 80048c8:	e004      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048da:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	430b      	orrs	r3, r1
 80048f0:	4939      	ldr	r1, [pc, #228]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d167      	bne.n	80049cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004908:	f7fc fe70 	bl	80015ec <HAL_GetTick>
 800490c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800490e:	e009      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004910:	f7fc fe6c 	bl	80015ec <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	73fb      	strb	r3, [r7, #15]
        break;
 8004922:	e005      	b.n	8004930 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004924:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ef      	bne.n	8004910 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d14a      	bne.n	80049cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d111      	bne.n	8004960 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6892      	ldr	r2, [r2, #8]
 800494c:	0211      	lsls	r1, r2, #8
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	0912      	lsrs	r2, r2, #4
 8004954:	0452      	lsls	r2, r2, #17
 8004956:	430a      	orrs	r2, r1
 8004958:	491f      	ldr	r1, [pc, #124]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495a:	4313      	orrs	r3, r2
 800495c:	614b      	str	r3, [r1, #20]
 800495e:	e011      	b.n	8004984 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	0211      	lsls	r1, r2, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6912      	ldr	r2, [r2, #16]
 8004976:	0852      	lsrs	r2, r2, #1
 8004978:	3a01      	subs	r2, #1
 800497a:	0652      	lsls	r2, r2, #25
 800497c:	430a      	orrs	r2, r1
 800497e:	4916      	ldr	r1, [pc, #88]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004990:	f7fc fe2c 	bl	80015ec <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004996:	e009      	b.n	80049ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004998:	f7fc fe28 	bl	80015ec <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d902      	bls.n	80049ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	73fb      	strb	r3, [r7, #15]
          break;
 80049aa:	e005      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ef      	beq.n	8004998 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4904      	ldr	r1, [pc, #16]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e049      	b.n	8004a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc fbe2 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fab6 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	; (8004b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01d      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ace:	d018      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d115      	bne.n	8004b2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b06      	cmp	r3, #6
 8004b12:	d015      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1a:	d011      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	e008      	b.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40013400 	.word	0x40013400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	00010007 	.word	0x00010007

08004b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f9ce 	bl	8004f50 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9c0 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f9d1 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0204 	mvn.w	r2, #4
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9a4 	bl	8004f50 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f996 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9a7 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0208 	mvn.w	r2, #8
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2204      	movs	r2, #4
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f97a 	bl	8004f50 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f96c 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f97d 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0210 	mvn.w	r2, #16
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f950 	bl	8004f50 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f942 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f953 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0201 	mvn.w	r2, #1
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fb ff66 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fafe 	bl	8005318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2a:	d10e      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d107      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 faf1 	bl	800532c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d10e      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d107      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f901 	bl	8004f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d10e      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d107      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0220 	mvn.w	r2, #32
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fab1 	bl	8005304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_ConfigClockSource+0x1c>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e0b6      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x18a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004de8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e02:	d03e      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xd8>
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e08:	f200 8087 	bhi.w	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	f000 8086 	beq.w	8004f20 <HAL_TIM_ConfigClockSource+0x176>
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d87f      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e1a:	2b70      	cmp	r3, #112	; 0x70
 8004e1c:	d01a      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xaa>
 8004e1e:	2b70      	cmp	r3, #112	; 0x70
 8004e20:	d87b      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e22:	2b60      	cmp	r3, #96	; 0x60
 8004e24:	d050      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x11e>
 8004e26:	2b60      	cmp	r3, #96	; 0x60
 8004e28:	d877      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e2a:	2b50      	cmp	r3, #80	; 0x50
 8004e2c:	d03c      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0xfe>
 8004e2e:	2b50      	cmp	r3, #80	; 0x50
 8004e30:	d873      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d058      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x13e>
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d86f      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e3a:	2b30      	cmp	r3, #48	; 0x30
 8004e3c:	d064      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e3e:	2b30      	cmp	r3, #48	; 0x30
 8004e40:	d86b      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d060      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d867      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d05c      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d05a      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e52:	e062      	b.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f000 f9a6 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e04f      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f000 f98f 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea4:	609a      	str	r2, [r3, #8]
      break;
 8004ea6:	e03c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f000 f903 	bl	80050c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2150      	movs	r1, #80	; 0x50
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f95c 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e02c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f000 f922 	bl	800511e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2160      	movs	r1, #96	; 0x60
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f94c 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e01c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f000 f8e3 	bl	80050c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2140      	movs	r1, #64	; 0x40
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f93c 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004f06:	e00c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 f933 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004f18:	e003      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1e:	e000      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a40      	ldr	r2, [pc, #256]	; (80050a0 <TIM_Base_SetConfig+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3d      	ldr	r2, [pc, #244]	; (80050a4 <TIM_Base_SetConfig+0x118>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3c      	ldr	r2, [pc, #240]	; (80050a8 <TIM_Base_SetConfig+0x11c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3b      	ldr	r2, [pc, #236]	; (80050ac <TIM_Base_SetConfig+0x120>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3a      	ldr	r2, [pc, #232]	; (80050b0 <TIM_Base_SetConfig+0x124>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2f      	ldr	r2, [pc, #188]	; (80050a0 <TIM_Base_SetConfig+0x114>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d01b      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <TIM_Base_SetConfig+0x118>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d017      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <TIM_Base_SetConfig+0x11c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2a      	ldr	r2, [pc, #168]	; (80050ac <TIM_Base_SetConfig+0x120>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <TIM_Base_SetConfig+0x124>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <TIM_Base_SetConfig+0x128>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <TIM_Base_SetConfig+0x12c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0x9a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a26      	ldr	r2, [pc, #152]	; (80050bc <TIM_Base_SetConfig+0x130>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <TIM_Base_SetConfig+0x114>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00f      	beq.n	8005084 <TIM_Base_SetConfig+0xf8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <TIM_Base_SetConfig+0x124>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00b      	beq.n	8005084 <TIM_Base_SetConfig+0xf8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a11      	ldr	r2, [pc, #68]	; (80050b4 <TIM_Base_SetConfig+0x128>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_Base_SetConfig+0xf8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <TIM_Base_SetConfig+0x12c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0xf8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0f      	ldr	r2, [pc, #60]	; (80050bc <TIM_Base_SetConfig+0x130>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d103      	bne.n	800508c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	615a      	str	r2, [r3, #20]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 030a 	bic.w	r3, r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800515a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	f043 0307 	orr.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005208:	2302      	movs	r3, #2
 800520a:	e068      	b.n	80052de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2e      	ldr	r2, [pc, #184]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2d      	ldr	r2, [pc, #180]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d108      	bne.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005246:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1e      	ldr	r2, [pc, #120]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527e:	d018      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10c      	bne.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40014000 	.word	0x40014000

08005304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e040      	b.n	80053d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fb ff58 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2224      	movs	r2, #36	; 0x24
 800536c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8c0 	bl	8005504 <UART_SetConfig>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e022      	b.n	80053d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fb6c 	bl	8005a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fbf3 	bl	8005bb8 <UART_CheckIdleState>
 80053d2:	4603      	mov	r3, r0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	f040 8082 	bne.w	80054fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_UART_Transmit+0x26>
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07a      	b.n	80054fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_UART_Transmit+0x38>
 8005410:	2302      	movs	r3, #2
 8005412:	e073      	b.n	80054fc <HAL_UART_Transmit+0x120>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2221      	movs	r2, #33	; 0x21
 8005428:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542a:	f7fc f8df 	bl	80015ec <HAL_GetTick>
 800542e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005448:	d108      	bne.n	800545c <HAL_UART_Transmit+0x80>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e003      	b.n	8005464 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800546c:	e02d      	b.n	80054ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fbe6 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e039      	b.n	80054fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549a:	b292      	uxth	r2, r2
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	3302      	adds	r3, #2
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	e008      	b.n	80054b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	b292      	uxth	r2, r2
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3301      	adds	r3, #1
 80054b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1cb      	bne.n	800546e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	2140      	movs	r1, #64	; 0x40
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fbb2 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e005      	b.n	80054fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e000      	b.n	80054fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
  }
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005508:	b08a      	sub	sp, #40	; 0x28
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	431a      	orrs	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	4313      	orrs	r3, r2
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4ba4      	ldr	r3, [pc, #656]	; (80057c4 <UART_SetConfig+0x2c0>)
 8005534:	4013      	ands	r3, r2
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800553c:	430b      	orrs	r3, r1
 800553e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a99      	ldr	r2, [pc, #612]	; (80057c8 <UART_SetConfig+0x2c4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556c:	4313      	orrs	r3, r2
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a90      	ldr	r2, [pc, #576]	; (80057cc <UART_SetConfig+0x2c8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d126      	bne.n	80055dc <UART_SetConfig+0xd8>
 800558e:	4b90      	ldr	r3, [pc, #576]	; (80057d0 <UART_SetConfig+0x2cc>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b03      	cmp	r3, #3
 800559a:	d81b      	bhi.n	80055d4 <UART_SetConfig+0xd0>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0xa0>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055c5 	.word	0x080055c5
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	080055cd 	.word	0x080055cd
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e116      	b.n	80057ea <UART_SetConfig+0x2e6>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e112      	b.n	80057ea <UART_SetConfig+0x2e6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e10e      	b.n	80057ea <UART_SetConfig+0x2e6>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d2:	e10a      	b.n	80057ea <UART_SetConfig+0x2e6>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e106      	b.n	80057ea <UART_SetConfig+0x2e6>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a7c      	ldr	r2, [pc, #496]	; (80057d4 <UART_SetConfig+0x2d0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d138      	bne.n	8005658 <UART_SetConfig+0x154>
 80055e6:	4b7a      	ldr	r3, [pc, #488]	; (80057d0 <UART_SetConfig+0x2cc>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d82d      	bhi.n	8005650 <UART_SetConfig+0x14c>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0xf8>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005651 	.word	0x08005651
 8005604:	08005651 	.word	0x08005651
 8005608:	08005651 	.word	0x08005651
 800560c:	08005641 	.word	0x08005641
 8005610:	08005651 	.word	0x08005651
 8005614:	08005651 	.word	0x08005651
 8005618:	08005651 	.word	0x08005651
 800561c:	08005639 	.word	0x08005639
 8005620:	08005651 	.word	0x08005651
 8005624:	08005651 	.word	0x08005651
 8005628:	08005651 	.word	0x08005651
 800562c:	08005649 	.word	0x08005649
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005636:	e0d8      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005638:	2302      	movs	r3, #2
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563e:	e0d4      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005640:	2304      	movs	r3, #4
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005646:	e0d0      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005648:	2308      	movs	r3, #8
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564e:	e0cc      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005650:	2310      	movs	r3, #16
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005656:	e0c8      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a5e      	ldr	r2, [pc, #376]	; (80057d8 <UART_SetConfig+0x2d4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d125      	bne.n	80056ae <UART_SetConfig+0x1aa>
 8005662:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <UART_SetConfig+0x2cc>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005668:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800566c:	2b30      	cmp	r3, #48	; 0x30
 800566e:	d016      	beq.n	800569e <UART_SetConfig+0x19a>
 8005670:	2b30      	cmp	r3, #48	; 0x30
 8005672:	d818      	bhi.n	80056a6 <UART_SetConfig+0x1a2>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d00a      	beq.n	800568e <UART_SetConfig+0x18a>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d814      	bhi.n	80056a6 <UART_SetConfig+0x1a2>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <UART_SetConfig+0x182>
 8005680:	2b10      	cmp	r3, #16
 8005682:	d008      	beq.n	8005696 <UART_SetConfig+0x192>
 8005684:	e00f      	b.n	80056a6 <UART_SetConfig+0x1a2>
 8005686:	2300      	movs	r3, #0
 8005688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568c:	e0ad      	b.n	80057ea <UART_SetConfig+0x2e6>
 800568e:	2302      	movs	r3, #2
 8005690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005694:	e0a9      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005696:	2304      	movs	r3, #4
 8005698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569c:	e0a5      	b.n	80057ea <UART_SetConfig+0x2e6>
 800569e:	2308      	movs	r3, #8
 80056a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a4:	e0a1      	b.n	80057ea <UART_SetConfig+0x2e6>
 80056a6:	2310      	movs	r3, #16
 80056a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ac:	e09d      	b.n	80057ea <UART_SetConfig+0x2e6>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a4a      	ldr	r2, [pc, #296]	; (80057dc <UART_SetConfig+0x2d8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d125      	bne.n	8005704 <UART_SetConfig+0x200>
 80056b8:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <UART_SetConfig+0x2cc>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056c2:	2bc0      	cmp	r3, #192	; 0xc0
 80056c4:	d016      	beq.n	80056f4 <UART_SetConfig+0x1f0>
 80056c6:	2bc0      	cmp	r3, #192	; 0xc0
 80056c8:	d818      	bhi.n	80056fc <UART_SetConfig+0x1f8>
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d00a      	beq.n	80056e4 <UART_SetConfig+0x1e0>
 80056ce:	2b80      	cmp	r3, #128	; 0x80
 80056d0:	d814      	bhi.n	80056fc <UART_SetConfig+0x1f8>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <UART_SetConfig+0x1d8>
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d008      	beq.n	80056ec <UART_SetConfig+0x1e8>
 80056da:	e00f      	b.n	80056fc <UART_SetConfig+0x1f8>
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e2:	e082      	b.n	80057ea <UART_SetConfig+0x2e6>
 80056e4:	2302      	movs	r3, #2
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ea:	e07e      	b.n	80057ea <UART_SetConfig+0x2e6>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f2:	e07a      	b.n	80057ea <UART_SetConfig+0x2e6>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fa:	e076      	b.n	80057ea <UART_SetConfig+0x2e6>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005702:	e072      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a35      	ldr	r2, [pc, #212]	; (80057e0 <UART_SetConfig+0x2dc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d12a      	bne.n	8005764 <UART_SetConfig+0x260>
 800570e:	4b30      	ldr	r3, [pc, #192]	; (80057d0 <UART_SetConfig+0x2cc>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571c:	d01a      	beq.n	8005754 <UART_SetConfig+0x250>
 800571e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005722:	d81b      	bhi.n	800575c <UART_SetConfig+0x258>
 8005724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005728:	d00c      	beq.n	8005744 <UART_SetConfig+0x240>
 800572a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572e:	d815      	bhi.n	800575c <UART_SetConfig+0x258>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <UART_SetConfig+0x238>
 8005734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005738:	d008      	beq.n	800574c <UART_SetConfig+0x248>
 800573a:	e00f      	b.n	800575c <UART_SetConfig+0x258>
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	e052      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005744:	2302      	movs	r3, #2
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e04e      	b.n	80057ea <UART_SetConfig+0x2e6>
 800574c:	2304      	movs	r3, #4
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005752:	e04a      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005754:	2308      	movs	r3, #8
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575a:	e046      	b.n	80057ea <UART_SetConfig+0x2e6>
 800575c:	2310      	movs	r3, #16
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005762:	e042      	b.n	80057ea <UART_SetConfig+0x2e6>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <UART_SetConfig+0x2c4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d13a      	bne.n	80057e4 <UART_SetConfig+0x2e0>
 800576e:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <UART_SetConfig+0x2cc>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800577c:	d01a      	beq.n	80057b4 <UART_SetConfig+0x2b0>
 800577e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005782:	d81b      	bhi.n	80057bc <UART_SetConfig+0x2b8>
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005788:	d00c      	beq.n	80057a4 <UART_SetConfig+0x2a0>
 800578a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578e:	d815      	bhi.n	80057bc <UART_SetConfig+0x2b8>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <UART_SetConfig+0x298>
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d008      	beq.n	80057ac <UART_SetConfig+0x2a8>
 800579a:	e00f      	b.n	80057bc <UART_SetConfig+0x2b8>
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e022      	b.n	80057ea <UART_SetConfig+0x2e6>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e01e      	b.n	80057ea <UART_SetConfig+0x2e6>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b2:	e01a      	b.n	80057ea <UART_SetConfig+0x2e6>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ba:	e016      	b.n	80057ea <UART_SetConfig+0x2e6>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c2:	e012      	b.n	80057ea <UART_SetConfig+0x2e6>
 80057c4:	efff69f3 	.word	0xefff69f3
 80057c8:	40008000 	.word	0x40008000
 80057cc:	40013800 	.word	0x40013800
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40004400 	.word	0x40004400
 80057d8:	40004800 	.word	0x40004800
 80057dc:	40004c00 	.word	0x40004c00
 80057e0:	40005000 	.word	0x40005000
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a9f      	ldr	r2, [pc, #636]	; (8005a6c <UART_SetConfig+0x568>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d17a      	bne.n	80058ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d824      	bhi.n	8005846 <UART_SetConfig+0x342>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x300>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005829 	.word	0x08005829
 8005808:	08005847 	.word	0x08005847
 800580c:	08005831 	.word	0x08005831
 8005810:	08005847 	.word	0x08005847
 8005814:	08005837 	.word	0x08005837
 8005818:	08005847 	.word	0x08005847
 800581c:	08005847 	.word	0x08005847
 8005820:	08005847 	.word	0x08005847
 8005824:	0800583f 	.word	0x0800583f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe fb90 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 800582c:	61f8      	str	r0, [r7, #28]
        break;
 800582e:	e010      	b.n	8005852 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005830:	4b8f      	ldr	r3, [pc, #572]	; (8005a70 <UART_SetConfig+0x56c>)
 8005832:	61fb      	str	r3, [r7, #28]
        break;
 8005834:	e00d      	b.n	8005852 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005836:	f7fe faf1 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 800583a:	61f8      	str	r0, [r7, #28]
        break;
 800583c:	e009      	b.n	8005852 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005842:	61fb      	str	r3, [r7, #28]
        break;
 8005844:	e005      	b.n	8005852 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005850:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80fb 	beq.w	8005a50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	429a      	cmp	r2, r3
 8005868:	d305      	bcc.n	8005876 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	429a      	cmp	r2, r3
 8005874:	d903      	bls.n	800587e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800587c:	e0e8      	b.n	8005a50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2200      	movs	r2, #0
 8005882:	461c      	mov	r4, r3
 8005884:	4615      	mov	r5, r2
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	022b      	lsls	r3, r5, #8
 8005890:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005894:	0222      	lsls	r2, r4, #8
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	6849      	ldr	r1, [r1, #4]
 800589a:	0849      	lsrs	r1, r1, #1
 800589c:	2000      	movs	r0, #0
 800589e:	4688      	mov	r8, r1
 80058a0:	4681      	mov	r9, r0
 80058a2:	eb12 0a08 	adds.w	sl, r2, r8
 80058a6:	eb43 0b09 	adc.w	fp, r3, r9
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b8:	4650      	mov	r0, sl
 80058ba:	4659      	mov	r1, fp
 80058bc:	f7fa fcd8 	bl	8000270 <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4613      	mov	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ce:	d308      	bcc.n	80058e2 <UART_SetConfig+0x3de>
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d6:	d204      	bcs.n	80058e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	e0b6      	b.n	8005a50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058e8:	e0b2      	b.n	8005a50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f2:	d15e      	bne.n	80059b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d828      	bhi.n	800594e <UART_SetConfig+0x44a>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x400>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	0800594f 	.word	0x0800594f
 8005914:	0800593f 	.word	0x0800593f
 8005918:	0800594f 	.word	0x0800594f
 800591c:	0800594f 	.word	0x0800594f
 8005920:	0800594f 	.word	0x0800594f
 8005924:	08005947 	.word	0x08005947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7fe fb10 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 800592c:	61f8      	str	r0, [r7, #28]
        break;
 800592e:	e014      	b.n	800595a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005930:	f7fe fb22 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 8005934:	61f8      	str	r0, [r7, #28]
        break;
 8005936:	e010      	b.n	800595a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005938:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <UART_SetConfig+0x56c>)
 800593a:	61fb      	str	r3, [r7, #28]
        break;
 800593c:	e00d      	b.n	800595a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593e:	f7fe fa6d 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8005942:	61f8      	str	r0, [r7, #28]
        break;
 8005944:	e009      	b.n	800595a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800594a:	61fb      	str	r3, [r7, #28]
        break;
 800594c:	e005      	b.n	800595a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d077      	beq.n	8005a50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	005a      	lsls	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	441a      	add	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b0f      	cmp	r3, #15
 800597a:	d916      	bls.n	80059aa <UART_SetConfig+0x4a6>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005982:	d212      	bcs.n	80059aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f023 030f 	bic.w	r3, r3, #15
 800598c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	b29b      	uxth	r3, r3
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	b29a      	uxth	r2, r3
 800599a:	8afb      	ldrh	r3, [r7, #22]
 800599c:	4313      	orrs	r3, r2
 800599e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	8afa      	ldrh	r2, [r7, #22]
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e052      	b.n	8005a50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059b0:	e04e      	b.n	8005a50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d827      	bhi.n	8005a0a <UART_SetConfig+0x506>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0x4bc>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059f5 	.word	0x080059f5
 80059cc:	08005a0b 	.word	0x08005a0b
 80059d0:	080059fb 	.word	0x080059fb
 80059d4:	08005a0b 	.word	0x08005a0b
 80059d8:	08005a0b 	.word	0x08005a0b
 80059dc:	08005a0b 	.word	0x08005a0b
 80059e0:	08005a03 	.word	0x08005a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e4:	f7fe fab2 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 80059e8:	61f8      	str	r0, [r7, #28]
        break;
 80059ea:	e014      	b.n	8005a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ec:	f7fe fac4 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 80059f0:	61f8      	str	r0, [r7, #28]
        break;
 80059f2:	e010      	b.n	8005a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f4:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <UART_SetConfig+0x56c>)
 80059f6:	61fb      	str	r3, [r7, #28]
        break;
 80059f8:	e00d      	b.n	8005a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fa:	f7fe fa0f 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 80059fe:	61f8      	str	r0, [r7, #28]
        break;
 8005a00:	e009      	b.n	8005a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a06:	61fb      	str	r3, [r7, #28]
        break;
 8005a08:	e005      	b.n	8005a16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a14:	bf00      	nop
    }

    if (pclk != 0U)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d019      	beq.n	8005a50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	085a      	lsrs	r2, r3, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	441a      	add	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	d909      	bls.n	8005a4a <UART_SetConfig+0x546>
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3c:	d205      	bcs.n	8005a4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60da      	str	r2, [r3, #12]
 8005a48:	e002      	b.n	8005a50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40008000 	.word	0x40008000
 8005a70:	00f42400 	.word	0x00f42400

08005a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01a      	beq.n	8005b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b72:	d10a      	bne.n	8005b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  }
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc8:	f7fb fd10 	bl	80015ec <HAL_GetTick>
 8005bcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d10e      	bne.n	8005bfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f82d 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e023      	b.n	8005c42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d10e      	bne.n	8005c26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f817 	bl	8005c4a <UART_WaitOnFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e00d      	b.n	8005c42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b09c      	sub	sp, #112	; 0x70
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5a:	e0a5      	b.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	f000 80a1 	beq.w	8005da8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fb fcc1 	bl	80015ec <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d13e      	bne.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c90:	667b      	str	r3, [r7, #100]	; 0x64
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ca0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e6      	bne.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cce:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e067      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d04f      	beq.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d16:	d147      	bne.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
 8005d42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	613b      	str	r3, [r7, #16]
   return(result);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d74:	623a      	str	r2, [r7, #32]
 8005d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e010      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4013      	ands	r3, r2
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	bf0c      	ite	eq
 8005db8:	2301      	moveq	r3, #1
 8005dba:	2300      	movne	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f43f af4a 	beq.w	8005c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3770      	adds	r7, #112	; 0x70
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <__errno>:
 8005dd4:	4b01      	ldr	r3, [pc, #4]	; (8005ddc <__errno+0x8>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000010 	.word	0x20000010

08005de0 <__libc_init_array>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4d0d      	ldr	r5, [pc, #52]	; (8005e18 <__libc_init_array+0x38>)
 8005de4:	4c0d      	ldr	r4, [pc, #52]	; (8005e1c <__libc_init_array+0x3c>)
 8005de6:	1b64      	subs	r4, r4, r5
 8005de8:	10a4      	asrs	r4, r4, #2
 8005dea:	2600      	movs	r6, #0
 8005dec:	42a6      	cmp	r6, r4
 8005dee:	d109      	bne.n	8005e04 <__libc_init_array+0x24>
 8005df0:	4d0b      	ldr	r5, [pc, #44]	; (8005e20 <__libc_init_array+0x40>)
 8005df2:	4c0c      	ldr	r4, [pc, #48]	; (8005e24 <__libc_init_array+0x44>)
 8005df4:	f000 ffae 	bl	8006d54 <_init>
 8005df8:	1b64      	subs	r4, r4, r5
 8005dfa:	10a4      	asrs	r4, r4, #2
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	42a6      	cmp	r6, r4
 8005e00:	d105      	bne.n	8005e0e <__libc_init_array+0x2e>
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e08:	4798      	blx	r3
 8005e0a:	3601      	adds	r6, #1
 8005e0c:	e7ee      	b.n	8005dec <__libc_init_array+0xc>
 8005e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e12:	4798      	blx	r3
 8005e14:	3601      	adds	r6, #1
 8005e16:	e7f2      	b.n	8005dfe <__libc_init_array+0x1e>
 8005e18:	08006e58 	.word	0x08006e58
 8005e1c:	08006e58 	.word	0x08006e58
 8005e20:	08006e58 	.word	0x08006e58
 8005e24:	08006e5c 	.word	0x08006e5c

08005e28 <memset>:
 8005e28:	4402      	add	r2, r0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d100      	bne.n	8005e32 <memset+0xa>
 8005e30:	4770      	bx	lr
 8005e32:	f803 1b01 	strb.w	r1, [r3], #1
 8005e36:	e7f9      	b.n	8005e2c <memset+0x4>

08005e38 <iprintf>:
 8005e38:	b40f      	push	{r0, r1, r2, r3}
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <iprintf+0x2c>)
 8005e3c:	b513      	push	{r0, r1, r4, lr}
 8005e3e:	681c      	ldr	r4, [r3, #0]
 8005e40:	b124      	cbz	r4, 8005e4c <iprintf+0x14>
 8005e42:	69a3      	ldr	r3, [r4, #24]
 8005e44:	b913      	cbnz	r3, 8005e4c <iprintf+0x14>
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 f866 	bl	8005f18 <__sinit>
 8005e4c:	ab05      	add	r3, sp, #20
 8005e4e:	9a04      	ldr	r2, [sp, #16]
 8005e50:	68a1      	ldr	r1, [r4, #8]
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 f9bd 	bl	80061d4 <_vfiprintf_r>
 8005e5a:	b002      	add	sp, #8
 8005e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr
 8005e64:	20000010 	.word	0x20000010

08005e68 <std>:
 8005e68:	2300      	movs	r3, #0
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e76:	6083      	str	r3, [r0, #8]
 8005e78:	8181      	strh	r1, [r0, #12]
 8005e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e7c:	81c2      	strh	r2, [r0, #14]
 8005e7e:	6183      	str	r3, [r0, #24]
 8005e80:	4619      	mov	r1, r3
 8005e82:	2208      	movs	r2, #8
 8005e84:	305c      	adds	r0, #92	; 0x5c
 8005e86:	f7ff ffcf 	bl	8005e28 <memset>
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <std+0x38>)
 8005e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <std+0x3c>)
 8005e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <std+0x40>)
 8005e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <std+0x44>)
 8005e98:	6224      	str	r4, [r4, #32]
 8005e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e9c:	bd10      	pop	{r4, pc}
 8005e9e:	bf00      	nop
 8005ea0:	0800677d 	.word	0x0800677d
 8005ea4:	0800679f 	.word	0x0800679f
 8005ea8:	080067d7 	.word	0x080067d7
 8005eac:	080067fb 	.word	0x080067fb

08005eb0 <_cleanup_r>:
 8005eb0:	4901      	ldr	r1, [pc, #4]	; (8005eb8 <_cleanup_r+0x8>)
 8005eb2:	f000 b8af 	b.w	8006014 <_fwalk_reent>
 8005eb6:	bf00      	nop
 8005eb8:	08006ad5 	.word	0x08006ad5

08005ebc <__sfmoreglue>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	2268      	movs	r2, #104	; 0x68
 8005ec0:	1e4d      	subs	r5, r1, #1
 8005ec2:	4355      	muls	r5, r2
 8005ec4:	460e      	mov	r6, r1
 8005ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eca:	f000 f8e5 	bl	8006098 <_malloc_r>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	b140      	cbz	r0, 8005ee4 <__sfmoreglue+0x28>
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ed8:	300c      	adds	r0, #12
 8005eda:	60a0      	str	r0, [r4, #8]
 8005edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ee0:	f7ff ffa2 	bl	8005e28 <memset>
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}

08005ee8 <__sfp_lock_acquire>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__sfp_lock_acquire+0x8>)
 8005eea:	f000 b8b3 	b.w	8006054 <__retarget_lock_acquire_recursive>
 8005eee:	bf00      	nop
 8005ef0:	20000441 	.word	0x20000441

08005ef4 <__sfp_lock_release>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__sfp_lock_release+0x8>)
 8005ef6:	f000 b8ae 	b.w	8006056 <__retarget_lock_release_recursive>
 8005efa:	bf00      	nop
 8005efc:	20000441 	.word	0x20000441

08005f00 <__sinit_lock_acquire>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__sinit_lock_acquire+0x8>)
 8005f02:	f000 b8a7 	b.w	8006054 <__retarget_lock_acquire_recursive>
 8005f06:	bf00      	nop
 8005f08:	20000442 	.word	0x20000442

08005f0c <__sinit_lock_release>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__sinit_lock_release+0x8>)
 8005f0e:	f000 b8a2 	b.w	8006056 <__retarget_lock_release_recursive>
 8005f12:	bf00      	nop
 8005f14:	20000442 	.word	0x20000442

08005f18 <__sinit>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	f7ff fff0 	bl	8005f00 <__sinit_lock_acquire>
 8005f20:	69a3      	ldr	r3, [r4, #24]
 8005f22:	b11b      	cbz	r3, 8005f2c <__sinit+0x14>
 8005f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f28:	f7ff bff0 	b.w	8005f0c <__sinit_lock_release>
 8005f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f30:	6523      	str	r3, [r4, #80]	; 0x50
 8005f32:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <__sinit+0x68>)
 8005f34:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <__sinit+0x6c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	bf04      	itt	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	61a3      	streq	r3, [r4, #24]
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 f820 	bl	8005f88 <__sfp>
 8005f48:	6060      	str	r0, [r4, #4]
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 f81c 	bl	8005f88 <__sfp>
 8005f50:	60a0      	str	r0, [r4, #8]
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 f818 	bl	8005f88 <__sfp>
 8005f58:	2200      	movs	r2, #0
 8005f5a:	60e0      	str	r0, [r4, #12]
 8005f5c:	2104      	movs	r1, #4
 8005f5e:	6860      	ldr	r0, [r4, #4]
 8005f60:	f7ff ff82 	bl	8005e68 <std>
 8005f64:	68a0      	ldr	r0, [r4, #8]
 8005f66:	2201      	movs	r2, #1
 8005f68:	2109      	movs	r1, #9
 8005f6a:	f7ff ff7d 	bl	8005e68 <std>
 8005f6e:	68e0      	ldr	r0, [r4, #12]
 8005f70:	2202      	movs	r2, #2
 8005f72:	2112      	movs	r1, #18
 8005f74:	f7ff ff78 	bl	8005e68 <std>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61a3      	str	r3, [r4, #24]
 8005f7c:	e7d2      	b.n	8005f24 <__sinit+0xc>
 8005f7e:	bf00      	nop
 8005f80:	08006db8 	.word	0x08006db8
 8005f84:	08005eb1 	.word	0x08005eb1

08005f88 <__sfp>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	4607      	mov	r7, r0
 8005f8c:	f7ff ffac 	bl	8005ee8 <__sfp_lock_acquire>
 8005f90:	4b1e      	ldr	r3, [pc, #120]	; (800600c <__sfp+0x84>)
 8005f92:	681e      	ldr	r6, [r3, #0]
 8005f94:	69b3      	ldr	r3, [r6, #24]
 8005f96:	b913      	cbnz	r3, 8005f9e <__sfp+0x16>
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7ff ffbd 	bl	8005f18 <__sinit>
 8005f9e:	3648      	adds	r6, #72	; 0x48
 8005fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	d503      	bpl.n	8005fb0 <__sfp+0x28>
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	b30b      	cbz	r3, 8005ff0 <__sfp+0x68>
 8005fac:	6836      	ldr	r6, [r6, #0]
 8005fae:	e7f7      	b.n	8005fa0 <__sfp+0x18>
 8005fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fb4:	b9d5      	cbnz	r5, 8005fec <__sfp+0x64>
 8005fb6:	4b16      	ldr	r3, [pc, #88]	; (8006010 <__sfp+0x88>)
 8005fb8:	60e3      	str	r3, [r4, #12]
 8005fba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fbe:	6665      	str	r5, [r4, #100]	; 0x64
 8005fc0:	f000 f847 	bl	8006052 <__retarget_lock_init_recursive>
 8005fc4:	f7ff ff96 	bl	8005ef4 <__sfp_lock_release>
 8005fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fd0:	6025      	str	r5, [r4, #0]
 8005fd2:	61a5      	str	r5, [r4, #24]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fdc:	f7ff ff24 	bl	8005e28 <memset>
 8005fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fe8:	4620      	mov	r0, r4
 8005fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fec:	3468      	adds	r4, #104	; 0x68
 8005fee:	e7d9      	b.n	8005fa4 <__sfp+0x1c>
 8005ff0:	2104      	movs	r1, #4
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f7ff ff62 	bl	8005ebc <__sfmoreglue>
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	6030      	str	r0, [r6, #0]
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d1d5      	bne.n	8005fac <__sfp+0x24>
 8006000:	f7ff ff78 	bl	8005ef4 <__sfp_lock_release>
 8006004:	230c      	movs	r3, #12
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	e7ee      	b.n	8005fe8 <__sfp+0x60>
 800600a:	bf00      	nop
 800600c:	08006db8 	.word	0x08006db8
 8006010:	ffff0001 	.word	0xffff0001

08006014 <_fwalk_reent>:
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	4606      	mov	r6, r0
 800601a:	4688      	mov	r8, r1
 800601c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006020:	2700      	movs	r7, #0
 8006022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006026:	f1b9 0901 	subs.w	r9, r9, #1
 800602a:	d505      	bpl.n	8006038 <_fwalk_reent+0x24>
 800602c:	6824      	ldr	r4, [r4, #0]
 800602e:	2c00      	cmp	r4, #0
 8006030:	d1f7      	bne.n	8006022 <_fwalk_reent+0xe>
 8006032:	4638      	mov	r0, r7
 8006034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006038:	89ab      	ldrh	r3, [r5, #12]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d907      	bls.n	800604e <_fwalk_reent+0x3a>
 800603e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006042:	3301      	adds	r3, #1
 8006044:	d003      	beq.n	800604e <_fwalk_reent+0x3a>
 8006046:	4629      	mov	r1, r5
 8006048:	4630      	mov	r0, r6
 800604a:	47c0      	blx	r8
 800604c:	4307      	orrs	r7, r0
 800604e:	3568      	adds	r5, #104	; 0x68
 8006050:	e7e9      	b.n	8006026 <_fwalk_reent+0x12>

08006052 <__retarget_lock_init_recursive>:
 8006052:	4770      	bx	lr

08006054 <__retarget_lock_acquire_recursive>:
 8006054:	4770      	bx	lr

08006056 <__retarget_lock_release_recursive>:
 8006056:	4770      	bx	lr

08006058 <sbrk_aligned>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	4e0e      	ldr	r6, [pc, #56]	; (8006094 <sbrk_aligned+0x3c>)
 800605c:	460c      	mov	r4, r1
 800605e:	6831      	ldr	r1, [r6, #0]
 8006060:	4605      	mov	r5, r0
 8006062:	b911      	cbnz	r1, 800606a <sbrk_aligned+0x12>
 8006064:	f000 fb7a 	bl	800675c <_sbrk_r>
 8006068:	6030      	str	r0, [r6, #0]
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 fb75 	bl	800675c <_sbrk_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	d00a      	beq.n	800608c <sbrk_aligned+0x34>
 8006076:	1cc4      	adds	r4, r0, #3
 8006078:	f024 0403 	bic.w	r4, r4, #3
 800607c:	42a0      	cmp	r0, r4
 800607e:	d007      	beq.n	8006090 <sbrk_aligned+0x38>
 8006080:	1a21      	subs	r1, r4, r0
 8006082:	4628      	mov	r0, r5
 8006084:	f000 fb6a 	bl	800675c <_sbrk_r>
 8006088:	3001      	adds	r0, #1
 800608a:	d101      	bne.n	8006090 <sbrk_aligned+0x38>
 800608c:	f04f 34ff 	mov.w	r4, #4294967295
 8006090:	4620      	mov	r0, r4
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	20000448 	.word	0x20000448

08006098 <_malloc_r>:
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	1ccd      	adds	r5, r1, #3
 800609e:	f025 0503 	bic.w	r5, r5, #3
 80060a2:	3508      	adds	r5, #8
 80060a4:	2d0c      	cmp	r5, #12
 80060a6:	bf38      	it	cc
 80060a8:	250c      	movcc	r5, #12
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	4607      	mov	r7, r0
 80060ae:	db01      	blt.n	80060b4 <_malloc_r+0x1c>
 80060b0:	42a9      	cmp	r1, r5
 80060b2:	d905      	bls.n	80060c0 <_malloc_r+0x28>
 80060b4:	230c      	movs	r3, #12
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	2600      	movs	r6, #0
 80060ba:	4630      	mov	r0, r6
 80060bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c0:	4e2e      	ldr	r6, [pc, #184]	; (800617c <_malloc_r+0xe4>)
 80060c2:	f000 fdbb 	bl	8006c3c <__malloc_lock>
 80060c6:	6833      	ldr	r3, [r6, #0]
 80060c8:	461c      	mov	r4, r3
 80060ca:	bb34      	cbnz	r4, 800611a <_malloc_r+0x82>
 80060cc:	4629      	mov	r1, r5
 80060ce:	4638      	mov	r0, r7
 80060d0:	f7ff ffc2 	bl	8006058 <sbrk_aligned>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	4604      	mov	r4, r0
 80060d8:	d14d      	bne.n	8006176 <_malloc_r+0xde>
 80060da:	6834      	ldr	r4, [r6, #0]
 80060dc:	4626      	mov	r6, r4
 80060de:	2e00      	cmp	r6, #0
 80060e0:	d140      	bne.n	8006164 <_malloc_r+0xcc>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	4631      	mov	r1, r6
 80060e6:	4638      	mov	r0, r7
 80060e8:	eb04 0803 	add.w	r8, r4, r3
 80060ec:	f000 fb36 	bl	800675c <_sbrk_r>
 80060f0:	4580      	cmp	r8, r0
 80060f2:	d13a      	bne.n	800616a <_malloc_r+0xd2>
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	3503      	adds	r5, #3
 80060f8:	1a6d      	subs	r5, r5, r1
 80060fa:	f025 0503 	bic.w	r5, r5, #3
 80060fe:	3508      	adds	r5, #8
 8006100:	2d0c      	cmp	r5, #12
 8006102:	bf38      	it	cc
 8006104:	250c      	movcc	r5, #12
 8006106:	4629      	mov	r1, r5
 8006108:	4638      	mov	r0, r7
 800610a:	f7ff ffa5 	bl	8006058 <sbrk_aligned>
 800610e:	3001      	adds	r0, #1
 8006110:	d02b      	beq.n	800616a <_malloc_r+0xd2>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	442b      	add	r3, r5
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	e00e      	b.n	8006138 <_malloc_r+0xa0>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	1b52      	subs	r2, r2, r5
 800611e:	d41e      	bmi.n	800615e <_malloc_r+0xc6>
 8006120:	2a0b      	cmp	r2, #11
 8006122:	d916      	bls.n	8006152 <_malloc_r+0xba>
 8006124:	1961      	adds	r1, r4, r5
 8006126:	42a3      	cmp	r3, r4
 8006128:	6025      	str	r5, [r4, #0]
 800612a:	bf18      	it	ne
 800612c:	6059      	strne	r1, [r3, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	bf08      	it	eq
 8006132:	6031      	streq	r1, [r6, #0]
 8006134:	5162      	str	r2, [r4, r5]
 8006136:	604b      	str	r3, [r1, #4]
 8006138:	4638      	mov	r0, r7
 800613a:	f104 060b 	add.w	r6, r4, #11
 800613e:	f000 fd83 	bl	8006c48 <__malloc_unlock>
 8006142:	f026 0607 	bic.w	r6, r6, #7
 8006146:	1d23      	adds	r3, r4, #4
 8006148:	1af2      	subs	r2, r6, r3
 800614a:	d0b6      	beq.n	80060ba <_malloc_r+0x22>
 800614c:	1b9b      	subs	r3, r3, r6
 800614e:	50a3      	str	r3, [r4, r2]
 8006150:	e7b3      	b.n	80060ba <_malloc_r+0x22>
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	42a3      	cmp	r3, r4
 8006156:	bf0c      	ite	eq
 8006158:	6032      	streq	r2, [r6, #0]
 800615a:	605a      	strne	r2, [r3, #4]
 800615c:	e7ec      	b.n	8006138 <_malloc_r+0xa0>
 800615e:	4623      	mov	r3, r4
 8006160:	6864      	ldr	r4, [r4, #4]
 8006162:	e7b2      	b.n	80060ca <_malloc_r+0x32>
 8006164:	4634      	mov	r4, r6
 8006166:	6876      	ldr	r6, [r6, #4]
 8006168:	e7b9      	b.n	80060de <_malloc_r+0x46>
 800616a:	230c      	movs	r3, #12
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	4638      	mov	r0, r7
 8006170:	f000 fd6a 	bl	8006c48 <__malloc_unlock>
 8006174:	e7a1      	b.n	80060ba <_malloc_r+0x22>
 8006176:	6025      	str	r5, [r4, #0]
 8006178:	e7de      	b.n	8006138 <_malloc_r+0xa0>
 800617a:	bf00      	nop
 800617c:	20000444 	.word	0x20000444

08006180 <__sfputc_r>:
 8006180:	6893      	ldr	r3, [r2, #8]
 8006182:	3b01      	subs	r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	b410      	push	{r4}
 8006188:	6093      	str	r3, [r2, #8]
 800618a:	da08      	bge.n	800619e <__sfputc_r+0x1e>
 800618c:	6994      	ldr	r4, [r2, #24]
 800618e:	42a3      	cmp	r3, r4
 8006190:	db01      	blt.n	8006196 <__sfputc_r+0x16>
 8006192:	290a      	cmp	r1, #10
 8006194:	d103      	bne.n	800619e <__sfputc_r+0x1e>
 8006196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800619a:	f000 bb33 	b.w	8006804 <__swbuf_r>
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	1c58      	adds	r0, r3, #1
 80061a2:	6010      	str	r0, [r2, #0]
 80061a4:	7019      	strb	r1, [r3, #0]
 80061a6:	4608      	mov	r0, r1
 80061a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <__sfputs_r>:
 80061ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b0:	4606      	mov	r6, r0
 80061b2:	460f      	mov	r7, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	18d5      	adds	r5, r2, r3
 80061b8:	42ac      	cmp	r4, r5
 80061ba:	d101      	bne.n	80061c0 <__sfputs_r+0x12>
 80061bc:	2000      	movs	r0, #0
 80061be:	e007      	b.n	80061d0 <__sfputs_r+0x22>
 80061c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c4:	463a      	mov	r2, r7
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff ffda 	bl	8006180 <__sfputc_r>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d1f3      	bne.n	80061b8 <__sfputs_r+0xa>
 80061d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061d4 <_vfiprintf_r>:
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	460d      	mov	r5, r1
 80061da:	b09d      	sub	sp, #116	; 0x74
 80061dc:	4614      	mov	r4, r2
 80061de:	4698      	mov	r8, r3
 80061e0:	4606      	mov	r6, r0
 80061e2:	b118      	cbz	r0, 80061ec <_vfiprintf_r+0x18>
 80061e4:	6983      	ldr	r3, [r0, #24]
 80061e6:	b90b      	cbnz	r3, 80061ec <_vfiprintf_r+0x18>
 80061e8:	f7ff fe96 	bl	8005f18 <__sinit>
 80061ec:	4b89      	ldr	r3, [pc, #548]	; (8006414 <_vfiprintf_r+0x240>)
 80061ee:	429d      	cmp	r5, r3
 80061f0:	d11b      	bne.n	800622a <_vfiprintf_r+0x56>
 80061f2:	6875      	ldr	r5, [r6, #4]
 80061f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061f6:	07d9      	lsls	r1, r3, #31
 80061f8:	d405      	bmi.n	8006206 <_vfiprintf_r+0x32>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	059a      	lsls	r2, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_vfiprintf_r+0x32>
 8006200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006202:	f7ff ff27 	bl	8006054 <__retarget_lock_acquire_recursive>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	071b      	lsls	r3, r3, #28
 800620a:	d501      	bpl.n	8006210 <_vfiprintf_r+0x3c>
 800620c:	692b      	ldr	r3, [r5, #16]
 800620e:	b9eb      	cbnz	r3, 800624c <_vfiprintf_r+0x78>
 8006210:	4629      	mov	r1, r5
 8006212:	4630      	mov	r0, r6
 8006214:	f000 fb5a 	bl	80068cc <__swsetup_r>
 8006218:	b1c0      	cbz	r0, 800624c <_vfiprintf_r+0x78>
 800621a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800621c:	07dc      	lsls	r4, r3, #31
 800621e:	d50e      	bpl.n	800623e <_vfiprintf_r+0x6a>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	b01d      	add	sp, #116	; 0x74
 8006226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622a:	4b7b      	ldr	r3, [pc, #492]	; (8006418 <_vfiprintf_r+0x244>)
 800622c:	429d      	cmp	r5, r3
 800622e:	d101      	bne.n	8006234 <_vfiprintf_r+0x60>
 8006230:	68b5      	ldr	r5, [r6, #8]
 8006232:	e7df      	b.n	80061f4 <_vfiprintf_r+0x20>
 8006234:	4b79      	ldr	r3, [pc, #484]	; (800641c <_vfiprintf_r+0x248>)
 8006236:	429d      	cmp	r5, r3
 8006238:	bf08      	it	eq
 800623a:	68f5      	ldreq	r5, [r6, #12]
 800623c:	e7da      	b.n	80061f4 <_vfiprintf_r+0x20>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	0598      	lsls	r0, r3, #22
 8006242:	d4ed      	bmi.n	8006220 <_vfiprintf_r+0x4c>
 8006244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006246:	f7ff ff06 	bl	8006056 <__retarget_lock_release_recursive>
 800624a:	e7e9      	b.n	8006220 <_vfiprintf_r+0x4c>
 800624c:	2300      	movs	r3, #0
 800624e:	9309      	str	r3, [sp, #36]	; 0x24
 8006250:	2320      	movs	r3, #32
 8006252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006256:	f8cd 800c 	str.w	r8, [sp, #12]
 800625a:	2330      	movs	r3, #48	; 0x30
 800625c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006420 <_vfiprintf_r+0x24c>
 8006260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006264:	f04f 0901 	mov.w	r9, #1
 8006268:	4623      	mov	r3, r4
 800626a:	469a      	mov	sl, r3
 800626c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006270:	b10a      	cbz	r2, 8006276 <_vfiprintf_r+0xa2>
 8006272:	2a25      	cmp	r2, #37	; 0x25
 8006274:	d1f9      	bne.n	800626a <_vfiprintf_r+0x96>
 8006276:	ebba 0b04 	subs.w	fp, sl, r4
 800627a:	d00b      	beq.n	8006294 <_vfiprintf_r+0xc0>
 800627c:	465b      	mov	r3, fp
 800627e:	4622      	mov	r2, r4
 8006280:	4629      	mov	r1, r5
 8006282:	4630      	mov	r0, r6
 8006284:	f7ff ff93 	bl	80061ae <__sfputs_r>
 8006288:	3001      	adds	r0, #1
 800628a:	f000 80aa 	beq.w	80063e2 <_vfiprintf_r+0x20e>
 800628e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006290:	445a      	add	r2, fp
 8006292:	9209      	str	r2, [sp, #36]	; 0x24
 8006294:	f89a 3000 	ldrb.w	r3, [sl]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80a2 	beq.w	80063e2 <_vfiprintf_r+0x20e>
 800629e:	2300      	movs	r3, #0
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062a8:	f10a 0a01 	add.w	sl, sl, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	9307      	str	r3, [sp, #28]
 80062b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062b4:	931a      	str	r3, [sp, #104]	; 0x68
 80062b6:	4654      	mov	r4, sl
 80062b8:	2205      	movs	r2, #5
 80062ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062be:	4858      	ldr	r0, [pc, #352]	; (8006420 <_vfiprintf_r+0x24c>)
 80062c0:	f7f9 ff86 	bl	80001d0 <memchr>
 80062c4:	9a04      	ldr	r2, [sp, #16]
 80062c6:	b9d8      	cbnz	r0, 8006300 <_vfiprintf_r+0x12c>
 80062c8:	06d1      	lsls	r1, r2, #27
 80062ca:	bf44      	itt	mi
 80062cc:	2320      	movmi	r3, #32
 80062ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062d2:	0713      	lsls	r3, r2, #28
 80062d4:	bf44      	itt	mi
 80062d6:	232b      	movmi	r3, #43	; 0x2b
 80062d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062dc:	f89a 3000 	ldrb.w	r3, [sl]
 80062e0:	2b2a      	cmp	r3, #42	; 0x2a
 80062e2:	d015      	beq.n	8006310 <_vfiprintf_r+0x13c>
 80062e4:	9a07      	ldr	r2, [sp, #28]
 80062e6:	4654      	mov	r4, sl
 80062e8:	2000      	movs	r0, #0
 80062ea:	f04f 0c0a 	mov.w	ip, #10
 80062ee:	4621      	mov	r1, r4
 80062f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f4:	3b30      	subs	r3, #48	; 0x30
 80062f6:	2b09      	cmp	r3, #9
 80062f8:	d94e      	bls.n	8006398 <_vfiprintf_r+0x1c4>
 80062fa:	b1b0      	cbz	r0, 800632a <_vfiprintf_r+0x156>
 80062fc:	9207      	str	r2, [sp, #28]
 80062fe:	e014      	b.n	800632a <_vfiprintf_r+0x156>
 8006300:	eba0 0308 	sub.w	r3, r0, r8
 8006304:	fa09 f303 	lsl.w	r3, r9, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	46a2      	mov	sl, r4
 800630e:	e7d2      	b.n	80062b6 <_vfiprintf_r+0xe2>
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	1d19      	adds	r1, r3, #4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	9103      	str	r1, [sp, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	bfbb      	ittet	lt
 800631c:	425b      	neglt	r3, r3
 800631e:	f042 0202 	orrlt.w	r2, r2, #2
 8006322:	9307      	strge	r3, [sp, #28]
 8006324:	9307      	strlt	r3, [sp, #28]
 8006326:	bfb8      	it	lt
 8006328:	9204      	strlt	r2, [sp, #16]
 800632a:	7823      	ldrb	r3, [r4, #0]
 800632c:	2b2e      	cmp	r3, #46	; 0x2e
 800632e:	d10c      	bne.n	800634a <_vfiprintf_r+0x176>
 8006330:	7863      	ldrb	r3, [r4, #1]
 8006332:	2b2a      	cmp	r3, #42	; 0x2a
 8006334:	d135      	bne.n	80063a2 <_vfiprintf_r+0x1ce>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	9203      	str	r2, [sp, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfb8      	it	lt
 8006342:	f04f 33ff 	movlt.w	r3, #4294967295
 8006346:	3402      	adds	r4, #2
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006430 <_vfiprintf_r+0x25c>
 800634e:	7821      	ldrb	r1, [r4, #0]
 8006350:	2203      	movs	r2, #3
 8006352:	4650      	mov	r0, sl
 8006354:	f7f9 ff3c 	bl	80001d0 <memchr>
 8006358:	b140      	cbz	r0, 800636c <_vfiprintf_r+0x198>
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	eba0 000a 	sub.w	r0, r0, sl
 8006360:	fa03 f000 	lsl.w	r0, r3, r0
 8006364:	9b04      	ldr	r3, [sp, #16]
 8006366:	4303      	orrs	r3, r0
 8006368:	3401      	adds	r4, #1
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006370:	482c      	ldr	r0, [pc, #176]	; (8006424 <_vfiprintf_r+0x250>)
 8006372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006376:	2206      	movs	r2, #6
 8006378:	f7f9 ff2a 	bl	80001d0 <memchr>
 800637c:	2800      	cmp	r0, #0
 800637e:	d03f      	beq.n	8006400 <_vfiprintf_r+0x22c>
 8006380:	4b29      	ldr	r3, [pc, #164]	; (8006428 <_vfiprintf_r+0x254>)
 8006382:	bb1b      	cbnz	r3, 80063cc <_vfiprintf_r+0x1f8>
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	3307      	adds	r3, #7
 8006388:	f023 0307 	bic.w	r3, r3, #7
 800638c:	3308      	adds	r3, #8
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006392:	443b      	add	r3, r7
 8006394:	9309      	str	r3, [sp, #36]	; 0x24
 8006396:	e767      	b.n	8006268 <_vfiprintf_r+0x94>
 8006398:	fb0c 3202 	mla	r2, ip, r2, r3
 800639c:	460c      	mov	r4, r1
 800639e:	2001      	movs	r0, #1
 80063a0:	e7a5      	b.n	80062ee <_vfiprintf_r+0x11a>
 80063a2:	2300      	movs	r3, #0
 80063a4:	3401      	adds	r4, #1
 80063a6:	9305      	str	r3, [sp, #20]
 80063a8:	4619      	mov	r1, r3
 80063aa:	f04f 0c0a 	mov.w	ip, #10
 80063ae:	4620      	mov	r0, r4
 80063b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b4:	3a30      	subs	r2, #48	; 0x30
 80063b6:	2a09      	cmp	r2, #9
 80063b8:	d903      	bls.n	80063c2 <_vfiprintf_r+0x1ee>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0c5      	beq.n	800634a <_vfiprintf_r+0x176>
 80063be:	9105      	str	r1, [sp, #20]
 80063c0:	e7c3      	b.n	800634a <_vfiprintf_r+0x176>
 80063c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c6:	4604      	mov	r4, r0
 80063c8:	2301      	movs	r3, #1
 80063ca:	e7f0      	b.n	80063ae <_vfiprintf_r+0x1da>
 80063cc:	ab03      	add	r3, sp, #12
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	462a      	mov	r2, r5
 80063d2:	4b16      	ldr	r3, [pc, #88]	; (800642c <_vfiprintf_r+0x258>)
 80063d4:	a904      	add	r1, sp, #16
 80063d6:	4630      	mov	r0, r6
 80063d8:	f3af 8000 	nop.w
 80063dc:	4607      	mov	r7, r0
 80063de:	1c78      	adds	r0, r7, #1
 80063e0:	d1d6      	bne.n	8006390 <_vfiprintf_r+0x1bc>
 80063e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e4:	07d9      	lsls	r1, r3, #31
 80063e6:	d405      	bmi.n	80063f4 <_vfiprintf_r+0x220>
 80063e8:	89ab      	ldrh	r3, [r5, #12]
 80063ea:	059a      	lsls	r2, r3, #22
 80063ec:	d402      	bmi.n	80063f4 <_vfiprintf_r+0x220>
 80063ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f0:	f7ff fe31 	bl	8006056 <__retarget_lock_release_recursive>
 80063f4:	89ab      	ldrh	r3, [r5, #12]
 80063f6:	065b      	lsls	r3, r3, #25
 80063f8:	f53f af12 	bmi.w	8006220 <_vfiprintf_r+0x4c>
 80063fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063fe:	e711      	b.n	8006224 <_vfiprintf_r+0x50>
 8006400:	ab03      	add	r3, sp, #12
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	462a      	mov	r2, r5
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <_vfiprintf_r+0x258>)
 8006408:	a904      	add	r1, sp, #16
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f880 	bl	8006510 <_printf_i>
 8006410:	e7e4      	b.n	80063dc <_vfiprintf_r+0x208>
 8006412:	bf00      	nop
 8006414:	08006ddc 	.word	0x08006ddc
 8006418:	08006dfc 	.word	0x08006dfc
 800641c:	08006dbc 	.word	0x08006dbc
 8006420:	08006e1c 	.word	0x08006e1c
 8006424:	08006e26 	.word	0x08006e26
 8006428:	00000000 	.word	0x00000000
 800642c:	080061af 	.word	0x080061af
 8006430:	08006e22 	.word	0x08006e22

08006434 <_printf_common>:
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	4616      	mov	r6, r2
 800643a:	4699      	mov	r9, r3
 800643c:	688a      	ldr	r2, [r1, #8]
 800643e:	690b      	ldr	r3, [r1, #16]
 8006440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006444:	4293      	cmp	r3, r2
 8006446:	bfb8      	it	lt
 8006448:	4613      	movlt	r3, r2
 800644a:	6033      	str	r3, [r6, #0]
 800644c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006450:	4607      	mov	r7, r0
 8006452:	460c      	mov	r4, r1
 8006454:	b10a      	cbz	r2, 800645a <_printf_common+0x26>
 8006456:	3301      	adds	r3, #1
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	0699      	lsls	r1, r3, #26
 800645e:	bf42      	ittt	mi
 8006460:	6833      	ldrmi	r3, [r6, #0]
 8006462:	3302      	addmi	r3, #2
 8006464:	6033      	strmi	r3, [r6, #0]
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	f015 0506 	ands.w	r5, r5, #6
 800646c:	d106      	bne.n	800647c <_printf_common+0x48>
 800646e:	f104 0a19 	add.w	sl, r4, #25
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	6832      	ldr	r2, [r6, #0]
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	42ab      	cmp	r3, r5
 800647a:	dc26      	bgt.n	80064ca <_printf_common+0x96>
 800647c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006480:	1e13      	subs	r3, r2, #0
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	bf18      	it	ne
 8006486:	2301      	movne	r3, #1
 8006488:	0692      	lsls	r2, r2, #26
 800648a:	d42b      	bmi.n	80064e4 <_printf_common+0xb0>
 800648c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006490:	4649      	mov	r1, r9
 8006492:	4638      	mov	r0, r7
 8006494:	47c0      	blx	r8
 8006496:	3001      	adds	r0, #1
 8006498:	d01e      	beq.n	80064d8 <_printf_common+0xa4>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	68e5      	ldr	r5, [r4, #12]
 800649e:	6832      	ldr	r2, [r6, #0]
 80064a0:	f003 0306 	and.w	r3, r3, #6
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	bf08      	it	eq
 80064a8:	1aad      	subeq	r5, r5, r2
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	6922      	ldr	r2, [r4, #16]
 80064ae:	bf0c      	ite	eq
 80064b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b4:	2500      	movne	r5, #0
 80064b6:	4293      	cmp	r3, r2
 80064b8:	bfc4      	itt	gt
 80064ba:	1a9b      	subgt	r3, r3, r2
 80064bc:	18ed      	addgt	r5, r5, r3
 80064be:	2600      	movs	r6, #0
 80064c0:	341a      	adds	r4, #26
 80064c2:	42b5      	cmp	r5, r6
 80064c4:	d11a      	bne.n	80064fc <_printf_common+0xc8>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e008      	b.n	80064dc <_printf_common+0xa8>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4652      	mov	r2, sl
 80064ce:	4649      	mov	r1, r9
 80064d0:	4638      	mov	r0, r7
 80064d2:	47c0      	blx	r8
 80064d4:	3001      	adds	r0, #1
 80064d6:	d103      	bne.n	80064e0 <_printf_common+0xac>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	3501      	adds	r5, #1
 80064e2:	e7c6      	b.n	8006472 <_printf_common+0x3e>
 80064e4:	18e1      	adds	r1, r4, r3
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	2030      	movs	r0, #48	; 0x30
 80064ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ee:	4422      	add	r2, r4
 80064f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064f8:	3302      	adds	r3, #2
 80064fa:	e7c7      	b.n	800648c <_printf_common+0x58>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4622      	mov	r2, r4
 8006500:	4649      	mov	r1, r9
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d0e6      	beq.n	80064d8 <_printf_common+0xa4>
 800650a:	3601      	adds	r6, #1
 800650c:	e7d9      	b.n	80064c2 <_printf_common+0x8e>
	...

08006510 <_printf_i>:
 8006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	7e0f      	ldrb	r7, [r1, #24]
 8006516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006518:	2f78      	cmp	r7, #120	; 0x78
 800651a:	4691      	mov	r9, r2
 800651c:	4680      	mov	r8, r0
 800651e:	460c      	mov	r4, r1
 8006520:	469a      	mov	sl, r3
 8006522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006526:	d807      	bhi.n	8006538 <_printf_i+0x28>
 8006528:	2f62      	cmp	r7, #98	; 0x62
 800652a:	d80a      	bhi.n	8006542 <_printf_i+0x32>
 800652c:	2f00      	cmp	r7, #0
 800652e:	f000 80d8 	beq.w	80066e2 <_printf_i+0x1d2>
 8006532:	2f58      	cmp	r7, #88	; 0x58
 8006534:	f000 80a3 	beq.w	800667e <_printf_i+0x16e>
 8006538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800653c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006540:	e03a      	b.n	80065b8 <_printf_i+0xa8>
 8006542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006546:	2b15      	cmp	r3, #21
 8006548:	d8f6      	bhi.n	8006538 <_printf_i+0x28>
 800654a:	a101      	add	r1, pc, #4	; (adr r1, 8006550 <_printf_i+0x40>)
 800654c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065bd 	.word	0x080065bd
 8006558:	08006539 	.word	0x08006539
 800655c:	08006539 	.word	0x08006539
 8006560:	08006539 	.word	0x08006539
 8006564:	08006539 	.word	0x08006539
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006539 	.word	0x08006539
 8006570:	08006539 	.word	0x08006539
 8006574:	08006539 	.word	0x08006539
 8006578:	08006539 	.word	0x08006539
 800657c:	080066c9 	.word	0x080066c9
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080066ab 	.word	0x080066ab
 8006588:	08006539 	.word	0x08006539
 800658c:	08006539 	.word	0x08006539
 8006590:	080066eb 	.word	0x080066eb
 8006594:	08006539 	.word	0x08006539
 8006598:	080065ed 	.word	0x080065ed
 800659c:	08006539 	.word	0x08006539
 80065a0:	08006539 	.word	0x08006539
 80065a4:	080066b3 	.word	0x080066b3
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	602a      	str	r2, [r5, #0]
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0a3      	b.n	8006704 <_printf_i+0x1f4>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	6829      	ldr	r1, [r5, #0]
 80065c0:	0606      	lsls	r6, r0, #24
 80065c2:	f101 0304 	add.w	r3, r1, #4
 80065c6:	d50a      	bpl.n	80065de <_printf_i+0xce>
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	2e00      	cmp	r6, #0
 80065ce:	da03      	bge.n	80065d8 <_printf_i+0xc8>
 80065d0:	232d      	movs	r3, #45	; 0x2d
 80065d2:	4276      	negs	r6, r6
 80065d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d8:	485e      	ldr	r0, [pc, #376]	; (8006754 <_printf_i+0x244>)
 80065da:	230a      	movs	r3, #10
 80065dc:	e019      	b.n	8006612 <_printf_i+0x102>
 80065de:	680e      	ldr	r6, [r1, #0]
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e6:	bf18      	it	ne
 80065e8:	b236      	sxthne	r6, r6
 80065ea:	e7ef      	b.n	80065cc <_printf_i+0xbc>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	6029      	str	r1, [r5, #0]
 80065f4:	0601      	lsls	r1, r0, #24
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0xec>
 80065f8:	681e      	ldr	r6, [r3, #0]
 80065fa:	e002      	b.n	8006602 <_printf_i+0xf2>
 80065fc:	0646      	lsls	r6, r0, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0xe8>
 8006600:	881e      	ldrh	r6, [r3, #0]
 8006602:	4854      	ldr	r0, [pc, #336]	; (8006754 <_printf_i+0x244>)
 8006604:	2f6f      	cmp	r7, #111	; 0x6f
 8006606:	bf0c      	ite	eq
 8006608:	2308      	moveq	r3, #8
 800660a:	230a      	movne	r3, #10
 800660c:	2100      	movs	r1, #0
 800660e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006612:	6865      	ldr	r5, [r4, #4]
 8006614:	60a5      	str	r5, [r4, #8]
 8006616:	2d00      	cmp	r5, #0
 8006618:	bfa2      	ittt	ge
 800661a:	6821      	ldrge	r1, [r4, #0]
 800661c:	f021 0104 	bicge.w	r1, r1, #4
 8006620:	6021      	strge	r1, [r4, #0]
 8006622:	b90e      	cbnz	r6, 8006628 <_printf_i+0x118>
 8006624:	2d00      	cmp	r5, #0
 8006626:	d04d      	beq.n	80066c4 <_printf_i+0x1b4>
 8006628:	4615      	mov	r5, r2
 800662a:	fbb6 f1f3 	udiv	r1, r6, r3
 800662e:	fb03 6711 	mls	r7, r3, r1, r6
 8006632:	5dc7      	ldrb	r7, [r0, r7]
 8006634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006638:	4637      	mov	r7, r6
 800663a:	42bb      	cmp	r3, r7
 800663c:	460e      	mov	r6, r1
 800663e:	d9f4      	bls.n	800662a <_printf_i+0x11a>
 8006640:	2b08      	cmp	r3, #8
 8006642:	d10b      	bne.n	800665c <_printf_i+0x14c>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07de      	lsls	r6, r3, #31
 8006648:	d508      	bpl.n	800665c <_printf_i+0x14c>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	4299      	cmp	r1, r3
 8006650:	bfde      	ittt	le
 8006652:	2330      	movle	r3, #48	; 0x30
 8006654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800665c:	1b52      	subs	r2, r2, r5
 800665e:	6122      	str	r2, [r4, #16]
 8006660:	f8cd a000 	str.w	sl, [sp]
 8006664:	464b      	mov	r3, r9
 8006666:	aa03      	add	r2, sp, #12
 8006668:	4621      	mov	r1, r4
 800666a:	4640      	mov	r0, r8
 800666c:	f7ff fee2 	bl	8006434 <_printf_common>
 8006670:	3001      	adds	r0, #1
 8006672:	d14c      	bne.n	800670e <_printf_i+0x1fe>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	b004      	add	sp, #16
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	4835      	ldr	r0, [pc, #212]	; (8006754 <_printf_i+0x244>)
 8006680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006684:	6829      	ldr	r1, [r5, #0]
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	f851 6b04 	ldr.w	r6, [r1], #4
 800668c:	6029      	str	r1, [r5, #0]
 800668e:	061d      	lsls	r5, r3, #24
 8006690:	d514      	bpl.n	80066bc <_printf_i+0x1ac>
 8006692:	07df      	lsls	r7, r3, #31
 8006694:	bf44      	itt	mi
 8006696:	f043 0320 	orrmi.w	r3, r3, #32
 800669a:	6023      	strmi	r3, [r4, #0]
 800669c:	b91e      	cbnz	r6, 80066a6 <_printf_i+0x196>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	f023 0320 	bic.w	r3, r3, #32
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	2310      	movs	r3, #16
 80066a8:	e7b0      	b.n	800660c <_printf_i+0xfc>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f043 0320 	orr.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2378      	movs	r3, #120	; 0x78
 80066b4:	4828      	ldr	r0, [pc, #160]	; (8006758 <_printf_i+0x248>)
 80066b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066ba:	e7e3      	b.n	8006684 <_printf_i+0x174>
 80066bc:	0659      	lsls	r1, r3, #25
 80066be:	bf48      	it	mi
 80066c0:	b2b6      	uxthmi	r6, r6
 80066c2:	e7e6      	b.n	8006692 <_printf_i+0x182>
 80066c4:	4615      	mov	r5, r2
 80066c6:	e7bb      	b.n	8006640 <_printf_i+0x130>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	6826      	ldr	r6, [r4, #0]
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6028      	str	r0, [r5, #0]
 80066d2:	0635      	lsls	r5, r6, #24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0x1cc>
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0x1d2>
 80066dc:	0670      	lsls	r0, r6, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0x1c8>
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	4615      	mov	r5, r2
 80066e8:	e7ba      	b.n	8006660 <_printf_i+0x150>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	602a      	str	r2, [r5, #0]
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7f9 fd6a 	bl	80001d0 <memchr>
 80066fc:	b108      	cbz	r0, 8006702 <_printf_i+0x1f2>
 80066fe:	1b40      	subs	r0, r0, r5
 8006700:	6060      	str	r0, [r4, #4]
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	2300      	movs	r3, #0
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670c:	e7a8      	b.n	8006660 <_printf_i+0x150>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	462a      	mov	r2, r5
 8006712:	4649      	mov	r1, r9
 8006714:	4640      	mov	r0, r8
 8006716:	47d0      	blx	sl
 8006718:	3001      	adds	r0, #1
 800671a:	d0ab      	beq.n	8006674 <_printf_i+0x164>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d413      	bmi.n	800674a <_printf_i+0x23a>
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	4298      	cmp	r0, r3
 8006728:	bfb8      	it	lt
 800672a:	4618      	movlt	r0, r3
 800672c:	e7a4      	b.n	8006678 <_printf_i+0x168>
 800672e:	2301      	movs	r3, #1
 8006730:	4632      	mov	r2, r6
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d09b      	beq.n	8006674 <_printf_i+0x164>
 800673c:	3501      	adds	r5, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	9903      	ldr	r1, [sp, #12]
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	42ab      	cmp	r3, r5
 8006746:	dcf2      	bgt.n	800672e <_printf_i+0x21e>
 8006748:	e7eb      	b.n	8006722 <_printf_i+0x212>
 800674a:	2500      	movs	r5, #0
 800674c:	f104 0619 	add.w	r6, r4, #25
 8006750:	e7f5      	b.n	800673e <_printf_i+0x22e>
 8006752:	bf00      	nop
 8006754:	08006e2d 	.word	0x08006e2d
 8006758:	08006e3e 	.word	0x08006e3e

0800675c <_sbrk_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4d06      	ldr	r5, [pc, #24]	; (8006778 <_sbrk_r+0x1c>)
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	f7fa fe5e 	bl	8001428 <_sbrk>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_sbrk_r+0x1a>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_sbrk_r+0x1a>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	2000044c 	.word	0x2000044c

0800677c <__sread>:
 800677c:	b510      	push	{r4, lr}
 800677e:	460c      	mov	r4, r1
 8006780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006784:	f000 fab2 	bl	8006cec <_read_r>
 8006788:	2800      	cmp	r0, #0
 800678a:	bfab      	itete	ge
 800678c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800678e:	89a3      	ldrhlt	r3, [r4, #12]
 8006790:	181b      	addge	r3, r3, r0
 8006792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006796:	bfac      	ite	ge
 8006798:	6563      	strge	r3, [r4, #84]	; 0x54
 800679a:	81a3      	strhlt	r3, [r4, #12]
 800679c:	bd10      	pop	{r4, pc}

0800679e <__swrite>:
 800679e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a2:	461f      	mov	r7, r3
 80067a4:	898b      	ldrh	r3, [r1, #12]
 80067a6:	05db      	lsls	r3, r3, #23
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	4616      	mov	r6, r2
 80067ae:	d505      	bpl.n	80067bc <__swrite+0x1e>
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	2302      	movs	r3, #2
 80067b6:	2200      	movs	r2, #0
 80067b8:	f000 f9c8 	bl	8006b4c <_lseek_r>
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c6:	81a3      	strh	r3, [r4, #12]
 80067c8:	4632      	mov	r2, r6
 80067ca:	463b      	mov	r3, r7
 80067cc:	4628      	mov	r0, r5
 80067ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	f000 b869 	b.w	80068a8 <_write_r>

080067d6 <__sseek>:
 80067d6:	b510      	push	{r4, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067de:	f000 f9b5 	bl	8006b4c <_lseek_r>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	bf15      	itete	ne
 80067e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80067ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067f2:	81a3      	strheq	r3, [r4, #12]
 80067f4:	bf18      	it	ne
 80067f6:	81a3      	strhne	r3, [r4, #12]
 80067f8:	bd10      	pop	{r4, pc}

080067fa <__sclose>:
 80067fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fe:	f000 b8d3 	b.w	80069a8 <_close_r>
	...

08006804 <__swbuf_r>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	460e      	mov	r6, r1
 8006808:	4614      	mov	r4, r2
 800680a:	4605      	mov	r5, r0
 800680c:	b118      	cbz	r0, 8006816 <__swbuf_r+0x12>
 800680e:	6983      	ldr	r3, [r0, #24]
 8006810:	b90b      	cbnz	r3, 8006816 <__swbuf_r+0x12>
 8006812:	f7ff fb81 	bl	8005f18 <__sinit>
 8006816:	4b21      	ldr	r3, [pc, #132]	; (800689c <__swbuf_r+0x98>)
 8006818:	429c      	cmp	r4, r3
 800681a:	d12b      	bne.n	8006874 <__swbuf_r+0x70>
 800681c:	686c      	ldr	r4, [r5, #4]
 800681e:	69a3      	ldr	r3, [r4, #24]
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	071a      	lsls	r2, r3, #28
 8006826:	d52f      	bpl.n	8006888 <__swbuf_r+0x84>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	b36b      	cbz	r3, 8006888 <__swbuf_r+0x84>
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	1ac0      	subs	r0, r0, r3
 8006832:	6963      	ldr	r3, [r4, #20]
 8006834:	b2f6      	uxtb	r6, r6
 8006836:	4283      	cmp	r3, r0
 8006838:	4637      	mov	r7, r6
 800683a:	dc04      	bgt.n	8006846 <__swbuf_r+0x42>
 800683c:	4621      	mov	r1, r4
 800683e:	4628      	mov	r0, r5
 8006840:	f000 f948 	bl	8006ad4 <_fflush_r>
 8006844:	bb30      	cbnz	r0, 8006894 <__swbuf_r+0x90>
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	3b01      	subs	r3, #1
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	6022      	str	r2, [r4, #0]
 8006852:	701e      	strb	r6, [r3, #0]
 8006854:	6963      	ldr	r3, [r4, #20]
 8006856:	3001      	adds	r0, #1
 8006858:	4283      	cmp	r3, r0
 800685a:	d004      	beq.n	8006866 <__swbuf_r+0x62>
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	07db      	lsls	r3, r3, #31
 8006860:	d506      	bpl.n	8006870 <__swbuf_r+0x6c>
 8006862:	2e0a      	cmp	r6, #10
 8006864:	d104      	bne.n	8006870 <__swbuf_r+0x6c>
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f000 f933 	bl	8006ad4 <_fflush_r>
 800686e:	b988      	cbnz	r0, 8006894 <__swbuf_r+0x90>
 8006870:	4638      	mov	r0, r7
 8006872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <__swbuf_r+0x9c>)
 8006876:	429c      	cmp	r4, r3
 8006878:	d101      	bne.n	800687e <__swbuf_r+0x7a>
 800687a:	68ac      	ldr	r4, [r5, #8]
 800687c:	e7cf      	b.n	800681e <__swbuf_r+0x1a>
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <__swbuf_r+0xa0>)
 8006880:	429c      	cmp	r4, r3
 8006882:	bf08      	it	eq
 8006884:	68ec      	ldreq	r4, [r5, #12]
 8006886:	e7ca      	b.n	800681e <__swbuf_r+0x1a>
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f81e 	bl	80068cc <__swsetup_r>
 8006890:	2800      	cmp	r0, #0
 8006892:	d0cb      	beq.n	800682c <__swbuf_r+0x28>
 8006894:	f04f 37ff 	mov.w	r7, #4294967295
 8006898:	e7ea      	b.n	8006870 <__swbuf_r+0x6c>
 800689a:	bf00      	nop
 800689c:	08006ddc 	.word	0x08006ddc
 80068a0:	08006dfc 	.word	0x08006dfc
 80068a4:	08006dbc 	.word	0x08006dbc

080068a8 <_write_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d07      	ldr	r5, [pc, #28]	; (80068c8 <_write_r+0x20>)
 80068ac:	4604      	mov	r4, r0
 80068ae:	4608      	mov	r0, r1
 80068b0:	4611      	mov	r1, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	602a      	str	r2, [r5, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f7fa fd65 	bl	8001386 <_write>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_write_r+0x1e>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_write_r+0x1e>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	2000044c 	.word	0x2000044c

080068cc <__swsetup_r>:
 80068cc:	4b32      	ldr	r3, [pc, #200]	; (8006998 <__swsetup_r+0xcc>)
 80068ce:	b570      	push	{r4, r5, r6, lr}
 80068d0:	681d      	ldr	r5, [r3, #0]
 80068d2:	4606      	mov	r6, r0
 80068d4:	460c      	mov	r4, r1
 80068d6:	b125      	cbz	r5, 80068e2 <__swsetup_r+0x16>
 80068d8:	69ab      	ldr	r3, [r5, #24]
 80068da:	b913      	cbnz	r3, 80068e2 <__swsetup_r+0x16>
 80068dc:	4628      	mov	r0, r5
 80068de:	f7ff fb1b 	bl	8005f18 <__sinit>
 80068e2:	4b2e      	ldr	r3, [pc, #184]	; (800699c <__swsetup_r+0xd0>)
 80068e4:	429c      	cmp	r4, r3
 80068e6:	d10f      	bne.n	8006908 <__swsetup_r+0x3c>
 80068e8:	686c      	ldr	r4, [r5, #4]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068f0:	0719      	lsls	r1, r3, #28
 80068f2:	d42c      	bmi.n	800694e <__swsetup_r+0x82>
 80068f4:	06dd      	lsls	r5, r3, #27
 80068f6:	d411      	bmi.n	800691c <__swsetup_r+0x50>
 80068f8:	2309      	movs	r3, #9
 80068fa:	6033      	str	r3, [r6, #0]
 80068fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	f04f 30ff 	mov.w	r0, #4294967295
 8006906:	e03e      	b.n	8006986 <__swsetup_r+0xba>
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <__swsetup_r+0xd4>)
 800690a:	429c      	cmp	r4, r3
 800690c:	d101      	bne.n	8006912 <__swsetup_r+0x46>
 800690e:	68ac      	ldr	r4, [r5, #8]
 8006910:	e7eb      	b.n	80068ea <__swsetup_r+0x1e>
 8006912:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <__swsetup_r+0xd8>)
 8006914:	429c      	cmp	r4, r3
 8006916:	bf08      	it	eq
 8006918:	68ec      	ldreq	r4, [r5, #12]
 800691a:	e7e6      	b.n	80068ea <__swsetup_r+0x1e>
 800691c:	0758      	lsls	r0, r3, #29
 800691e:	d512      	bpl.n	8006946 <__swsetup_r+0x7a>
 8006920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006922:	b141      	cbz	r1, 8006936 <__swsetup_r+0x6a>
 8006924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006928:	4299      	cmp	r1, r3
 800692a:	d002      	beq.n	8006932 <__swsetup_r+0x66>
 800692c:	4630      	mov	r0, r6
 800692e:	f000 f991 	bl	8006c54 <_free_r>
 8006932:	2300      	movs	r3, #0
 8006934:	6363      	str	r3, [r4, #52]	; 0x34
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	2300      	movs	r3, #0
 8006940:	6063      	str	r3, [r4, #4]
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f043 0308 	orr.w	r3, r3, #8
 800694c:	81a3      	strh	r3, [r4, #12]
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	b94b      	cbnz	r3, 8006966 <__swsetup_r+0x9a>
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695c:	d003      	beq.n	8006966 <__swsetup_r+0x9a>
 800695e:	4621      	mov	r1, r4
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f92b 	bl	8006bbc <__smakebuf_r>
 8006966:	89a0      	ldrh	r0, [r4, #12]
 8006968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800696c:	f010 0301 	ands.w	r3, r0, #1
 8006970:	d00a      	beq.n	8006988 <__swsetup_r+0xbc>
 8006972:	2300      	movs	r3, #0
 8006974:	60a3      	str	r3, [r4, #8]
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	425b      	negs	r3, r3
 800697a:	61a3      	str	r3, [r4, #24]
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	b943      	cbnz	r3, 8006992 <__swsetup_r+0xc6>
 8006980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006984:	d1ba      	bne.n	80068fc <__swsetup_r+0x30>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	0781      	lsls	r1, r0, #30
 800698a:	bf58      	it	pl
 800698c:	6963      	ldrpl	r3, [r4, #20]
 800698e:	60a3      	str	r3, [r4, #8]
 8006990:	e7f4      	b.n	800697c <__swsetup_r+0xb0>
 8006992:	2000      	movs	r0, #0
 8006994:	e7f7      	b.n	8006986 <__swsetup_r+0xba>
 8006996:	bf00      	nop
 8006998:	20000010 	.word	0x20000010
 800699c:	08006ddc 	.word	0x08006ddc
 80069a0:	08006dfc 	.word	0x08006dfc
 80069a4:	08006dbc 	.word	0x08006dbc

080069a8 <_close_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d06      	ldr	r5, [pc, #24]	; (80069c4 <_close_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fa fd03 	bl	80013be <_close>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_close_r+0x1a>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_close_r+0x1a>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	2000044c 	.word	0x2000044c

080069c8 <__sflush_r>:
 80069c8:	898a      	ldrh	r2, [r1, #12]
 80069ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ce:	4605      	mov	r5, r0
 80069d0:	0710      	lsls	r0, r2, #28
 80069d2:	460c      	mov	r4, r1
 80069d4:	d458      	bmi.n	8006a88 <__sflush_r+0xc0>
 80069d6:	684b      	ldr	r3, [r1, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc05      	bgt.n	80069e8 <__sflush_r+0x20>
 80069dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	dc02      	bgt.n	80069e8 <__sflush_r+0x20>
 80069e2:	2000      	movs	r0, #0
 80069e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	d0f9      	beq.n	80069e2 <__sflush_r+0x1a>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069f4:	682f      	ldr	r7, [r5, #0]
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	d032      	beq.n	8006a60 <__sflush_r+0x98>
 80069fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	075a      	lsls	r2, r3, #29
 8006a00:	d505      	bpl.n	8006a0e <__sflush_r+0x46>
 8006a02:	6863      	ldr	r3, [r4, #4]
 8006a04:	1ac0      	subs	r0, r0, r3
 8006a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a08:	b10b      	cbz	r3, 8006a0e <__sflush_r+0x46>
 8006a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a0c:	1ac0      	subs	r0, r0, r3
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4602      	mov	r2, r0
 8006a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a14:	6a21      	ldr	r1, [r4, #32]
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b0      	blx	r6
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	d106      	bne.n	8006a2e <__sflush_r+0x66>
 8006a20:	6829      	ldr	r1, [r5, #0]
 8006a22:	291d      	cmp	r1, #29
 8006a24:	d82c      	bhi.n	8006a80 <__sflush_r+0xb8>
 8006a26:	4a2a      	ldr	r2, [pc, #168]	; (8006ad0 <__sflush_r+0x108>)
 8006a28:	40ca      	lsrs	r2, r1
 8006a2a:	07d6      	lsls	r6, r2, #31
 8006a2c:	d528      	bpl.n	8006a80 <__sflush_r+0xb8>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	6062      	str	r2, [r4, #4]
 8006a32:	04d9      	lsls	r1, r3, #19
 8006a34:	6922      	ldr	r2, [r4, #16]
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	d504      	bpl.n	8006a44 <__sflush_r+0x7c>
 8006a3a:	1c42      	adds	r2, r0, #1
 8006a3c:	d101      	bne.n	8006a42 <__sflush_r+0x7a>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	b903      	cbnz	r3, 8006a44 <__sflush_r+0x7c>
 8006a42:	6560      	str	r0, [r4, #84]	; 0x54
 8006a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a46:	602f      	str	r7, [r5, #0]
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	d0ca      	beq.n	80069e2 <__sflush_r+0x1a>
 8006a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a50:	4299      	cmp	r1, r3
 8006a52:	d002      	beq.n	8006a5a <__sflush_r+0x92>
 8006a54:	4628      	mov	r0, r5
 8006a56:	f000 f8fd 	bl	8006c54 <_free_r>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a5e:	e7c1      	b.n	80069e4 <__sflush_r+0x1c>
 8006a60:	6a21      	ldr	r1, [r4, #32]
 8006a62:	2301      	movs	r3, #1
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b0      	blx	r6
 8006a68:	1c41      	adds	r1, r0, #1
 8006a6a:	d1c7      	bne.n	80069fc <__sflush_r+0x34>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0c4      	beq.n	80069fc <__sflush_r+0x34>
 8006a72:	2b1d      	cmp	r3, #29
 8006a74:	d001      	beq.n	8006a7a <__sflush_r+0xb2>
 8006a76:	2b16      	cmp	r3, #22
 8006a78:	d101      	bne.n	8006a7e <__sflush_r+0xb6>
 8006a7a:	602f      	str	r7, [r5, #0]
 8006a7c:	e7b1      	b.n	80069e2 <__sflush_r+0x1a>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	e7ad      	b.n	80069e4 <__sflush_r+0x1c>
 8006a88:	690f      	ldr	r7, [r1, #16]
 8006a8a:	2f00      	cmp	r7, #0
 8006a8c:	d0a9      	beq.n	80069e2 <__sflush_r+0x1a>
 8006a8e:	0793      	lsls	r3, r2, #30
 8006a90:	680e      	ldr	r6, [r1, #0]
 8006a92:	bf08      	it	eq
 8006a94:	694b      	ldreq	r3, [r1, #20]
 8006a96:	600f      	str	r7, [r1, #0]
 8006a98:	bf18      	it	ne
 8006a9a:	2300      	movne	r3, #0
 8006a9c:	eba6 0807 	sub.w	r8, r6, r7
 8006aa0:	608b      	str	r3, [r1, #8]
 8006aa2:	f1b8 0f00 	cmp.w	r8, #0
 8006aa6:	dd9c      	ble.n	80069e2 <__sflush_r+0x1a>
 8006aa8:	6a21      	ldr	r1, [r4, #32]
 8006aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006aac:	4643      	mov	r3, r8
 8006aae:	463a      	mov	r2, r7
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b0      	blx	r6
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	dc06      	bgt.n	8006ac6 <__sflush_r+0xfe>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006abe:	81a3      	strh	r3, [r4, #12]
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac4:	e78e      	b.n	80069e4 <__sflush_r+0x1c>
 8006ac6:	4407      	add	r7, r0
 8006ac8:	eba8 0800 	sub.w	r8, r8, r0
 8006acc:	e7e9      	b.n	8006aa2 <__sflush_r+0xda>
 8006ace:	bf00      	nop
 8006ad0:	20400001 	.word	0x20400001

08006ad4 <_fflush_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	690b      	ldr	r3, [r1, #16]
 8006ad8:	4605      	mov	r5, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	b913      	cbnz	r3, 8006ae4 <_fflush_r+0x10>
 8006ade:	2500      	movs	r5, #0
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	b118      	cbz	r0, 8006aee <_fflush_r+0x1a>
 8006ae6:	6983      	ldr	r3, [r0, #24]
 8006ae8:	b90b      	cbnz	r3, 8006aee <_fflush_r+0x1a>
 8006aea:	f7ff fa15 	bl	8005f18 <__sinit>
 8006aee:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <_fflush_r+0x6c>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	d11b      	bne.n	8006b2c <_fflush_r+0x58>
 8006af4:	686c      	ldr	r4, [r5, #4]
 8006af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0ef      	beq.n	8006ade <_fflush_r+0xa>
 8006afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b00:	07d0      	lsls	r0, r2, #31
 8006b02:	d404      	bmi.n	8006b0e <_fflush_r+0x3a>
 8006b04:	0599      	lsls	r1, r3, #22
 8006b06:	d402      	bmi.n	8006b0e <_fflush_r+0x3a>
 8006b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0a:	f7ff faa3 	bl	8006054 <__retarget_lock_acquire_recursive>
 8006b0e:	4628      	mov	r0, r5
 8006b10:	4621      	mov	r1, r4
 8006b12:	f7ff ff59 	bl	80069c8 <__sflush_r>
 8006b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b18:	07da      	lsls	r2, r3, #31
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	d4e0      	bmi.n	8006ae0 <_fflush_r+0xc>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	059b      	lsls	r3, r3, #22
 8006b22:	d4dd      	bmi.n	8006ae0 <_fflush_r+0xc>
 8006b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b26:	f7ff fa96 	bl	8006056 <__retarget_lock_release_recursive>
 8006b2a:	e7d9      	b.n	8006ae0 <_fflush_r+0xc>
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <_fflush_r+0x70>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d101      	bne.n	8006b36 <_fflush_r+0x62>
 8006b32:	68ac      	ldr	r4, [r5, #8]
 8006b34:	e7df      	b.n	8006af6 <_fflush_r+0x22>
 8006b36:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <_fflush_r+0x74>)
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	bf08      	it	eq
 8006b3c:	68ec      	ldreq	r4, [r5, #12]
 8006b3e:	e7da      	b.n	8006af6 <_fflush_r+0x22>
 8006b40:	08006ddc 	.word	0x08006ddc
 8006b44:	08006dfc 	.word	0x08006dfc
 8006b48:	08006dbc 	.word	0x08006dbc

08006b4c <_lseek_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4d07      	ldr	r5, [pc, #28]	; (8006b6c <_lseek_r+0x20>)
 8006b50:	4604      	mov	r4, r0
 8006b52:	4608      	mov	r0, r1
 8006b54:	4611      	mov	r1, r2
 8006b56:	2200      	movs	r2, #0
 8006b58:	602a      	str	r2, [r5, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f7fa fc56 	bl	800140c <_lseek>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_lseek_r+0x1e>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_lseek_r+0x1e>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	2000044c 	.word	0x2000044c

08006b70 <__swhatbuf_r>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	460e      	mov	r6, r1
 8006b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	b096      	sub	sp, #88	; 0x58
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	461d      	mov	r5, r3
 8006b80:	da08      	bge.n	8006b94 <__swhatbuf_r+0x24>
 8006b82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	061a      	lsls	r2, r3, #24
 8006b8c:	d410      	bmi.n	8006bb0 <__swhatbuf_r+0x40>
 8006b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b92:	e00e      	b.n	8006bb2 <__swhatbuf_r+0x42>
 8006b94:	466a      	mov	r2, sp
 8006b96:	f000 f8bb 	bl	8006d10 <_fstat_r>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	dbf1      	blt.n	8006b82 <__swhatbuf_r+0x12>
 8006b9e:	9a01      	ldr	r2, [sp, #4]
 8006ba0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ba4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ba8:	425a      	negs	r2, r3
 8006baa:	415a      	adcs	r2, r3
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	e7ee      	b.n	8006b8e <__swhatbuf_r+0x1e>
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	b016      	add	sp, #88	; 0x58
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bbc <__smakebuf_r>:
 8006bbc:	898b      	ldrh	r3, [r1, #12]
 8006bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bc0:	079d      	lsls	r5, r3, #30
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	d507      	bpl.n	8006bd8 <__smakebuf_r+0x1c>
 8006bc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	6123      	str	r3, [r4, #16]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	6163      	str	r3, [r4, #20]
 8006bd4:	b002      	add	sp, #8
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	ab01      	add	r3, sp, #4
 8006bda:	466a      	mov	r2, sp
 8006bdc:	f7ff ffc8 	bl	8006b70 <__swhatbuf_r>
 8006be0:	9900      	ldr	r1, [sp, #0]
 8006be2:	4605      	mov	r5, r0
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff fa57 	bl	8006098 <_malloc_r>
 8006bea:	b948      	cbnz	r0, 8006c00 <__smakebuf_r+0x44>
 8006bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf0:	059a      	lsls	r2, r3, #22
 8006bf2:	d4ef      	bmi.n	8006bd4 <__smakebuf_r+0x18>
 8006bf4:	f023 0303 	bic.w	r3, r3, #3
 8006bf8:	f043 0302 	orr.w	r3, r3, #2
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	e7e3      	b.n	8006bc8 <__smakebuf_r+0xc>
 8006c00:	4b0d      	ldr	r3, [pc, #52]	; (8006c38 <__smakebuf_r+0x7c>)
 8006c02:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	6020      	str	r0, [r4, #0]
 8006c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	6163      	str	r3, [r4, #20]
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	6120      	str	r0, [r4, #16]
 8006c16:	b15b      	cbz	r3, 8006c30 <__smakebuf_r+0x74>
 8006c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f000 f889 	bl	8006d34 <_isatty_r>
 8006c22:	b128      	cbz	r0, 8006c30 <__smakebuf_r+0x74>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	f043 0301 	orr.w	r3, r3, #1
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	89a0      	ldrh	r0, [r4, #12]
 8006c32:	4305      	orrs	r5, r0
 8006c34:	81a5      	strh	r5, [r4, #12]
 8006c36:	e7cd      	b.n	8006bd4 <__smakebuf_r+0x18>
 8006c38:	08005eb1 	.word	0x08005eb1

08006c3c <__malloc_lock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	; (8006c44 <__malloc_lock+0x8>)
 8006c3e:	f7ff ba09 	b.w	8006054 <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	20000440 	.word	0x20000440

08006c48 <__malloc_unlock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__malloc_unlock+0x8>)
 8006c4a:	f7ff ba04 	b.w	8006056 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	20000440 	.word	0x20000440

08006c54 <_free_r>:
 8006c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c56:	2900      	cmp	r1, #0
 8006c58:	d044      	beq.n	8006ce4 <_free_r+0x90>
 8006c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c5e:	9001      	str	r0, [sp, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f1a1 0404 	sub.w	r4, r1, #4
 8006c66:	bfb8      	it	lt
 8006c68:	18e4      	addlt	r4, r4, r3
 8006c6a:	f7ff ffe7 	bl	8006c3c <__malloc_lock>
 8006c6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ce8 <_free_r+0x94>)
 8006c70:	9801      	ldr	r0, [sp, #4]
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	b933      	cbnz	r3, 8006c84 <_free_r+0x30>
 8006c76:	6063      	str	r3, [r4, #4]
 8006c78:	6014      	str	r4, [r2, #0]
 8006c7a:	b003      	add	sp, #12
 8006c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c80:	f7ff bfe2 	b.w	8006c48 <__malloc_unlock>
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	d908      	bls.n	8006c9a <_free_r+0x46>
 8006c88:	6825      	ldr	r5, [r4, #0]
 8006c8a:	1961      	adds	r1, r4, r5
 8006c8c:	428b      	cmp	r3, r1
 8006c8e:	bf01      	itttt	eq
 8006c90:	6819      	ldreq	r1, [r3, #0]
 8006c92:	685b      	ldreq	r3, [r3, #4]
 8006c94:	1949      	addeq	r1, r1, r5
 8006c96:	6021      	streq	r1, [r4, #0]
 8006c98:	e7ed      	b.n	8006c76 <_free_r+0x22>
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	b10b      	cbz	r3, 8006ca4 <_free_r+0x50>
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d9fa      	bls.n	8006c9a <_free_r+0x46>
 8006ca4:	6811      	ldr	r1, [r2, #0]
 8006ca6:	1855      	adds	r5, r2, r1
 8006ca8:	42a5      	cmp	r5, r4
 8006caa:	d10b      	bne.n	8006cc4 <_free_r+0x70>
 8006cac:	6824      	ldr	r4, [r4, #0]
 8006cae:	4421      	add	r1, r4
 8006cb0:	1854      	adds	r4, r2, r1
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	6011      	str	r1, [r2, #0]
 8006cb6:	d1e0      	bne.n	8006c7a <_free_r+0x26>
 8006cb8:	681c      	ldr	r4, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	6053      	str	r3, [r2, #4]
 8006cbe:	4421      	add	r1, r4
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	e7da      	b.n	8006c7a <_free_r+0x26>
 8006cc4:	d902      	bls.n	8006ccc <_free_r+0x78>
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	6003      	str	r3, [r0, #0]
 8006cca:	e7d6      	b.n	8006c7a <_free_r+0x26>
 8006ccc:	6825      	ldr	r5, [r4, #0]
 8006cce:	1961      	adds	r1, r4, r5
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	bf04      	itt	eq
 8006cd4:	6819      	ldreq	r1, [r3, #0]
 8006cd6:	685b      	ldreq	r3, [r3, #4]
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	bf04      	itt	eq
 8006cdc:	1949      	addeq	r1, r1, r5
 8006cde:	6021      	streq	r1, [r4, #0]
 8006ce0:	6054      	str	r4, [r2, #4]
 8006ce2:	e7ca      	b.n	8006c7a <_free_r+0x26>
 8006ce4:	b003      	add	sp, #12
 8006ce6:	bd30      	pop	{r4, r5, pc}
 8006ce8:	20000444 	.word	0x20000444

08006cec <_read_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d07      	ldr	r5, [pc, #28]	; (8006d0c <_read_r+0x20>)
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	602a      	str	r2, [r5, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f7fa fb26 	bl	800134c <_read>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_read_r+0x1e>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_read_r+0x1e>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	2000044c 	.word	0x2000044c

08006d10 <_fstat_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	; (8006d30 <_fstat_r+0x20>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	602b      	str	r3, [r5, #0]
 8006d1e:	f7fa fb5a 	bl	80013d6 <_fstat>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	d102      	bne.n	8006d2c <_fstat_r+0x1c>
 8006d26:	682b      	ldr	r3, [r5, #0]
 8006d28:	b103      	cbz	r3, 8006d2c <_fstat_r+0x1c>
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}
 8006d2e:	bf00      	nop
 8006d30:	2000044c 	.word	0x2000044c

08006d34 <_isatty_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d06      	ldr	r5, [pc, #24]	; (8006d50 <_isatty_r+0x1c>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	f7fa fb59 	bl	80013f6 <_isatty>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_isatty_r+0x1a>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_isatty_r+0x1a>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	2000044c 	.word	0x2000044c

08006d54 <_init>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr

08006d60 <_fini>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr
