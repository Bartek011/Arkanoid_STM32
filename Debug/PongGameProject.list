
PongGameProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006354  08006354  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800635c  0800635c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000074  080063d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080063d8  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cd4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002508  00000000  00000000  00030d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00033280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00034130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c9a  00000000  00000000  00034f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010761  00000000  00000000  0005dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe643  00000000  00000000  0006e30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c94e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004518  00000000  00000000  0016c9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006258 	.word	0x08006258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006258 	.word	0x08006258

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 ff16 	bl	80013a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_setRST(LCD_RST_GPIO_Port, LCD_RST_Pin);
 800057c:	2108      	movs	r1, #8
 800057e:	484e      	ldr	r0, [pc, #312]	; (80006b8 <main+0x144>)
 8000580:	f000 fab4 	bl	8000aec <LCD_setRST>
  LCD_setCE(LCD_CE_GPIO_Port, LCD_CE_Pin);
 8000584:	2104      	movs	r1, #4
 8000586:	484c      	ldr	r0, [pc, #304]	; (80006b8 <main+0x144>)
 8000588:	f000 fac4 	bl	8000b14 <LCD_setCE>
  LCD_setDC(LCD_DC_GPIO_Port, LCD_DC_Pin);
 800058c:	2102      	movs	r1, #2
 800058e:	484a      	ldr	r0, [pc, #296]	; (80006b8 <main+0x144>)
 8000590:	f000 fad4 	bl	8000b3c <LCD_setDC>
  LCD_setDIN(LCD_DIN_GPIO_Port, LCD_DIN_Pin);
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	4847      	ldr	r0, [pc, #284]	; (80006b8 <main+0x144>)
 800059a:	f000 fae3 	bl	8000b64 <LCD_setDIN>
  LCD_setCLK(LCD_CLK_GPIO_Port, LCD_CLK_Pin);
 800059e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a2:	4845      	ldr	r0, [pc, #276]	; (80006b8 <main+0x144>)
 80005a4:	f000 faf2 	bl	8000b8c <LCD_setCLK>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f896 	bl	80006d8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f9bc 	bl	8000928 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f99c 	bl	80008ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f96a 	bl	800088c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b8:	f000 f8e0 	bl	800077c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, joystick, 2);
 80005bc:	2202      	movs	r2, #2
 80005be:	493f      	ldr	r1, [pc, #252]	; (80006bc <main+0x148>)
 80005c0:	483f      	ldr	r0, [pc, #252]	; (80006c0 <main+0x14c>)
 80005c2:	f001 fa99 	bl	8001af8 <HAL_ADC_Start_DMA>
  LCD_init();
 80005c6:	f000 fb79 	bl	8000cbc <LCD_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_drawHLine(platform_pos, PLATFORM_LVL, platform_length); // poczatkowe polozenie platformy
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <main+0x150>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <main+0x154>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	212f      	movs	r1, #47	; 0x2f
 80005d8:	f000 fc6e 	bl	8000eb8 <LCD_drawHLine>
  LCD_refreshArea(platform_pos, PLATFORM_LVL, platform_pos + platform_length, PLATFORM_LVL);
 80005dc:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <main+0x150>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <main+0x150>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <main+0x154>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	441a      	add	r2, r3
 80005ee:	232f      	movs	r3, #47	; 0x2f
 80005f0:	212f      	movs	r1, #47	; 0x2f
 80005f2:	f000 fbb7 	bl	8000d64 <LCD_refreshArea>
		  }
		  for (int i = 64; i > 0; i--){
			  PlatformMoveLeft(i, 20);
			  //HAL_Delay(50);
		  }*/
		  if (JOY1 > 2300){
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <main+0x148>)
 80005f8:	885b      	ldrh	r3, [r3, #2]
 80005fa:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80005fe:	4293      	cmp	r3, r2
 8000600:	d923      	bls.n	800064a <main+0xd6>
			  joystick_left += JOY1;
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <main+0x148>)
 8000604:	885a      	ldrh	r2, [r3, #2]
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <main+0x158>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <main+0x158>)
 8000610:	801a      	strh	r2, [r3, #0]
			  if (joystick_left > (4030 * JOYSTICK_DELAY) && platform_pos > 0){
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0x158>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	f64e 4222 	movw	r2, #60450	; 0xec22
 800061a:	4293      	cmp	r3, r2
 800061c:	d915      	bls.n	800064a <main+0xd6>
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <main+0x150>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d011      	beq.n	800064a <main+0xd6>
				  PlatformMoveLeft(platform_pos, platform_length);
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <main+0x150>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <main+0x154>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4610      	mov	r0, r2
 8000634:	f000 fa07 	bl	8000a46 <PlatformMoveLeft>
				  platform_pos--;
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <main+0x150>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <main+0x150>)
 8000642:	701a      	strb	r2, [r3, #0]
				  joystick_left = 0;
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <main+0x158>)
 8000646:	2200      	movs	r2, #0
 8000648:	801a      	strh	r2, [r3, #0]
			  }
		  }
		  if (JOY1 < 1600){
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <main+0x148>)
 800064c:	885b      	ldrh	r3, [r3, #2]
 800064e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000652:	d22a      	bcs.n	80006aa <main+0x136>
			  joystick_right += (1899 - JOY1);
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <main+0x15c>)
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <main+0x148>)
 800065a:	885b      	ldrh	r3, [r3, #2]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <main+0x15c>)
 8000668:	801a      	strh	r2, [r3, #0]
			  if (joystick_right > (3768 * JOYSTICK_DELAY) && (platform_pos + platform_length) < 84){
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <main+0x15c>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	f64d 42c8 	movw	r2, #56520	; 0xdcc8
 8000672:	4293      	cmp	r3, r2
 8000674:	d919      	bls.n	80006aa <main+0x136>
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0x150>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <main+0x154>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4413      	add	r3, r2
 8000682:	2b53      	cmp	r3, #83	; 0x53
 8000684:	dc11      	bgt.n	80006aa <main+0x136>
				  PlatformMoveRight(platform_pos, platform_length);
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <main+0x150>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <main+0x154>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	4610      	mov	r0, r2
 8000694:	f000 f9ae 	bl	80009f4 <PlatformMoveRight>
				  platform_pos++;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <main+0x150>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <main+0x150>)
 80006a2:	701a      	strb	r2, [r3, #0]
				  joystick_right = 0;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <main+0x15c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	801a      	strh	r2, [r3, #0]
			  }
		  }
		  printf("%d\n", JOY1);
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <main+0x148>)
 80006ac:	885b      	ldrh	r3, [r3, #2]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <main+0x160>)
 80006b2:	f004 fe43 	bl	800533c <iprintf>
		  if (JOY1 > 2300){
 80006b6:	e79e      	b.n	80005f6 <main+0x82>
 80006b8:	48000800 	.word	0x48000800
 80006bc:	200001c0 	.word	0x200001c0
 80006c0:	20000090 	.word	0x20000090
 80006c4:	20000001 	.word	0x20000001
 80006c8:	20000000 	.word	0x20000000
 80006cc:	200001c4 	.word	0x200001c4
 80006d0:	200001c6 	.word	0x200001c6
 80006d4:	08006270 	.word	0x08006270

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	; 0x58
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2244      	movs	r2, #68	; 0x44
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fe20 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006fe:	f002 fd8f 	bl	8003220 <HAL_PWREx_ControlVoltageScaling>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000708:	f000 f9ea 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000714:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2310      	movs	r3, #16
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071e:	2302      	movs	r3, #2
 8000720:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000726:	230a      	movs	r3, #10
 8000728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800072a:	2307      	movs	r3, #7
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fdc6 	bl	80032cc <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000746:	f000 f9cb 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	2104      	movs	r1, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f003 f98e 	bl	8003a84 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076e:	f000 f9b7 	bl	8000ae0 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3758      	adds	r7, #88	; 0x58
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800079e:	4b37      	ldr	r3, [pc, #220]	; (800087c <MX_ADC1_Init+0x100>)
 80007a0:	4a37      	ldr	r2, [pc, #220]	; (8000880 <MX_ADC1_Init+0x104>)
 80007a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80007a4:	4b35      	ldr	r3, [pc, #212]	; (800087c <MX_ADC1_Init+0x100>)
 80007a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ac:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_ADC1_Init+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b32      	ldr	r3, [pc, #200]	; (800087c <MX_ADC1_Init+0x100>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_ADC1_Init+0x100>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b2f      	ldr	r3, [pc, #188]	; (800087c <MX_ADC1_Init+0x100>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c4:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_ADC1_Init+0x100>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_ADC1_Init+0x100>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_ADC1_Init+0x100>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_ADC1_Init+0x100>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_ADC1_Init+0x100>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_ADC1_Init+0x100>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_ADC1_Init+0x100>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_ADC1_Init+0x100>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_ADC1_Init+0x100>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_ADC1_Init+0x100>)
 8000802:	f001 f823 	bl	800184c <HAL_ADC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800080c:	f000 f968 	bl	8000ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_ADC1_Init+0x100>)
 800081c:	f001 ff76 	bl	800270c <HAL_ADCEx_MultiModeConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000826:	f000 f95b 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_ADC1_Init+0x108>)
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082e:	2306      	movs	r3, #6
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000832:	2307      	movs	r3, #7
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000836:	237f      	movs	r3, #127	; 0x7f
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_ADC1_Init+0x100>)
 8000848:	f001 fa30 	bl	8001cac <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000852:	f000 f945 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_ADC1_Init+0x10c>)
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800085a:	230c      	movs	r3, #12
 800085c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_ADC1_Init+0x100>)
 8000864:	f001 fa22 	bl	8001cac <HAL_ADC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800086e:	f000 f937 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000090 	.word	0x20000090
 8000880:	50040000 	.word	0x50040000
 8000884:	25b00200 	.word	0x25b00200
 8000888:	2e300800 	.word	0x2e300800

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART2_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008d0:	f003 ffb8 	bl	8004844 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f901 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000013c 	.word	0x2000013c
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA_Init+0x38>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <MX_DMA_Init+0x38>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6493      	str	r3, [r2, #72]	; 0x48
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_DMA_Init+0x38>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200b      	movs	r0, #11
 8000910:	f002 f887 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000914:	200b      	movs	r0, #11
 8000916:	f002 f8a0 	bl	8002a5a <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a24      	ldr	r2, [pc, #144]	; (80009ec <MX_GPIO_Init+0xc4>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_GPIO_Init+0xc4>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 800099e:	2200      	movs	r2, #0
 80009a0:	f640 410e 	movw	r1, #3086	; 0xc0e
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_GPIO_Init+0xc8>)
 80009a6:	f002 fc15 	bl	80031d4 <HAL_GPIO_WritePin>
                          |LCD_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0xc8>)
 80009c2:	f002 fa5d 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin LCD_DIN_Pin
                           LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin|LCD_DIN_Pin
 80009c6:	f640 430e 	movw	r3, #3086	; 0xc0e
 80009ca:	617b      	str	r3, [r7, #20]
                          |LCD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xc8>)
 80009e0:	f002 fa4e 	bl	8002e80 <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000800 	.word	0x48000800

080009f4 <PlatformMoveRight>:

/* USER CODE BEGIN 4 */
static void PlatformMoveRight(int startPoint, int length){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint, PLATFORM_LVL, 0); // zgaś lewy skrajny pxl
 80009fe:	2200      	movs	r2, #0
 8000a00:	212f      	movs	r1, #47	; 0x2f
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f9fc 	bl	8000e00 <LCD_setPixel>
	LCD_refreshArea(startPoint, PLATFORM_LVL, startPoint, PLATFORM_LVL);
 8000a08:	232f      	movs	r3, #47	; 0x2f
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	212f      	movs	r1, #47	; 0x2f
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f9a8 	bl	8000d64 <LCD_refreshArea>
	LCD_setPixel(startPoint+length+1, PLATFORM_LVL, 1); // zapal prawy skrajny pxl
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	212f      	movs	r1, #47	; 0x2f
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f9ed 	bl	8000e00 <LCD_setPixel>
	LCD_refreshArea(startPoint+length+1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	1c58      	adds	r0, r3, #1
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	232f      	movs	r3, #47	; 0x2f
 8000a38:	212f      	movs	r1, #47	; 0x2f
 8000a3a:	f000 f993 	bl	8000d64 <LCD_refreshArea>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <PlatformMoveLeft>:
static void PlatformMoveLeft(int startPoint, int length){
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
	LCD_setPixel(startPoint+length, PLATFORM_LVL, 0); // zgas prawy skrajny pxl
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	2200      	movs	r2, #0
 8000a58:	212f      	movs	r1, #47	; 0x2f
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f9d0 	bl	8000e00 <LCD_setPixel>
	LCD_refreshArea(startPoint+length, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	18d0      	adds	r0, r2, r3
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	232f      	movs	r3, #47	; 0x2f
 8000a70:	212f      	movs	r1, #47	; 0x2f
 8000a72:	f000 f977 	bl	8000d64 <LCD_refreshArea>
	LCD_setPixel(startPoint-1, PLATFORM_LVL, 1); // zapal lewy skrajny pxl
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	212f      	movs	r1, #47	; 0x2f
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f9be 	bl	8000e00 <LCD_setPixel>
	LCD_refreshArea(startPoint-1, PLATFORM_LVL, startPoint+length+1, PLATFORM_LVL);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1e58      	subs	r0, r3, #1
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	232f      	movs	r3, #47	; 0x2f
 8000a92:	212f      	movs	r1, #47	; 0x2f
 8000a94:	f000 f966 	bl	8000d64 <LCD_refreshArea>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <__io_putchar>:
int __io_putchar(int ch)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	d109      	bne.n	8000ac2 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8000aae:	230d      	movs	r3, #13
 8000ab0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000ab2:	f107 010f 	add.w	r1, r7, #15
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	2201      	movs	r2, #1
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <__io_putchar+0x3c>)
 8000abe:	f003 ff0f 	bl	80048e0 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ac2:	1d39      	adds	r1, r7, #4
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <__io_putchar+0x3c>)
 8000acc:	f003 ff08 	bl	80048e0 <HAL_UART_Transmit>
	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000013c 	.word	0x2000013c

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <LCD_setRST+0x24>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <LCD_setRST+0x24>)
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	8093      	strh	r3, [r2, #4]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	200003c4 	.word	0x200003c4

08000b14 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8000b20:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <LCD_setCE+0x24>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <LCD_setCE+0x24>)
 8000b28:	887b      	ldrh	r3, [r7, #2]
 8000b2a:	8193      	strh	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	200003c4 	.word	0x200003c4

08000b3c <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <LCD_setDC+0x24>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <LCD_setDC+0x24>)
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	8293      	strh	r3, [r2, #20]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	200003c4 	.word	0x200003c4

08000b64 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <LCD_setDIN+0x24>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <LCD_setDIN+0x24>)
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	8393      	strh	r3, [r2, #28]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	200003c4 	.word	0x200003c4

08000b8c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000b98:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <LCD_setCLK+0x24>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <LCD_setCLK+0x24>)
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	200003c4 	.word	0x200003c4

08000bb4 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e026      	b.n	8000c12 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <LCD_send+0x70>)
 8000bc6:	6998      	ldr	r0, [r3, #24]
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <LCD_send+0x70>)
 8000bca:	8b99      	ldrh	r1, [r3, #28]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f1c3 0307 	rsb	r3, r3, #7
 8000bd4:	fa42 f303 	asr.w	r3, r2, r3
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	f002 faf4 	bl	80031d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <LCD_send+0x70>)
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <LCD_send+0x70>)
 8000bf2:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 faec 	bl	80031d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <LCD_send+0x70>)
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <LCD_send+0x70>)
 8000c02:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000c04:	2200      	movs	r2, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fae4 	bl	80031d4 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d9d5      	bls.n	8000bc4 <LCD_send+0x10>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200003c4 	.word	0x200003c4

08000c28 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	460a      	mov	r2, r1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d11c      	bne.n	8000c78 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <LCD_write+0x90>)
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <LCD_write+0x90>)
 8000c44:	8a91      	ldrh	r1, [r2, #20]
 8000c46:	2200      	movs	r2, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fac3 	bl	80031d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <LCD_write+0x90>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <LCD_write+0x90>)
 8000c54:	8991      	ldrh	r1, [r2, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fabb 	bl	80031d4 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ffa7 	bl	8000bb4 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <LCD_write+0x90>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <LCD_write+0x90>)
 8000c6c:	8991      	ldrh	r1, [r2, #12]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 faaf 	bl	80031d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000c76:	e01b      	b.n	8000cb0 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <LCD_write+0x90>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LCD_write+0x90>)
 8000c7e:	8a91      	ldrh	r1, [r2, #20]
 8000c80:	2201      	movs	r2, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 faa6 	bl	80031d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <LCD_write+0x90>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LCD_write+0x90>)
 8000c8e:	8991      	ldrh	r1, [r2, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fa9e 	bl	80031d4 <HAL_GPIO_WritePin>
    LCD_send(data);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff8a 	bl	8000bb4 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <LCD_write+0x90>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <LCD_write+0x90>)
 8000ca6:	8991      	ldrh	r1, [r2, #12]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fa92 	bl	80031d4 <HAL_GPIO_WritePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200003c4 	.word	0x200003c4

08000cbc <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <LCD_init+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <LCD_init+0x64>)
 8000cc6:	8891      	ldrh	r1, [r2, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fa82 	bl	80031d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <LCD_init+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <LCD_init+0x64>)
 8000cd6:	8891      	ldrh	r1, [r2, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fa7a 	bl	80031d4 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2021      	movs	r0, #33	; 0x21
 8000ce4:	f7ff ffa0 	bl	8000c28 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000ce8:	2100      	movs	r1, #0
 8000cea:	20b8      	movs	r0, #184	; 0xb8
 8000cec:	f7ff ff9c 	bl	8000c28 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f7ff ff98 	bl	8000c28 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2014      	movs	r0, #20
 8000cfc:	f7ff ff94 	bl	8000c28 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000d00:	2100      	movs	r1, #0
 8000d02:	2020      	movs	r0, #32
 8000d04:	f7ff ff90 	bl	8000c28 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000d08:	2100      	movs	r1, #0
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f7ff ff8c 	bl	8000c28 <LCD_write>
  LCD_clrScr();
 8000d10:	f000 f80a 	bl	8000d28 <LCD_clrScr>
  lcd.inverttext = false;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <LCD_init+0x68>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200003c4 	.word	0x200003c4
 8000d24:	200001c8 	.word	0x200001c8

08000d28 <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	e00b      	b.n	8000d4c <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000d34:	2101      	movs	r1, #1
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff76 	bl	8000c28 <LCD_write>
    lcd.buffer[i] = 0;
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <LCD_clrScr+0x38>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000d52:	dbef      	blt.n	8000d34 <LCD_clrScr+0xc>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001c8 	.word	0x200001c8

08000d64 <LCD_refreshArea>:
 * @param xmin: starting point on the x-axis
 * @param xmax: ending point on the x-axis
 * @param ymin: starting point on the y-axis
 * @param ymax: ending point on the y-axis
 */
void LCD_refreshArea(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax){
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	4611      	mov	r1, r2
 8000d70:	461a      	mov	r2, r3
 8000d72:	4623      	mov	r3, r4
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	4603      	mov	r3, r0
 8000d78:	71bb      	strb	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	717b      	strb	r3, [r7, #5]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	713b      	strb	r3, [r7, #4]
  for(int i = 0; i < 6; i++){
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e02f      	b.n	8000de8 <LCD_refreshArea+0x84>
    if(i * 8 > ymax){
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	00da      	lsls	r2, r3, #3
 8000d8c:	793b      	ldrb	r3, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dc2e      	bgt.n	8000df0 <LCD_refreshArea+0x8c>
      break;
    }
    //LCD_goXY(xmin, i);
    LCD_write(LCD_SETYADDR | i, LCD_COMMAND);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff41 	bl	8000c28 <LCD_write>
    LCD_write(LCD_SETXADDR | xmin, LCD_COMMAND);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff39 	bl	8000c28 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	e00e      	b.n	8000dda <LCD_refreshArea+0x76>
      LCD_write(lcd.buffer[(i * LCD_WIDTH) + j], LCD_DATA);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2254      	movs	r2, #84	; 0x54
 8000dc0:	fb03 f202 	mul.w	r2, r3, r2
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <LCD_refreshArea+0x98>)
 8000dca:	5cd3      	ldrb	r3, [r2, r3]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff2a 	bl	8000c28 <LCD_write>
    for(int j = xmin; j <= xmax; j++){
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	797b      	ldrb	r3, [r7, #5]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	ddec      	ble.n	8000dbc <LCD_refreshArea+0x58>
  for(int i = 0; i < 6; i++){
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b05      	cmp	r3, #5
 8000dec:	ddcc      	ble.n	8000d88 <LCD_refreshArea+0x24>
    }
  }
}
 8000dee:	e000      	b.n	8000df2 <LCD_refreshArea+0x8e>
      break;
 8000df0:	bf00      	nop
}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001c8 	.word	0x200001c8

08000e00 <LCD_setPixel>:

/*
 * @brief Sets a pixel on the screen
 */
void LCD_setPixel(uint8_t x, uint8_t y, bool pixel){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	71bb      	strb	r3, [r7, #6]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	717b      	strb	r3, [r7, #5]
  if(x >= LCD_WIDTH)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b53      	cmp	r3, #83	; 0x53
 8000e16:	d901      	bls.n	8000e1c <LCD_setPixel+0x1c>
    x = LCD_WIDTH - 1;
 8000e18:	2353      	movs	r3, #83	; 0x53
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if(y >= LCD_HEIGHT)
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	2b2f      	cmp	r3, #47	; 0x2f
 8000e20:	d901      	bls.n	8000e26 <LCD_setPixel+0x26>
    y = LCD_HEIGHT - 1;
 8000e22:	232f      	movs	r3, #47	; 0x2f
 8000e24:	71bb      	strb	r3, [r7, #6]
    
  if(pixel != false){
 8000e26:	797b      	ldrb	r3, [r7, #5]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01d      	beq.n	8000e68 <LCD_setPixel+0x68>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] |= 1 << (y % 8);
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	08db      	lsrs	r3, r3, #3
 8000e32:	b2d8      	uxtb	r0, r3
 8000e34:	4601      	mov	r1, r0
 8000e36:	2354      	movs	r3, #84	; 0x54
 8000e38:	fb01 f303 	mul.w	r3, r1, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <LCD_setPixel+0xb4>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b259      	sxtb	r1, r3
 8000e56:	79fa      	ldrb	r2, [r7, #7]
 8000e58:	2354      	movs	r3, #84	; 0x54
 8000e5a:	fb00 f303 	mul.w	r3, r0, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2c9      	uxtb	r1, r1
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <LCD_setPixel+0xb4>)
 8000e64:	54d1      	strb	r1, [r2, r3]
  }
  else{
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
  }
}
 8000e66:	e01e      	b.n	8000ea6 <LCD_setPixel+0xa6>
    lcd.buffer[x + (y / 8) * LCD_WIDTH] &= ~(1 << (y % 8));
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	b2d8      	uxtb	r0, r3
 8000e70:	4601      	mov	r1, r0
 8000e72:	2354      	movs	r3, #84	; 0x54
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LCD_setPixel+0xb4>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	4013      	ands	r3, r2
 8000e94:	b259      	sxtb	r1, r3
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	2354      	movs	r3, #84	; 0x54
 8000e9a:	fb00 f303 	mul.w	r3, r0, r3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b2c9      	uxtb	r1, r1
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <LCD_setPixel+0xb4>)
 8000ea4:	54d1      	strb	r1, [r2, r3]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001c8 	.word	0x200001c8

08000eb8 <LCD_drawHLine>:
 * @brief Draws a horizontal line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void LCD_drawHLine(int x, int y, int l){
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  int by, bi;

  if ((x>=0) && (x<LCD_WIDTH) && (y>=0) && (y<LCD_HEIGHT)){
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db3a      	blt.n	8000f40 <LCD_drawHLine+0x88>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b53      	cmp	r3, #83	; 0x53
 8000ece:	dc37      	bgt.n	8000f40 <LCD_drawHLine+0x88>
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db34      	blt.n	8000f40 <LCD_drawHLine+0x88>
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b2f      	cmp	r3, #47	; 0x2f
 8000eda:	dc31      	bgt.n	8000f40 <LCD_drawHLine+0x88>
    for (int cx=0; cx<l; cx++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	e02a      	b.n	8000f38 <LCD_drawHLine+0x80>
      by=((y/8)*84)+x;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da00      	bge.n	8000eea <LCD_drawHLine+0x32>
 8000ee8:	3307      	adds	r3, #7
 8000eea:	10db      	asrs	r3, r3, #3
 8000eec:	461a      	mov	r2, r3
 8000eee:	2354      	movs	r3, #84	; 0x54
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      bi=y % 8;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	425a      	negs	r2, r3
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	f002 0207 	and.w	r2, r2, #7
 8000f06:	bf58      	it	pl
 8000f08:	4253      	negpl	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
      lcd.buffer[by+cx] |= (1<<bi);
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LCD_drawHLine+0x94>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	b25a      	sxtb	r2, r3
 8000f18:	2101      	movs	r1, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b259      	sxtb	r1, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2c9      	uxtb	r1, r1
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <LCD_drawHLine+0x94>)
 8000f30:	54d1      	strb	r1, [r2, r3]
    for (int cx=0; cx<l; cx++){
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbd0      	blt.n	8000ee2 <LCD_drawHLine+0x2a>
    }
  }
}
 8000f40:	bf00      	nop
 8000f42:	3724      	adds	r7, #36	; 0x24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	200001c8 	.word	0x200001c8

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_MspInit+0x44>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6613      	str	r3, [r2, #96]	; 0x60
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_MspInit+0x44>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_MspInit+0x44>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_MspInit+0x44>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ac      	sub	sp, #176	; 0xb0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2288      	movs	r2, #136	; 0x88
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 f9b7 	bl	800532c <memset>
  if(hadc->Instance==ADC1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a3d      	ldr	r2, [pc, #244]	; (80010b8 <HAL_ADC_MspInit+0x120>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d172      	bne.n	80010ae <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fcc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 ff67 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001004:	f7ff fd6c 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <HAL_ADC_MspInit+0x124>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <HAL_ADC_MspInit+0x124>)
 800100e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_ADC_MspInit+0x124>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_ADC_MspInit+0x124>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_ADC_MspInit+0x124>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_ADC_MspInit+0x124>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001038:	2350      	movs	r3, #80	; 0x50
 800103a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800103e:	230b      	movs	r3, #11
 8001040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f001 ff14 	bl	8002e80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 800105a:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <HAL_ADC_MspInit+0x12c>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 8001080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 8001088:	2220      	movs	r2, #32
 800108a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 8001094:	f001 fcfc 	bl	8002a90 <HAL_DMA_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800109e:	f7ff fd1f 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 80010a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_ADC_MspInit+0x128>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	37b0      	adds	r7, #176	; 0xb0
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	50040000 	.word	0x50040000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	200000f4 	.word	0x200000f4
 80010c4:	40020008 	.word	0x40020008

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ac      	sub	sp, #176	; 0xb0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2288      	movs	r2, #136	; 0x88
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 f91f 	bl	800532c <memset>
  if(huart->Instance==USART2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a21      	ldr	r2, [pc, #132]	; (8001178 <HAL_UART_MspInit+0xb0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d13b      	bne.n	8001170 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fee1 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001110:	f7ff fce6 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_UART_MspInit+0xb4>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_UART_MspInit+0xb4>)
 800111a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111e:	6593      	str	r3, [r2, #88]	; 0x58
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_UART_MspInit+0xb4>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_UART_MspInit+0xb4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <HAL_UART_MspInit+0xb4>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_UART_MspInit+0xb4>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001144:	230c      	movs	r3, #12
 8001146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115c:	2307      	movs	r3, #7
 800115e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 fe88 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	37b0      	adds	r7, #176	; 0xb0
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f948 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA1_Channel1_IRQHandler+0x10>)
 80011da:	f001 fd71 	bl	8002cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000f4 	.word	0x200000f4

080011e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	e00a      	b.n	8001210 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011fa:	f3af 8000 	nop.w
 80011fe:	4601      	mov	r1, r0
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	b2ca      	uxtb	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf0      	blt.n	80011fa <_read+0x12>
  }

  return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e009      	b.n	8001248 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60ba      	str	r2, [r7, #8]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fc2f 	bl	8000aa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf1      	blt.n	8001234 <_write+0x12>
  }
  return len;
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_close>:

int _close(int file)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001282:	605a      	str	r2, [r3, #4]
  return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_isatty>:

int _isatty(int file)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f003 fff0 	bl	80052d8 <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20018000 	.word	0x20018000
 8001324:	00000400 	.word	0x00000400
 8001328:	200003ec 	.word	0x200003ec
 800132c:	20000408 	.word	0x20000408

08001330 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SystemInit+0x20>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <SystemInit+0x20>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001358:	f7ff ffea 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <LoopForever+0x6>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LoopForever+0xe>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <LoopForever+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f003 ffaf 	bl	80052e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001386:	f7ff f8f5 	bl	8000574 <main>

0800138a <LoopForever>:

LoopForever:
    b LoopForever
 800138a:	e7fe      	b.n	800138a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800138c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001398:	08006364 	.word	0x08006364
  ldr r2, =_sbss
 800139c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013a0:	20000404 	.word	0x20000404

080013a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC1_2_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_Init+0x3c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_Init+0x3c>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013be:	2003      	movs	r0, #3
 80013c0:	f001 fb24 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 f80f 	bl	80013e8 <HAL_InitTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	e001      	b.n	80013da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d6:	f7ff fdbb 	bl	8000f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013da:	79fb      	ldrb	r3, [r7, #7]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_InitTick+0x6c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_InitTick+0x70>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_InitTick+0x6c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fb2f 	bl	8002a76 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d809      	bhi.n	8001438 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f001 faf9 	bl	8002a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_InitTick+0x74>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e007      	b.n	8001448 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e004      	b.n	8001448 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e001      	b.n	8001448 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000000c 	.word	0x2000000c
 8001458:	20000004 	.word	0x20000004
 800145c:	20000008 	.word	0x20000008

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000000c 	.word	0x2000000c
 8001484:	200003f0 	.word	0x200003f0

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200003f0 	.word	0x200003f0

080014a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3360      	adds	r3, #96	; 0x60
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <LL_ADC_SetOffset+0x44>)
 800152a:	4013      	ands	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	4313      	orrs	r3, r2
 8001538:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	03fff000 	.word	0x03fff000

08001550 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3360      	adds	r3, #96	; 0x60
 800155e:	461a      	mov	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3360      	adds	r3, #96	; 0x60
 800158c:	461a      	mov	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3330      	adds	r3, #48	; 0x30
 80015e8:	461a      	mov	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	211f      	movs	r1, #31
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0e9b      	lsrs	r3, r3, #26
 8001610:	f003 011f 	and.w	r1, r3, #31
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	431a      	orrs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3314      	adds	r3, #20
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	0e5b      	lsrs	r3, r3, #25
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	0d1b      	lsrs	r3, r3, #20
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2107      	movs	r1, #7
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	0d1b      	lsrs	r3, r3, #20
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0318 	and.w	r3, r3, #24
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80016ac:	40d9      	lsrs	r1, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	400b      	ands	r3, r1
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	431a      	orrs	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	0007ffff 	.word	0x0007ffff

080016d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6093      	str	r3, [r2, #8]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001724:	d101      	bne.n	800172a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800174c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001774:	d101      	bne.n	800177a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <LL_ADC_IsEnabled+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_ADC_IsEnabled+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ea:	f043 0204 	orr.w	r2, r3, #4
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b04      	cmp	r3, #4
 8001810:	d101      	bne.n	8001816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b08      	cmp	r3, #8
 8001836:	d101      	bne.n	800183c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e136      	b.n	8001ad4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fb8f 	bl	8000f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff3f 	bl	8001710 <LL_ADC_IsDeepPowerDownEnabled>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff25 	bl	80016ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff5a 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d115      	bne.n	80018de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff3e 	bl	8001738 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018bc:	4b87      	ldr	r3, [pc, #540]	; (8001adc <HAL_ADC_Init+0x290>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	4a87      	ldr	r2, [pc, #540]	; (8001ae0 <HAL_ADC_Init+0x294>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	3301      	adds	r3, #1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff3c 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	f043 0210 	orr.w	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff75 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 8001914:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 80cf 	bne.w	8001ac2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 80cb 	bne.w	8001ac2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001934:	f043 0202 	orr.w	r2, r3, #2
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff35 	bl	80017b0 <LL_ADC_IsEnabled>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d115      	bne.n	8001978 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800194c:	4865      	ldr	r0, [pc, #404]	; (8001ae4 <HAL_ADC_Init+0x298>)
 800194e:	f7ff ff2f 	bl	80017b0 <LL_ADC_IsEnabled>
 8001952:	4604      	mov	r4, r0
 8001954:	4864      	ldr	r0, [pc, #400]	; (8001ae8 <HAL_ADC_Init+0x29c>)
 8001956:	f7ff ff2b 	bl	80017b0 <LL_ADC_IsEnabled>
 800195a:	4603      	mov	r3, r0
 800195c:	431c      	orrs	r4, r3
 800195e:	4863      	ldr	r0, [pc, #396]	; (8001aec <HAL_ADC_Init+0x2a0>)
 8001960:	f7ff ff26 	bl	80017b0 <LL_ADC_IsEnabled>
 8001964:	4603      	mov	r3, r0
 8001966:	4323      	orrs	r3, r4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4619      	mov	r1, r3
 8001972:	485f      	ldr	r0, [pc, #380]	; (8001af0 <HAL_ADC_Init+0x2a4>)
 8001974:	f7ff fd94 	bl	80014a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e5b      	ldrb	r3, [r3, #25]
 800197c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001982:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001988:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800198e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001996:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d106      	bne.n	80019b4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	3b01      	subs	r3, #1
 80019ac:	045b      	lsls	r3, r3, #17
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_ADC_Init+0x2a8>)
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff08 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 80019ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff15 	bl	8001824 <LL_ADC_INJ_IsConversionOngoing>
 80019fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13d      	bne.n	8001a7e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d13a      	bne.n	8001a7e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a0c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a24:	f023 0302 	bic.w	r3, r3, #2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	69b9      	ldr	r1, [r7, #24]
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d118      	bne.n	8001a6e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	e007      	b.n	8001a7e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10c      	bne.n	8001aa0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f023 010f 	bic.w	r1, r3, #15
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	1e5a      	subs	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9e:	e007      	b.n	8001ab0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 020f 	bic.w	r2, r2, #15
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f023 0303 	bic.w	r3, r3, #3
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac0:	e007      	b.n	8001ad2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3724      	adds	r7, #36	; 0x24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	053e2d63 	.word	0x053e2d63
 8001ae4:	50040000 	.word	0x50040000
 8001ae8:	50040100 	.word	0x50040100
 8001aec:	50040200 	.word	0x50040200
 8001af0:	50040300 	.word	0x50040300
 8001af4:	fff0c007 	.word	0xfff0c007

08001af8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b04:	4853      	ldr	r0, [pc, #332]	; (8001c54 <HAL_ADC_Start_DMA+0x15c>)
 8001b06:	f7ff fde3 	bl	80016d0 <LL_ADC_GetMultimode>
 8001b0a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fe74 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 8093 	bne.w	8001c44 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_Start_DMA+0x34>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e08e      	b.n	8001c4a <HAL_ADC_Start_DMA+0x152>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_ADC_Start_DMA+0x160>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d008      	beq.n	8001b50 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d002      	beq.n	8001b50 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d172      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 fc9b 	bl	800248c <ADC_Enable>
 8001b56:	4603      	mov	r3, r0
 8001b58:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d165      	bne.n	8001c2c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_ADC_Start_DMA+0x164>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d002      	beq.n	8001b84 <HAL_ADC_Start_DMA+0x8c>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_Start_DMA+0x8e>
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_ADC_Start_DMA+0x168>)
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d002      	beq.n	8001b94 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f023 0206 	bic.w	r2, r3, #6
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_ADC_Start_DMA+0x16c>)
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <HAL_ADC_Start_DMA+0x170>)
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <HAL_ADC_Start_DMA+0x174>)
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	221c      	movs	r2, #28
 8001bde:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0210 	orr.w	r2, r2, #16
 8001bf6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3340      	adds	r3, #64	; 0x40
 8001c12:	4619      	mov	r1, r3
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f000 fff2 	bl	8002c00 <HAL_DMA_Start_IT>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fdd6 	bl	80017d6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c2a:	e00d      	b.n	8001c48 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001c34:	e008      	b.n	8001c48 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c42:	e001      	b.n	8001c48 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	50040300 	.word	0x50040300
 8001c58:	50040200 	.word	0x50040200
 8001c5c:	50040100 	.word	0x50040100
 8001c60:	50040000 	.word	0x50040000
 8001c64:	08002599 	.word	0x08002599
 8001c68:	08002671 	.word	0x08002671
 8001c6c:	0800268d 	.word	0x0800268d

08001c70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0b6      	sub	sp, #216	; 0xd8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x22>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e3c7      	b.n	800245e <HAL_ADC_ConfigChannel+0x7b2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fd8f 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 83a8 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d824      	bhi.n	8001d3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	3b02      	subs	r3, #2
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d81b      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x86>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <HAL_ADC_ConfigChannel+0x54>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d19 	.word	0x08001d19
 8001d08:	08001d21 	.word	0x08001d21
 8001d0c:	08001d29 	.word	0x08001d29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	220c      	movs	r2, #12
 8001d14:	605a      	str	r2, [r3, #4]
          break;
 8001d16:	e011      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2212      	movs	r2, #18
 8001d1c:	605a      	str	r2, [r3, #4]
          break;
 8001d1e:	e00d      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2218      	movs	r2, #24
 8001d24:	605a      	str	r2, [r3, #4]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2e:	605a      	str	r2, [r3, #4]
          break;
 8001d30:	e004      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2206      	movs	r2, #6
 8001d36:	605a      	str	r2, [r3, #4]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fc45 	bl	80015d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fd53 	bl	80017fe <LL_ADC_REG_IsConversionOngoing>
 8001d58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd5f 	bl	8001824 <LL_ADC_INJ_IsConversionOngoing>
 8001d66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 81a6 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 81a1 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f7ff fc50 	bl	8001630 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d00a      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6919      	ldr	r1, [r3, #16]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dc2:	f7ff fba1 	bl	8001508 <LL_ADC_SetOffset>
 8001dc6:	e17b      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fbbe 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x148>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fbb3 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	e01e      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x186>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fba8 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e004      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x19e>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	e018      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e004      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fb77 	bl	800157c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fb5b 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x20e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fb50 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	e01e      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x24c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fb45 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e004      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x264>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	e018      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x296>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e004      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb14 	bl	800157c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2102      	movs	r1, #2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff faf8 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x2d4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff faed 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	e01e      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x312>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2102      	movs	r1, #2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fae2 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e004      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x32a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	e016      	b.n	8002004 <HAL_ADC_ConfigChannel+0x358>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	2102      	movs	r1, #2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fab3 	bl	800157c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2103      	movs	r1, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fa97 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x396>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2103      	movs	r1, #3
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fa8c 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	e017      	b.n	8002072 <HAL_ADC_ConfigChannel+0x3c6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2103      	movs	r1, #3
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fa81 	bl	8001550 <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800205a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800205e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_ConfigChannel+0x3de>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	e011      	b.n	80020ae <HAL_ADC_ConfigChannel+0x402>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800209a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e003      	b.n	80020ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2103      	movs	r1, #3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fa5e 	bl	800157c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fb73 	bl	80017b0 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 813f 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff fad2 	bl	8001688 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a8e      	ldr	r2, [pc, #568]	; (8002324 <HAL_ADC_ConfigChannel+0x678>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f040 8130 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x46c>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	3301      	adds	r3, #1
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2b09      	cmp	r3, #9
 800210e:	bf94      	ite	ls
 8002110:	2301      	movls	r3, #1
 8002112:	2300      	movhi	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e019      	b.n	800214c <HAL_ADC_ConfigChannel+0x4a0>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002128:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800212a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2b09      	cmp	r3, #9
 8002144:	bf94      	ite	ls
 8002146:	2301      	movls	r3, #1
 8002148:	2300      	movhi	r3, #0
 800214a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800214c:	2b00      	cmp	r3, #0
 800214e:	d079      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_ADC_ConfigChannel+0x4c0>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	069b      	lsls	r3, r3, #26
 8002166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216a:	e015      	b.n	8002198 <HAL_ADC_ConfigChannel+0x4ec>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x50c>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	e017      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x53c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	ea42 0103 	orr.w	r1, r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_ADC_ConfigChannel+0x562>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	e018      	b.n	8002240 <HAL_ADC_ConfigChannel+0x594>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800222a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002240:	430b      	orrs	r3, r1
 8002242:	e080      	b.n	8002346 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x5b4>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	3301      	adds	r3, #1
 8002258:	069b      	lsls	r3, r3, #26
 800225a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225e:	e015      	b.n	800228c <HAL_ADC_ConfigChannel+0x5e0>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	069b      	lsls	r3, r3, #26
 8002288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x600>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	e017      	b.n	80022dc <HAL_ADC_ConfigChannel+0x630>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	61fb      	str	r3, [r7, #28]
  return result;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x65c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	3b1e      	subs	r3, #30
 8002300:	051b      	lsls	r3, r3, #20
 8002302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002306:	e01d      	b.n	8002344 <HAL_ADC_ConfigChannel+0x698>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	613b      	str	r3, [r7, #16]
  return result;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e005      	b.n	8002330 <HAL_ADC_ConfigChannel+0x684>
 8002324:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	051b      	lsls	r3, r3, #20
 8002340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002344:	430b      	orrs	r3, r1
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	6892      	ldr	r2, [r2, #8]
 800234a:	4619      	mov	r1, r3
 800234c:	f7ff f970 	bl	8001630 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_ADC_ConfigChannel+0x7bc>)
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07a      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800235c:	4843      	ldr	r0, [pc, #268]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 800235e:	f7ff f8c5 	bl	80014ec <LL_ADC_GetCommonPathInternalCh>
 8002362:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a41      	ldr	r2, [pc, #260]	; (8002470 <HAL_ADC_ConfigChannel+0x7c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d12c      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d126      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x6e4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <HAL_ADC_ConfigChannel+0x7cc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d15d      	bne.n	800244c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002398:	4619      	mov	r1, r3
 800239a:	4834      	ldr	r0, [pc, #208]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 800239c:	f7ff f893 	bl	80014c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_ADC_ConfigChannel+0x7d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	4a36      	ldr	r2, [pc, #216]	; (8002480 <HAL_ADC_ConfigChannel+0x7d4>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3b01      	subs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c8:	e040      	b.n	800244c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_ADC_ConfigChannel+0x7d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d118      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x75a>
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x748>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_ADC_ConfigChannel+0x7cc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d12d      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fc:	4619      	mov	r1, r3
 80023fe:	481b      	ldr	r0, [pc, #108]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 8002400:	f7ff f861 	bl	80014c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002404:	e024      	b.n	8002450 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_ADC_ConfigChannel+0x7dc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d120      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11a      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d115      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800242a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242e:	4619      	mov	r1, r3
 8002430:	480e      	ldr	r0, [pc, #56]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 8002432:	f7ff f848 	bl	80014c6 <LL_ADC_SetCommonPathInternalCh>
 8002436:	e00c      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800244a:	e002      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002450:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800245a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800245e:	4618      	mov	r0, r3
 8002460:	37d8      	adds	r7, #216	; 0xd8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	80080000 	.word	0x80080000
 800246c:	50040300 	.word	0x50040300
 8002470:	c7520000 	.word	0xc7520000
 8002474:	50040000 	.word	0x50040000
 8002478:	50040200 	.word	0x50040200
 800247c:	20000004 	.word	0x20000004
 8002480:	053e2d63 	.word	0x053e2d63
 8002484:	cb840000 	.word	0xcb840000
 8002488:	80000001 	.word	0x80000001

0800248c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f987 	bl	80017b0 <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d169      	bne.n	800257c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <ADC_Enable+0xfc>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e055      	b.n	800257e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f956 	bl	8001788 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024dc:	482b      	ldr	r0, [pc, #172]	; (800258c <ADC_Enable+0x100>)
 80024de:	f7ff f805 	bl	80014ec <LL_ADC_GetCommonPathInternalCh>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <ADC_Enable+0x104>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	4a28      	ldr	r2, [pc, #160]	; (8002594 <ADC_Enable+0x108>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002506:	e002      	b.n	800250e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3b01      	subs	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f9      	bne.n	8002508 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002514:	f7fe ffb8 	bl	8001488 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800251a:	e028      	b.n	800256e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f945 	bl	80017b0 <LL_ADC_IsEnabled>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d104      	bne.n	8002536 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f929 	bl	8001788 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002536:	f7fe ffa7 	bl	8001488 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d914      	bls.n	800256e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00d      	beq.n	800256e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f043 0210 	orr.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e007      	b.n	800257e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d1cf      	bne.n	800251c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	8000003f 	.word	0x8000003f
 800258c:	50040300 	.word	0x50040300
 8002590:	20000004 	.word	0x20000004
 8002594:	053e2d63 	.word	0x053e2d63

08002598 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d14b      	bne.n	800264a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d021      	beq.n	8002610 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe ffee 	bl	80015b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d032      	beq.n	8002642 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d12b      	bne.n	8002642 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11f      	bne.n	8002642 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
 800260e:	e018      	b.n	8002642 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d111      	bne.n	8002642 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fb14 	bl	8001c70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002648:	e00e      	b.n	8002668 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff fb1e 	bl	8001c98 <HAL_ADC_ErrorCallback>
}
 800265c:	e004      	b.n	8002668 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff fb00 	bl	8001c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff faf0 	bl	8001c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <LL_ADC_IsEnabled>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <LL_ADC_IsEnabled+0x18>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <LL_ADC_IsEnabled+0x1a>
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d101      	bne.n	80026fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b09f      	sub	sp, #124	; 0x7c
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002726:	2302      	movs	r3, #2
 8002728:	e093      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002732:	2300      	movs	r3, #0
 8002734:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002736:	2300      	movs	r3, #0
 8002738:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a47      	ldr	r2, [pc, #284]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d102      	bne.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002744:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	e001      	b.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e072      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ffb9 	bl	80026e6 <LL_ADC_REG_IsConversionOngoing>
 8002774:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ffb3 	bl	80026e6 <LL_ADC_REG_IsConversionOngoing>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d154      	bne.n	8002830 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002788:	2b00      	cmp	r3, #0
 800278a:	d151      	bne.n	8002830 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800278e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02c      	beq.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027aa:	035b      	lsls	r3, r3, #13
 80027ac:	430b      	orrs	r3, r1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b4:	4829      	ldr	r0, [pc, #164]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027b6:	f7ff ff83 	bl	80026c0 <LL_ADC_IsEnabled>
 80027ba:	4604      	mov	r4, r0
 80027bc:	4828      	ldr	r0, [pc, #160]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027be:	f7ff ff7f 	bl	80026c0 <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	431c      	orrs	r4, r3
 80027c6:	4828      	ldr	r0, [pc, #160]	; (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80027c8:	f7ff ff7a 	bl	80026c0 <LL_ADC_IsEnabled>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4323      	orrs	r3, r4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d137      	bne.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027dc:	f023 030f 	bic.w	r3, r3, #15
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	6811      	ldr	r1, [r2, #0]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	6892      	ldr	r2, [r2, #8]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	431a      	orrs	r2, r3
 80027ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027f0:	e028      	b.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fe:	4817      	ldr	r0, [pc, #92]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002800:	f7ff ff5e 	bl	80026c0 <LL_ADC_IsEnabled>
 8002804:	4604      	mov	r4, r0
 8002806:	4816      	ldr	r0, [pc, #88]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002808:	f7ff ff5a 	bl	80026c0 <LL_ADC_IsEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	431c      	orrs	r4, r3
 8002810:	4815      	ldr	r0, [pc, #84]	; (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002812:	f7ff ff55 	bl	80026c0 <LL_ADC_IsEnabled>
 8002816:	4603      	mov	r3, r0
 8002818:	4323      	orrs	r3, r4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d112      	bne.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800281e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002826:	f023 030f 	bic.w	r3, r3, #15
 800282a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800282c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800282e:	e009      	b.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002842:	e000      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002844:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800284e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002852:	4618      	mov	r0, r3
 8002854:	377c      	adds	r7, #124	; 0x7c
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	bf00      	nop
 800285c:	50040000 	.word	0x50040000
 8002860:	50040100 	.word	0x50040100
 8002864:	50040300 	.word	0x50040300
 8002868:	50040200 	.word	0x50040200

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a34:	f7ff ff3e 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff8e 	bl	8002960 <NVIC_EncodePriority>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff5d 	bl	800290c <__NVIC_SetPriority>
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff31 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa2 	bl	80029c8 <SysTick_Config>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e098      	b.n	8002bd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <HAL_DMA_Init+0x150>)
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d80f      	bhi.n	8002ace <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <HAL_DMA_Init+0x154>)
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a4b      	ldr	r2, [pc, #300]	; (8002be8 <HAL_DMA_Init+0x158>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	009a      	lsls	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a48      	ldr	r2, [pc, #288]	; (8002bec <HAL_DMA_Init+0x15c>)
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
 8002acc:	e00e      	b.n	8002aec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_DMA_Init+0x160>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a43      	ldr	r2, [pc, #268]	; (8002be8 <HAL_DMA_Init+0x158>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <HAL_DMA_Init+0x164>)
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b46:	d039      	beq.n	8002bbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_DMA_Init+0x15c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d11a      	bne.n	8002b88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_DMA_Init+0x168>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f003 031c 	and.w	r3, r3, #28
 8002b5e:	210f      	movs	r1, #15
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4924      	ldr	r1, [pc, #144]	; (8002bf8 <HAL_DMA_Init+0x168>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_DMA_Init+0x168>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	f003 031c 	and.w	r3, r3, #28
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	491d      	ldr	r1, [pc, #116]	; (8002bf8 <HAL_DMA_Init+0x168>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
 8002b86:	e019      	b.n	8002bbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_DMA_Init+0x16c>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f003 031c 	and.w	r3, r3, #28
 8002b94:	210f      	movs	r1, #15
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	4917      	ldr	r1, [pc, #92]	; (8002bfc <HAL_DMA_Init+0x16c>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_DMA_Init+0x16c>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f003 031c 	and.w	r3, r3, #28
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	4911      	ldr	r1, [pc, #68]	; (8002bfc <HAL_DMA_Init+0x16c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40020407 	.word	0x40020407
 8002be4:	bffdfff8 	.word	0xbffdfff8
 8002be8:	cccccccd 	.word	0xcccccccd
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	bffdfbf8 	.word	0xbffdfbf8
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	400200a8 	.word	0x400200a8
 8002bfc:	400204a8 	.word	0x400204a8

08002c00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Start_IT+0x20>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e04b      	b.n	8002cb8 <HAL_DMA_Start_IT+0xb8>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d13a      	bne.n	8002caa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f8e0 	bl	8002e1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 020e 	orr.w	r2, r2, #14
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e00f      	b.n	8002c98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 020a 	orr.w	r2, r2, #10
 8002c96:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e005      	b.n	8002cb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	f003 031c 	and.w	r3, r3, #28
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d026      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x7a>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d021      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0204 	bic.w	r2, r2, #4
 8002d12:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f003 021c 	and.w	r2, r3, #28
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2104      	movs	r1, #4
 8002d22:	fa01 f202 	lsl.w	r2, r1, r2
 8002d26:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d071      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d38:	e06c      	b.n	8002e14 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f003 031c 	and.w	r3, r3, #28
 8002d42:	2202      	movs	r2, #2
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d02e      	beq.n	8002dac <HAL_DMA_IRQHandler+0xec>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d029      	beq.n	8002dac <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10b      	bne.n	8002d7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 020a 	bic.w	r2, r2, #10
 8002d74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f003 021c 	and.w	r2, r3, #28
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d038      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002daa:	e033      	b.n	8002e14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	f003 031c 	and.w	r3, r3, #28
 8002db4:	2208      	movs	r2, #8
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d02a      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x156>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d025      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 020e 	bic.w	r2, r2, #14
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f003 021c 	and.w	r2, r3, #28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
}
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	f003 021c 	and.w	r2, r3, #28
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2101      	movs	r1, #1
 8002e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d108      	bne.n	8002e62 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e60:	e007      	b.n	8002e72 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	60da      	str	r2, [r3, #12]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8e:	e17f      	b.n	8003190 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8171 	beq.w	800318a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d005      	beq.n	8002ec0 <HAL_GPIO_Init+0x40>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d130      	bne.n	8002f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0201 	and.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d118      	bne.n	8002f60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f34:	2201      	movs	r2, #1
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	f003 0201 	and.w	r2, r3, #1
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d017      	beq.n	8002f9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d123      	bne.n	8002ff0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	08da      	lsrs	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3208      	adds	r2, #8
 8002fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	08da      	lsrs	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3208      	adds	r2, #8
 8002fea:	6939      	ldr	r1, [r7, #16]
 8002fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0203 	and.w	r2, r3, #3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80ac 	beq.w	800318a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_GPIO_Init+0x330>)
 8003034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003036:	4a5e      	ldr	r2, [pc, #376]	; (80031b0 <HAL_GPIO_Init+0x330>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6613      	str	r3, [r2, #96]	; 0x60
 800303e:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_GPIO_Init+0x330>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800304a:	4a5a      	ldr	r2, [pc, #360]	; (80031b4 <HAL_GPIO_Init+0x334>)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003074:	d025      	beq.n	80030c2 <HAL_GPIO_Init+0x242>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4f      	ldr	r2, [pc, #316]	; (80031b8 <HAL_GPIO_Init+0x338>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01f      	beq.n	80030be <HAL_GPIO_Init+0x23e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4e      	ldr	r2, [pc, #312]	; (80031bc <HAL_GPIO_Init+0x33c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d019      	beq.n	80030ba <HAL_GPIO_Init+0x23a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_GPIO_Init+0x340>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_GPIO_Init+0x236>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <HAL_GPIO_Init+0x344>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00d      	beq.n	80030b2 <HAL_GPIO_Init+0x232>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4b      	ldr	r2, [pc, #300]	; (80031c8 <HAL_GPIO_Init+0x348>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_Init+0x22e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4a      	ldr	r2, [pc, #296]	; (80031cc <HAL_GPIO_Init+0x34c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_GPIO_Init+0x22a>
 80030a6:	2306      	movs	r3, #6
 80030a8:	e00c      	b.n	80030c4 <HAL_GPIO_Init+0x244>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00a      	b.n	80030c4 <HAL_GPIO_Init+0x244>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e008      	b.n	80030c4 <HAL_GPIO_Init+0x244>
 80030b2:	2304      	movs	r3, #4
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x244>
 80030b6:	2303      	movs	r3, #3
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x244>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x244>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x244>
 80030c2:	2300      	movs	r3, #0
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	f002 0203 	and.w	r2, r2, #3
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	4093      	lsls	r3, r2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030d4:	4937      	ldr	r1, [pc, #220]	; (80031b4 <HAL_GPIO_Init+0x334>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3302      	adds	r3, #2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_GPIO_Init+0x350>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003106:	4a32      	ldr	r2, [pc, #200]	; (80031d0 <HAL_GPIO_Init+0x350>)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_GPIO_Init+0x350>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003130:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <HAL_GPIO_Init+0x350>)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_GPIO_Init+0x350>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43db      	mvns	r3, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_GPIO_Init+0x350>)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_GPIO_Init+0x350>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003184:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <HAL_GPIO_Init+0x350>)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3301      	adds	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f47f ae78 	bne.w	8002e90 <HAL_GPIO_Init+0x10>
  }
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40010000 	.word	0x40010000
 80031b8:	48000400 	.word	0x48000400
 80031bc:	48000800 	.word	0x48000800
 80031c0:	48000c00 	.word	0x48000c00
 80031c4:	48001000 	.word	0x48001000
 80031c8:	48001400 	.word	0x48001400
 80031cc:	48001800 	.word	0x48001800
 80031d0:	40010400 	.word	0x40010400

080031d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
 80031e0:	4613      	mov	r3, r2
 80031e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e4:	787b      	ldrb	r3, [r7, #1]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ea:	887a      	ldrh	r2, [r7, #2]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <HAL_PWREx_GetVoltageRange+0x18>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40007000 	.word	0x40007000

08003220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322e:	d130      	bne.n	8003292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323c:	d038      	beq.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2232      	movs	r2, #50	; 0x32
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9b      	lsrs	r3, r3, #18
 8003260:	3301      	adds	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003264:	e002      	b.n	800326c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3b01      	subs	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d102      	bne.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f2      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d110      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e00f      	b.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d007      	beq.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032a8:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40007000 	.word	0x40007000
 80032c4:	20000004 	.word	0x20000004
 80032c8:	431bde83 	.word	0x431bde83

080032cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e3ca      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b97      	ldr	r3, [pc, #604]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e8:	4b94      	ldr	r3, [pc, #592]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80e4 	beq.w	80034c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_RCC_OscConfig+0x4a>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	f040 808b 	bne.w	8003424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 8087 	bne.w	8003424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003316:	4b89      	ldr	r3, [pc, #548]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x62>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e3a2      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_RCC_OscConfig+0x7c>
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003346:	e005      	b.n	8003354 <HAL_RCC_OscConfig+0x88>
 8003348:	4b7c      	ldr	r3, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003354:	4293      	cmp	r3, r2
 8003356:	d223      	bcs.n	80033a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fd55 	bl	8003e0c <RCC_SetFlashLatencyFromMSIRange>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e383      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336c:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a72      	ldr	r2, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003372:	f043 0308 	orr.w	r3, r3, #8
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b70      	ldr	r3, [pc, #448]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	496d      	ldr	r1, [pc, #436]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338a:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	4968      	ldr	r1, [pc, #416]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
 800339e:	e025      	b.n	80033ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a0:	4b66      	ldr	r3, [pc, #408]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a65      	ldr	r2, [pc, #404]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80033a6:	f043 0308 	orr.w	r3, r3, #8
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4960      	ldr	r1, [pc, #384]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033be:	4b5f      	ldr	r3, [pc, #380]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	495b      	ldr	r1, [pc, #364]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd15 	bl	8003e0c <RCC_SetFlashLatencyFromMSIRange>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e343      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ec:	f000 fc4a 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b52      	ldr	r3, [pc, #328]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	4950      	ldr	r1, [pc, #320]	; (8003540 <HAL_RCC_OscConfig+0x274>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	4a4e      	ldr	r2, [pc, #312]	; (8003544 <HAL_RCC_OscConfig+0x278>)
 800340a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800340c:	4b4e      	ldr	r3, [pc, #312]	; (8003548 <HAL_RCC_OscConfig+0x27c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd ffe9 	bl	80013e8 <HAL_InitTick>
 8003416:	4603      	mov	r3, r0
 8003418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d052      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	e327      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d032      	beq.n	8003492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800342c:	4b43      	ldr	r3, [pc, #268]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a42      	ldr	r2, [pc, #264]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003438:	f7fe f826 	bl	8001488 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003440:	f7fe f822 	bl	8001488 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e310      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003452:	4b3a      	ldr	r3, [pc, #232]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a36      	ldr	r2, [pc, #216]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003464:	f043 0308 	orr.w	r3, r3, #8
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4931      	ldr	r1, [pc, #196]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800347c:	4b2f      	ldr	r3, [pc, #188]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	492c      	ldr	r1, [pc, #176]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
 8003490:	e01a      	b.n	80034c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003492:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800349e:	f7fd fff3 	bl	8001488 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a6:	f7fd ffef 	bl	8001488 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e2dd      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x1da>
 80034c4:	e000      	b.n	80034c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d074      	beq.n	80035be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x21a>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d10e      	bne.n	80034fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d10b      	bne.n	80034fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_RCC_OscConfig+0x270>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d064      	beq.n	80035bc <HAL_RCC_OscConfig+0x2f0>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d160      	bne.n	80035bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e2ba      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x24a>
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0b      	ldr	r2, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800350e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	e026      	b.n	8003564 <HAL_RCC_OscConfig+0x298>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800351e:	d115      	bne.n	800354c <HAL_RCC_OscConfig+0x280>
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a05      	ldr	r2, [pc, #20]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_OscConfig+0x270>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a02      	ldr	r2, [pc, #8]	; (800353c <HAL_RCC_OscConfig+0x270>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e014      	b.n	8003564 <HAL_RCC_OscConfig+0x298>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	08006274 	.word	0x08006274
 8003544:	20000004 	.word	0x20000004
 8003548:	20000008 	.word	0x20000008
 800354c:	4ba0      	ldr	r3, [pc, #640]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a9f      	ldr	r2, [pc, #636]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b9d      	ldr	r3, [pc, #628]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a9c      	ldr	r2, [pc, #624]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 800355e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd ff8c 	bl	8001488 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fd ff88 	bl	8001488 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e276      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003586:	4b92      	ldr	r3, [pc, #584]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x2a8>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fd ff78 	bl	8001488 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fd ff74 	bl	8001488 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e262      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ae:	4b88      	ldr	r3, [pc, #544]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x2d0>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d060      	beq.n	800368c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x310>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d119      	bne.n	800360a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d116      	bne.n	800360a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035dc:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_OscConfig+0x328>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e23f      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	4973      	ldr	r1, [pc, #460]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003608:	e040      	b.n	800368c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d023      	beq.n	800365a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003612:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6e      	ldr	r2, [pc, #440]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fd ff33 	bl	8001488 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003626:	f7fd ff2f 	bl	8001488 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e21d      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003638:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	495f      	ldr	r1, [pc, #380]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
 8003658:	e018      	b.n	800368c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365a:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a5c      	ldr	r2, [pc, #368]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd ff0f 	bl	8001488 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd ff0b 	bl	8001488 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1f9      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03c      	beq.n	8003712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01c      	beq.n	80036da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a0:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a6:	4a4a      	ldr	r2, [pc, #296]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd feea 	bl	8001488 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fd fee6 	bl	8001488 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1d4      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80036cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCC_OscConfig+0x3ec>
 80036d8:	e01b      	b.n	8003712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036da:	4b3d      	ldr	r3, [pc, #244]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	4a3b      	ldr	r2, [pc, #236]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd fecd 	bl	8001488 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fd fec9 	bl	8001488 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1b7      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ef      	bne.n	80036f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80a6 	beq.w	800386c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003724:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10d      	bne.n	800374c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373a:	6593      	str	r3, [r2, #88]	; 0x58
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003748:	2301      	movs	r3, #1
 800374a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCC_OscConfig+0x508>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d118      	bne.n	800378a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCC_OscConfig+0x508>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_RCC_OscConfig+0x508>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003764:	f7fd fe90 	bl	8001488 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fe8c 	bl	8001488 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e17a      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_RCC_OscConfig+0x508>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d108      	bne.n	80037a4 <HAL_RCC_OscConfig+0x4d8>
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a2:	e029      	b.n	80037f8 <HAL_RCC_OscConfig+0x52c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d115      	bne.n	80037d8 <HAL_RCC_OscConfig+0x50c>
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a03      	ldr	r2, [pc, #12]	; (80037d0 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037cc:	e014      	b.n	80037f8 <HAL_RCC_OscConfig+0x52c>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40007000 	.word	0x40007000
 80037d8:	4b9c      	ldr	r3, [pc, #624]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	4a9b      	ldr	r2, [pc, #620]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e8:	4b98      	ldr	r3, [pc, #608]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a97      	ldr	r2, [pc, #604]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d016      	beq.n	800382e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd fe42 	bl	8001488 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fd fe3e 	bl	8001488 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e12a      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381e:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ed      	beq.n	8003808 <HAL_RCC_OscConfig+0x53c>
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fd fe2b 	bl	8001488 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fd fe27 	bl	8001488 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e113      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800384c:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ed      	bne.n	8003836 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385a:	7ffb      	ldrb	r3, [r7, #31]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b7a      	ldr	r3, [pc, #488]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	4a79      	ldr	r2, [pc, #484]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80fe 	beq.w	8003a72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	2b02      	cmp	r3, #2
 800387c:	f040 80d0 	bne.w	8003a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003880:	4b72      	ldr	r3, [pc, #456]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 0203 	and.w	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d130      	bne.n	80038f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	3b01      	subs	r3, #1
 80038a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d127      	bne.n	80038f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d11f      	bne.n	80038f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038c0:	2a07      	cmp	r2, #7
 80038c2:	bf14      	ite	ne
 80038c4:	2201      	movne	r2, #1
 80038c6:	2200      	moveq	r2, #0
 80038c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d113      	bne.n	80038f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	3b01      	subs	r3, #1
 80038dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	3b01      	subs	r3, #1
 80038f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d06e      	beq.n	80039d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d069      	beq.n	80039d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038fc:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003908:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0ad      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003918:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003924:	f7fd fdb0 	bl	8001488 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd fdac 	bl	8001488 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e09a      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393e:	4b43      	ldr	r3, [pc, #268]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394a:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <HAL_RCC_OscConfig+0x784>)
 8003950:	4013      	ands	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800395a:	3a01      	subs	r2, #1
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	4311      	orrs	r1, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003964:	0212      	lsls	r2, r2, #8
 8003966:	4311      	orrs	r1, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800396c:	0852      	lsrs	r2, r2, #1
 800396e:	3a01      	subs	r2, #1
 8003970:	0552      	lsls	r2, r2, #21
 8003972:	4311      	orrs	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003978:	0852      	lsrs	r2, r2, #1
 800397a:	3a01      	subs	r2, #1
 800397c:	0652      	lsls	r2, r2, #25
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003984:	0912      	lsrs	r2, r2, #4
 8003986:	0452      	lsls	r2, r2, #17
 8003988:	430a      	orrs	r2, r1
 800398a:	4930      	ldr	r1, [pc, #192]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 800398c:	4313      	orrs	r3, r2
 800398e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003990:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a8:	f7fd fd6e 	bl	8001488 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fd fd6a 	bl	8001488 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e058      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ce:	e050      	b.n	8003a72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04f      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d148      	bne.n	8003a72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 80039f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039f8:	f7fd fd46 	bl	8001488 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd fd42 	bl	8001488 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e030      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x734>
 8003a1e:	e028      	b.n	8003a72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d023      	beq.n	8003a6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_RCC_OscConfig+0x780>)
 8003a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fd fd29 	bl	8001488 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a38:	e00c      	b.n	8003a54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7fd fd25 	bl	8001488 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d905      	bls.n	8003a54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e013      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x7b0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ec      	bne.n	8003a3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_RCC_OscConfig+0x7b0>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	4905      	ldr	r1, [pc, #20]	; (8003a7c <HAL_RCC_OscConfig+0x7b0>)
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x7b4>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
 8003a6c:	e001      	b.n	8003a72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	feeefffc 	.word	0xfeeefffc

08003a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0e7      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b75      	ldr	r3, [pc, #468]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b72      	ldr	r3, [pc, #456]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4970      	ldr	r1, [pc, #448]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b6e      	ldr	r3, [pc, #440]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0cf      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d908      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4960      	ldr	r1, [pc, #384]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d04c      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d121      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0a6      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b22:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d115      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e09a      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e08e      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e086      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4943      	ldr	r1, [pc, #268]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fd fc8c 	bl	8001488 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fd fc88 	bl	8001488 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e06e      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d208      	bcs.n	8003bca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	492b      	ldr	r1, [pc, #172]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d210      	bcs.n	8003bfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 0207 	bic.w	r2, r3, #7
 8003be0:	4923      	ldr	r1, [pc, #140]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e036      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	4918      	ldr	r1, [pc, #96]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4910      	ldr	r1, [pc, #64]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c38:	f000 f824 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	490b      	ldr	r1, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x1f4>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x1f8>)
 8003c56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1fc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fbc3 	bl	80013e8 <HAL_InitTick>
 8003c62:	4603      	mov	r3, r0
 8003c64:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c66:	7afb      	ldrb	r3, [r7, #11]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40022000 	.word	0x40022000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	08006274 	.word	0x08006274
 8003c7c:	20000004 	.word	0x20000004
 8003c80:	20000008 	.word	0x20000008

08003c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	; 0x24
 8003c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d121      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d11e      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cb8:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cc4:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cd4:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ce0:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e004      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d134      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d12:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d003      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d003      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0xac>
 8003d28:	e005      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d2c:	617b      	str	r3, [r7, #20]
      break;
 8003d2e:	e005      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d32:	617b      	str	r3, [r7, #20]
      break;
 8003d34:	e002      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	617b      	str	r3, [r7, #20]
      break;
 8003d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	3301      	adds	r3, #1
 8003d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	fb03 f202 	mul.w	r2, r3, r2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	0e5b      	lsrs	r3, r3, #25
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	0800628c 	.word	0x0800628c
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	007a1200 	.word	0x007a1200

08003d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000004 	.word	0x20000004

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4904      	ldr	r1, [pc, #16]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08006284 	.word	0x08006284

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003de4:	f7ff ffda 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0adb      	lsrs	r3, r3, #11
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4904      	ldr	r1, [pc, #16]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	08006284 	.word	0x08006284

08003e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e24:	f7ff f9ee 	bl	8003204 <HAL_PWREx_GetVoltageRange>
 8003e28:	6178      	str	r0, [r7, #20]
 8003e2a:	e014      	b.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6593      	str	r3, [r2, #88]	; 0x58
 8003e38:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e44:	f7ff f9de 	bl	8003204 <HAL_PWREx_GetVoltageRange>
 8003e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d10b      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d919      	bls.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2ba0      	cmp	r3, #160	; 0xa0
 8003e68:	d902      	bls.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e013      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e70:	2301      	movs	r3, #1
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e010      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d902      	bls.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e00a      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b80      	cmp	r3, #128	; 0x80
 8003e86:	d102      	bne.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e88:	2302      	movs	r3, #2
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	e004      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b70      	cmp	r3, #112	; 0x70
 8003e92:	d101      	bne.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e94:	2301      	movs	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 0207 	bic.w	r2, r3, #7
 8003ea0:	4909      	ldr	r1, [pc, #36]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d001      	beq.n	8003eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40022000 	.word	0x40022000

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d041      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ef0:	d02a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ef6:	d824      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f02:	d81e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0c:	d010      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f10:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a85      	ldr	r2, [pc, #532]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fabb 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3320      	adds	r3, #32
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fba6 	bl	8004688 <RCCEx_PLLSAI2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	74fb      	strb	r3, [r7, #19]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f50:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5e:	4973      	ldr	r1, [pc, #460]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f66:	e001      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d041      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f80:	d02a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f86:	d824      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f92:	d81e      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f9e:	e018      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa0:	4b62      	ldr	r3, [pc, #392]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a61      	ldr	r2, [pc, #388]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fac:	e015      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fa73 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fbe:	e00c      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3320      	adds	r3, #32
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fb5e 	bl	8004688 <RCCEx_PLLSAI2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe0:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fee:	494f      	ldr	r1, [pc, #316]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a0 	beq.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	4a40      	ldr	r2, [pc, #256]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402e:	6593      	str	r3, [r2, #88]	; 0x58
 8004030:	4b3e      	ldr	r3, [pc, #248]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403c:	2301      	movs	r3, #1
 800403e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004040:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3a      	ldr	r2, [pc, #232]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404c:	f7fd fa1c 	bl	8001488 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004052:	e009      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fd fa18 	bl	8001488 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d902      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	74fb      	strb	r3, [r7, #19]
        break;
 8004066:	e005      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004068:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ef      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d15c      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407a:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01f      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	d019      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004098:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a20      	ldr	r2, [pc, #128]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd f9d7 	bl	8001488 <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e00b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd f9d3 	bl	8001488 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d902      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	74fb      	strb	r3, [r7, #19]
            break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ec      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411a:	4904      	ldr	r1, [pc, #16]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004138:	7c7b      	ldrb	r3, [r7, #17]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b9e      	ldr	r3, [pc, #632]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	4a9d      	ldr	r2, [pc, #628]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004156:	4b98      	ldr	r3, [pc, #608]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f023 0203 	bic.w	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	4994      	ldr	r1, [pc, #592]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004178:	4b8f      	ldr	r3, [pc, #572]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 020c 	bic.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	498c      	ldr	r1, [pc, #560]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419a:	4b87      	ldr	r3, [pc, #540]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	4983      	ldr	r1, [pc, #524]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041bc:	4b7e      	ldr	r3, [pc, #504]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	497b      	ldr	r1, [pc, #492]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041de:	4b76      	ldr	r3, [pc, #472]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	4972      	ldr	r1, [pc, #456]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004200:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	496a      	ldr	r1, [pc, #424]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	4961      	ldr	r1, [pc, #388]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004244:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	4959      	ldr	r1, [pc, #356]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004266:	4b54      	ldr	r3, [pc, #336]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	4950      	ldr	r1, [pc, #320]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004288:	4b4b      	ldr	r3, [pc, #300]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	4948      	ldr	r1, [pc, #288]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042aa:	4b43      	ldr	r3, [pc, #268]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	493f      	ldr	r1, [pc, #252]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d028      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042cc:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042da:	4937      	ldr	r1, [pc, #220]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ea:	d106      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a31      	ldr	r2, [pc, #196]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f6:	60d3      	str	r3, [r2, #12]
 80042f8:	e011      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004302:	d10c      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f8c8 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d028      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	491f      	ldr	r1, [pc, #124]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004348:	d106      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004354:	60d3      	str	r3, [r2, #12]
 8004356:	e011      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004360:	d10c      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f899 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02b      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	4908      	ldr	r1, [pc, #32]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a6:	d109      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a02      	ldr	r2, [pc, #8]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043b2:	60d3      	str	r3, [r2, #12]
 80043b4:	e014      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f867 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d6:	7cfb      	ldrb	r3, [r7, #19]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	4928      	ldr	r1, [pc, #160]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440a:	d10d      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	2102      	movs	r1, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f844 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d014      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004422:	7cfb      	ldrb	r3, [r7, #19]
 8004424:	74bb      	strb	r3, [r7, #18]
 8004426:	e011      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004430:	d10c      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3320      	adds	r3, #32
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f925 	bl	8004688 <RCCEx_PLLSAI2_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004466:	490d      	ldr	r1, [pc, #52]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448a:	4904      	ldr	r1, [pc, #16]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004492:	7cbb      	ldrb	r3, [r7, #18]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000

080044a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ae:	4b75      	ldr	r3, [pc, #468]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ba:	4b72      	ldr	r3, [pc, #456]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0203 	and.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d10d      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
       ||
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044d2:	4b6c      	ldr	r3, [pc, #432]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
       ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d047      	beq.n	8004576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
 80044ea:	e044      	b.n	8004576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d018      	beq.n	8004526 <RCCEx_PLLSAI1_Config+0x86>
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d825      	bhi.n	8004544 <RCCEx_PLLSAI1_Config+0xa4>
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d002      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0x62>
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d009      	beq.n	8004514 <RCCEx_PLLSAI1_Config+0x74>
 8004500:	e020      	b.n	8004544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004502:	4b60      	ldr	r3, [pc, #384]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11d      	bne.n	800454a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004512:	e01a      	b.n	800454a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004514:	4b5b      	ldr	r3, [pc, #364]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	2b00      	cmp	r3, #0
 800451e:	d116      	bne.n	800454e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004524:	e013      	b.n	800454e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004532:	4b54      	ldr	r3, [pc, #336]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004542:	e006      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e004      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454a:	bf00      	nop
 800454c:	e002      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454e:	bf00      	nop
 8004550:	e000      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004552:	bf00      	nop
    }

    if(status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	3b01      	subs	r3, #1
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	430b      	orrs	r3, r1
 8004570:	4944      	ldr	r1, [pc, #272]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d17d      	bne.n	8004678 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800457c:	4b41      	ldr	r3, [pc, #260]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a40      	ldr	r2, [pc, #256]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004588:	f7fc ff7e 	bl	8001488 <HAL_GetTick>
 800458c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800458e:	e009      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004590:	f7fc ff7a 	bl	8001488 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d902      	bls.n	80045a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	73fb      	strb	r3, [r7, #15]
        break;
 80045a2:	e005      	b.n	80045b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045a4:	4b37      	ldr	r3, [pc, #220]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ef      	bne.n	8004590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d160      	bne.n	8004678 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d111      	bne.n	80045e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045bc:	4b31      	ldr	r3, [pc, #196]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6892      	ldr	r2, [r2, #8]
 80045cc:	0211      	lsls	r1, r2, #8
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68d2      	ldr	r2, [r2, #12]
 80045d2:	0912      	lsrs	r2, r2, #4
 80045d4:	0452      	lsls	r2, r2, #17
 80045d6:	430a      	orrs	r2, r1
 80045d8:	492a      	ldr	r1, [pc, #168]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]
 80045de:	e027      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d112      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e6:	4b27      	ldr	r3, [pc, #156]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6892      	ldr	r2, [r2, #8]
 80045f6:	0211      	lsls	r1, r2, #8
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6912      	ldr	r2, [r2, #16]
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	3a01      	subs	r2, #1
 8004600:	0552      	lsls	r2, r2, #21
 8004602:	430a      	orrs	r2, r1
 8004604:	491f      	ldr	r1, [pc, #124]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
 800460a:	e011      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6892      	ldr	r2, [r2, #8]
 800461c:	0211      	lsls	r1, r2, #8
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6952      	ldr	r2, [r2, #20]
 8004622:	0852      	lsrs	r2, r2, #1
 8004624:	3a01      	subs	r2, #1
 8004626:	0652      	lsls	r2, r2, #25
 8004628:	430a      	orrs	r2, r1
 800462a:	4916      	ldr	r1, [pc, #88]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800463a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fc ff24 	bl	8001488 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004644:	f7fc ff20 	bl	8001488 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
          break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4904      	ldr	r1, [pc, #16]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000

08004688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004696:	4b6a      	ldr	r3, [pc, #424]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d018      	beq.n	80046d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046a2:	4b67      	ldr	r3, [pc, #412]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d10d      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
       ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
       ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d047      	beq.n	800475e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	e044      	b.n	800475e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d018      	beq.n	800470e <RCCEx_PLLSAI2_Config+0x86>
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d825      	bhi.n	800472c <RCCEx_PLLSAI2_Config+0xa4>
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d002      	beq.n	80046ea <RCCEx_PLLSAI2_Config+0x62>
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d009      	beq.n	80046fc <RCCEx_PLLSAI2_Config+0x74>
 80046e8:	e020      	b.n	800472c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ea:	4b55      	ldr	r3, [pc, #340]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11d      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fa:	e01a      	b.n	8004732 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d116      	bne.n	8004736 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e013      	b.n	8004736 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800470e:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800471a:	4b49      	ldr	r3, [pc, #292]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800472a:	e006      	b.n	800473a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      break;
 8004730:	e004      	b.n	800473c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004732:	bf00      	nop
 8004734:	e002      	b.n	800473c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800473a:	bf00      	nop
    }

    if(status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004742:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	430b      	orrs	r3, r1
 8004758:	4939      	ldr	r1, [pc, #228]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d167      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004764:	4b36      	ldr	r3, [pc, #216]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a35      	ldr	r2, [pc, #212]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004770:	f7fc fe8a 	bl	8001488 <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004776:	e009      	b.n	800478c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004778:	f7fc fe86 	bl	8001488 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d902      	bls.n	800478c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	73fb      	strb	r3, [r7, #15]
        break;
 800478a:	e005      	b.n	8004798 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800478c:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1ef      	bne.n	8004778 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d14a      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d111      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	0912      	lsrs	r2, r2, #4
 80047bc:	0452      	lsls	r2, r2, #17
 80047be:	430a      	orrs	r2, r1
 80047c0:	491f      	ldr	r1, [pc, #124]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	614b      	str	r3, [r1, #20]
 80047c6:	e011      	b.n	80047ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	0211      	lsls	r1, r2, #8
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6912      	ldr	r2, [r2, #16]
 80047de:	0852      	lsrs	r2, r2, #1
 80047e0:	3a01      	subs	r2, #1
 80047e2:	0652      	lsls	r2, r2, #25
 80047e4:	430a      	orrs	r2, r1
 80047e6:	4916      	ldr	r1, [pc, #88]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fc fe46 	bl	8001488 <HAL_GetTick>
 80047fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047fe:	e009      	b.n	8004814 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004800:	f7fc fe42 	bl	8001488 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d902      	bls.n	8004814 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	73fb      	strb	r3, [r7, #15]
          break;
 8004812:	e005      	b.n	8004820 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ef      	beq.n	8004800 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	4904      	ldr	r1, [pc, #16]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	4313      	orrs	r3, r2
 8004832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e040      	b.n	80048d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fc2e 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8c0 	bl	8004a08 <UART_SetConfig>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fb6c 	bl	8004f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fbf3 	bl	80050bc <UART_CheckIdleState>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	f040 8082 	bne.w	80049fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_UART_Transmit+0x26>
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07a      	b.n	8004a00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit+0x38>
 8004914:	2302      	movs	r3, #2
 8004916:	e073      	b.n	8004a00 <HAL_UART_Transmit+0x120>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2221      	movs	r2, #33	; 0x21
 800492c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fc fdab 	bl	8001488 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d108      	bne.n	8004960 <HAL_UART_Transmit+0x80>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e003      	b.n	8004968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004970:	e02d      	b.n	80049ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fbe6 	bl	800514e <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e039      	b.n	8004a00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499e:	b292      	uxth	r2, r2
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	3302      	adds	r3, #2
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e008      	b.n	80049bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b292      	uxth	r2, r2
 80049b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3301      	adds	r3, #1
 80049ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1cb      	bne.n	8004972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2140      	movs	r1, #64	; 0x40
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fbb2 	bl	800514e <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e005      	b.n	8004a00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b08a      	sub	sp, #40	; 0x28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4ba4      	ldr	r3, [pc, #656]	; (8004cc8 <UART_SetConfig+0x2c0>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a99      	ldr	r2, [pc, #612]	; (8004ccc <UART_SetConfig+0x2c4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	4313      	orrs	r3, r2
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a90      	ldr	r2, [pc, #576]	; (8004cd0 <UART_SetConfig+0x2c8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d126      	bne.n	8004ae0 <UART_SetConfig+0xd8>
 8004a92:	4b90      	ldr	r3, [pc, #576]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d81b      	bhi.n	8004ad8 <UART_SetConfig+0xd0>
 8004aa0:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <UART_SetConfig+0xa0>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004ab9 	.word	0x08004ab9
 8004aac:	08004ac9 	.word	0x08004ac9
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004ad1 	.word	0x08004ad1
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abe:	e116      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac6:	e112      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ace:	e10e      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad6:	e10a      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ade:	e106      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a7c      	ldr	r2, [pc, #496]	; (8004cd8 <UART_SetConfig+0x2d0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d138      	bne.n	8004b5c <UART_SetConfig+0x154>
 8004aea:	4b7a      	ldr	r3, [pc, #488]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	d82d      	bhi.n	8004b54 <UART_SetConfig+0x14c>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0xf8>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004b55 	.word	0x08004b55
 8004b08:	08004b55 	.word	0x08004b55
 8004b0c:	08004b55 	.word	0x08004b55
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004b55 	.word	0x08004b55
 8004b18:	08004b55 	.word	0x08004b55
 8004b1c:	08004b55 	.word	0x08004b55
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	08004b55 	.word	0x08004b55
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b4d 	.word	0x08004b4d
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e0d8      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e0d4      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e0d0      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b52:	e0cc      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e0c8      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a5e      	ldr	r2, [pc, #376]	; (8004cdc <UART_SetConfig+0x2d4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d125      	bne.n	8004bb2 <UART_SetConfig+0x1aa>
 8004b66:	4b5b      	ldr	r3, [pc, #364]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b70:	2b30      	cmp	r3, #48	; 0x30
 8004b72:	d016      	beq.n	8004ba2 <UART_SetConfig+0x19a>
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d818      	bhi.n	8004baa <UART_SetConfig+0x1a2>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d00a      	beq.n	8004b92 <UART_SetConfig+0x18a>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d814      	bhi.n	8004baa <UART_SetConfig+0x1a2>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <UART_SetConfig+0x182>
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d008      	beq.n	8004b9a <UART_SetConfig+0x192>
 8004b88:	e00f      	b.n	8004baa <UART_SetConfig+0x1a2>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b90:	e0ad      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004b92:	2302      	movs	r3, #2
 8004b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b98:	e0a9      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba0:	e0a5      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba8:	e0a1      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004baa:	2310      	movs	r3, #16
 8004bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb0:	e09d      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <UART_SetConfig+0x2d8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d125      	bne.n	8004c08 <UART_SetConfig+0x200>
 8004bbc:	4b45      	ldr	r3, [pc, #276]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc8:	d016      	beq.n	8004bf8 <UART_SetConfig+0x1f0>
 8004bca:	2bc0      	cmp	r3, #192	; 0xc0
 8004bcc:	d818      	bhi.n	8004c00 <UART_SetConfig+0x1f8>
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d00a      	beq.n	8004be8 <UART_SetConfig+0x1e0>
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d814      	bhi.n	8004c00 <UART_SetConfig+0x1f8>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <UART_SetConfig+0x1d8>
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d008      	beq.n	8004bf0 <UART_SetConfig+0x1e8>
 8004bde:	e00f      	b.n	8004c00 <UART_SetConfig+0x1f8>
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be6:	e082      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004be8:	2302      	movs	r3, #2
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bee:	e07e      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf6:	e07a      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfe:	e076      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004c00:	2310      	movs	r3, #16
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e072      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a35      	ldr	r2, [pc, #212]	; (8004ce4 <UART_SetConfig+0x2dc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d12a      	bne.n	8004c68 <UART_SetConfig+0x260>
 8004c12:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c20:	d01a      	beq.n	8004c58 <UART_SetConfig+0x250>
 8004c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c26:	d81b      	bhi.n	8004c60 <UART_SetConfig+0x258>
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d00c      	beq.n	8004c48 <UART_SetConfig+0x240>
 8004c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c32:	d815      	bhi.n	8004c60 <UART_SetConfig+0x258>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <UART_SetConfig+0x238>
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3c:	d008      	beq.n	8004c50 <UART_SetConfig+0x248>
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x258>
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e052      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e04e      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004c50:	2304      	movs	r3, #4
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e04a      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004c58:	2308      	movs	r3, #8
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5e:	e046      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c66:	e042      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <UART_SetConfig+0x2c4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d13a      	bne.n	8004ce8 <UART_SetConfig+0x2e0>
 8004c72:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c80:	d01a      	beq.n	8004cb8 <UART_SetConfig+0x2b0>
 8004c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c86:	d81b      	bhi.n	8004cc0 <UART_SetConfig+0x2b8>
 8004c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8c:	d00c      	beq.n	8004ca8 <UART_SetConfig+0x2a0>
 8004c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c92:	d815      	bhi.n	8004cc0 <UART_SetConfig+0x2b8>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <UART_SetConfig+0x298>
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9c:	d008      	beq.n	8004cb0 <UART_SetConfig+0x2a8>
 8004c9e:	e00f      	b.n	8004cc0 <UART_SetConfig+0x2b8>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e022      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	e01e      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb6:	e01a      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cbe:	e016      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc6:	e012      	b.n	8004cee <UART_SetConfig+0x2e6>
 8004cc8:	efff69f3 	.word	0xefff69f3
 8004ccc:	40008000 	.word	0x40008000
 8004cd0:	40013800 	.word	0x40013800
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40004400 	.word	0x40004400
 8004cdc:	40004800 	.word	0x40004800
 8004ce0:	40004c00 	.word	0x40004c00
 8004ce4:	40005000 	.word	0x40005000
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a9f      	ldr	r2, [pc, #636]	; (8004f70 <UART_SetConfig+0x568>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d17a      	bne.n	8004dee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d824      	bhi.n	8004d4a <UART_SetConfig+0x342>
 8004d00:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0x300>)
 8004d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d4b 	.word	0x08004d4b
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d4b 	.word	0x08004d4b
 8004d18:	08004d3b 	.word	0x08004d3b
 8004d1c:	08004d4b 	.word	0x08004d4b
 8004d20:	08004d4b 	.word	0x08004d4b
 8004d24:	08004d4b 	.word	0x08004d4b
 8004d28:	08004d43 	.word	0x08004d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f7ff f842 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004d30:	61f8      	str	r0, [r7, #28]
        break;
 8004d32:	e010      	b.n	8004d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d34:	4b8f      	ldr	r3, [pc, #572]	; (8004f74 <UART_SetConfig+0x56c>)
 8004d36:	61fb      	str	r3, [r7, #28]
        break;
 8004d38:	e00d      	b.n	8004d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3a:	f7fe ffa3 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8004d3e:	61f8      	str	r0, [r7, #28]
        break;
 8004d40:	e009      	b.n	8004d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d46:	61fb      	str	r3, [r7, #28]
        break;
 8004d48:	e005      	b.n	8004d56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80fb 	beq.w	8004f54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d305      	bcc.n	8004d7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d903      	bls.n	8004d82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d80:	e0e8      	b.n	8004f54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2200      	movs	r2, #0
 8004d86:	461c      	mov	r4, r3
 8004d88:	4615      	mov	r5, r2
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	022b      	lsls	r3, r5, #8
 8004d94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d98:	0222      	lsls	r2, r4, #8
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	6849      	ldr	r1, [r1, #4]
 8004d9e:	0849      	lsrs	r1, r1, #1
 8004da0:	2000      	movs	r0, #0
 8004da2:	4688      	mov	r8, r1
 8004da4:	4681      	mov	r9, r0
 8004da6:	eb12 0a08 	adds.w	sl, r2, r8
 8004daa:	eb43 0b09 	adc.w	fp, r3, r9
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	4659      	mov	r1, fp
 8004dc0:	f7fb fa56 	bl	8000270 <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4613      	mov	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd2:	d308      	bcc.n	8004de6 <UART_SetConfig+0x3de>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dda:	d204      	bcs.n	8004de6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	60da      	str	r2, [r3, #12]
 8004de4:	e0b6      	b.n	8004f54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dec:	e0b2      	b.n	8004f54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d15e      	bne.n	8004eb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d828      	bhi.n	8004e52 <UART_SetConfig+0x44a>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x400>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e53 	.word	0x08004e53
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e53 	.word	0x08004e53
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004e53 	.word	0x08004e53
 8004e28:	08004e4b 	.word	0x08004e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe ffc2 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004e30:	61f8      	str	r0, [r7, #28]
        break;
 8004e32:	e014      	b.n	8004e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e34:	f7fe ffd4 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8004e38:	61f8      	str	r0, [r7, #28]
        break;
 8004e3a:	e010      	b.n	8004e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3c:	4b4d      	ldr	r3, [pc, #308]	; (8004f74 <UART_SetConfig+0x56c>)
 8004e3e:	61fb      	str	r3, [r7, #28]
        break;
 8004e40:	e00d      	b.n	8004e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e42:	f7fe ff1f 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8004e46:	61f8      	str	r0, [r7, #28]
        break;
 8004e48:	e009      	b.n	8004e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	61fb      	str	r3, [r7, #28]
        break;
 8004e50:	e005      	b.n	8004e5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d077      	beq.n	8004f54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	005a      	lsls	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b0f      	cmp	r3, #15
 8004e7e:	d916      	bls.n	8004eae <UART_SetConfig+0x4a6>
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e86:	d212      	bcs.n	8004eae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f023 030f 	bic.w	r3, r3, #15
 8004e90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	8afb      	ldrh	r3, [r7, #22]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	8afa      	ldrh	r2, [r7, #22]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	e052      	b.n	8004f54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb4:	e04e      	b.n	8004f54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d827      	bhi.n	8004f0e <UART_SetConfig+0x506>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x4bc>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004f0f 	.word	0x08004f0f
 8004ed4:	08004eff 	.word	0x08004eff
 8004ed8:	08004f0f 	.word	0x08004f0f
 8004edc:	08004f0f 	.word	0x08004f0f
 8004ee0:	08004f0f 	.word	0x08004f0f
 8004ee4:	08004f07 	.word	0x08004f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee8:	f7fe ff64 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004eec:	61f8      	str	r0, [r7, #28]
        break;
 8004eee:	e014      	b.n	8004f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fe ff76 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8004ef4:	61f8      	str	r0, [r7, #28]
        break;
 8004ef6:	e010      	b.n	8004f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <UART_SetConfig+0x56c>)
 8004efa:	61fb      	str	r3, [r7, #28]
        break;
 8004efc:	e00d      	b.n	8004f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efe:	f7fe fec1 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8004f02:	61f8      	str	r0, [r7, #28]
        break;
 8004f04:	e009      	b.n	8004f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0a:	61fb      	str	r3, [r7, #28]
        break;
 8004f0c:	e005      	b.n	8004f1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f18:	bf00      	nop
    }

    if (pclk != 0U)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d019      	beq.n	8004f54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	085a      	lsrs	r2, r3, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d909      	bls.n	8004f4e <UART_SetConfig+0x546>
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d205      	bcs.n	8004f4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60da      	str	r2, [r3, #12]
 8004f4c:	e002      	b.n	8004f54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3728      	adds	r7, #40	; 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6e:	bf00      	nop
 8004f70:	40008000 	.word	0x40008000
 8004f74:	00f42400 	.word	0x00f42400

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01a      	beq.n	800508e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005076:	d10a      	bne.n	800508e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050cc:	f7fc f9dc 	bl	8001488 <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10e      	bne.n	80050fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f82d 	bl	800514e <UART_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e023      	b.n	8005146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d10e      	bne.n	800512a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f817 	bl	800514e <UART_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e00d      	b.n	8005146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b09c      	sub	sp, #112	; 0x70
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515e:	e0a5      	b.n	80052ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	f000 80a1 	beq.w	80052ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fc f98d 	bl	8001488 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <UART_WaitOnFlagUntilTimeout+0x32>
 800517a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800517c:	2b00      	cmp	r3, #0
 800517e:	d13e      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005194:	667b      	str	r3, [r7, #100]	; 0x64
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3308      	adds	r3, #8
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	663b      	str	r3, [r7, #96]	; 0x60
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e067      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d04f      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521a:	d147      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005224:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800523a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
 8005246:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800524a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e6      	bne.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3308      	adds	r3, #8
 800525e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	613b      	str	r3, [r7, #16]
   return(result);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005278:	623a      	str	r2, [r7, #32]
 800527a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	69f9      	ldr	r1, [r7, #28]
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	61bb      	str	r3, [r7, #24]
   return(result);
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e010      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	f43f af4a 	beq.w	8005160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3770      	adds	r7, #112	; 0x70
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <__errno>:
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <__errno+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000010 	.word	0x20000010

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4d0d      	ldr	r5, [pc, #52]	; (800531c <__libc_init_array+0x38>)
 80052e8:	4c0d      	ldr	r4, [pc, #52]	; (8005320 <__libc_init_array+0x3c>)
 80052ea:	1b64      	subs	r4, r4, r5
 80052ec:	10a4      	asrs	r4, r4, #2
 80052ee:	2600      	movs	r6, #0
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	4d0b      	ldr	r5, [pc, #44]	; (8005324 <__libc_init_array+0x40>)
 80052f6:	4c0c      	ldr	r4, [pc, #48]	; (8005328 <__libc_init_array+0x44>)
 80052f8:	f000 ffae 	bl	8006258 <_init>
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	2600      	movs	r6, #0
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	f855 3b04 	ldr.w	r3, [r5], #4
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	f855 3b04 	ldr.w	r3, [r5], #4
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	0800635c 	.word	0x0800635c
 8005320:	0800635c 	.word	0x0800635c
 8005324:	0800635c 	.word	0x0800635c
 8005328:	08006360 	.word	0x08006360

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <iprintf>:
 800533c:	b40f      	push	{r0, r1, r2, r3}
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <iprintf+0x2c>)
 8005340:	b513      	push	{r0, r1, r4, lr}
 8005342:	681c      	ldr	r4, [r3, #0]
 8005344:	b124      	cbz	r4, 8005350 <iprintf+0x14>
 8005346:	69a3      	ldr	r3, [r4, #24]
 8005348:	b913      	cbnz	r3, 8005350 <iprintf+0x14>
 800534a:	4620      	mov	r0, r4
 800534c:	f000 f866 	bl	800541c <__sinit>
 8005350:	ab05      	add	r3, sp, #20
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	68a1      	ldr	r1, [r4, #8]
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	4620      	mov	r0, r4
 800535a:	f000 f9bd 	bl	80056d8 <_vfiprintf_r>
 800535e:	b002      	add	sp, #8
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005364:	b004      	add	sp, #16
 8005366:	4770      	bx	lr
 8005368:	20000010 	.word	0x20000010

0800536c <std>:
 800536c:	2300      	movs	r3, #0
 800536e:	b510      	push	{r4, lr}
 8005370:	4604      	mov	r4, r0
 8005372:	e9c0 3300 	strd	r3, r3, [r0]
 8005376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800537a:	6083      	str	r3, [r0, #8]
 800537c:	8181      	strh	r1, [r0, #12]
 800537e:	6643      	str	r3, [r0, #100]	; 0x64
 8005380:	81c2      	strh	r2, [r0, #14]
 8005382:	6183      	str	r3, [r0, #24]
 8005384:	4619      	mov	r1, r3
 8005386:	2208      	movs	r2, #8
 8005388:	305c      	adds	r0, #92	; 0x5c
 800538a:	f7ff ffcf 	bl	800532c <memset>
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <std+0x38>)
 8005390:	6263      	str	r3, [r4, #36]	; 0x24
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <std+0x3c>)
 8005394:	62a3      	str	r3, [r4, #40]	; 0x28
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <std+0x40>)
 8005398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <std+0x44>)
 800539c:	6224      	str	r4, [r4, #32]
 800539e:	6323      	str	r3, [r4, #48]	; 0x30
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	bf00      	nop
 80053a4:	08005c81 	.word	0x08005c81
 80053a8:	08005ca3 	.word	0x08005ca3
 80053ac:	08005cdb 	.word	0x08005cdb
 80053b0:	08005cff 	.word	0x08005cff

080053b4 <_cleanup_r>:
 80053b4:	4901      	ldr	r1, [pc, #4]	; (80053bc <_cleanup_r+0x8>)
 80053b6:	f000 b8af 	b.w	8005518 <_fwalk_reent>
 80053ba:	bf00      	nop
 80053bc:	08005fd9 	.word	0x08005fd9

080053c0 <__sfmoreglue>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	2268      	movs	r2, #104	; 0x68
 80053c4:	1e4d      	subs	r5, r1, #1
 80053c6:	4355      	muls	r5, r2
 80053c8:	460e      	mov	r6, r1
 80053ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053ce:	f000 f8e5 	bl	800559c <_malloc_r>
 80053d2:	4604      	mov	r4, r0
 80053d4:	b140      	cbz	r0, 80053e8 <__sfmoreglue+0x28>
 80053d6:	2100      	movs	r1, #0
 80053d8:	e9c0 1600 	strd	r1, r6, [r0]
 80053dc:	300c      	adds	r0, #12
 80053de:	60a0      	str	r0, [r4, #8]
 80053e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053e4:	f7ff ffa2 	bl	800532c <memset>
 80053e8:	4620      	mov	r0, r4
 80053ea:	bd70      	pop	{r4, r5, r6, pc}

080053ec <__sfp_lock_acquire>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__sfp_lock_acquire+0x8>)
 80053ee:	f000 b8b3 	b.w	8005558 <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	200003f5 	.word	0x200003f5

080053f8 <__sfp_lock_release>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sfp_lock_release+0x8>)
 80053fa:	f000 b8ae 	b.w	800555a <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	200003f5 	.word	0x200003f5

08005404 <__sinit_lock_acquire>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__sinit_lock_acquire+0x8>)
 8005406:	f000 b8a7 	b.w	8005558 <__retarget_lock_acquire_recursive>
 800540a:	bf00      	nop
 800540c:	200003f6 	.word	0x200003f6

08005410 <__sinit_lock_release>:
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <__sinit_lock_release+0x8>)
 8005412:	f000 b8a2 	b.w	800555a <__retarget_lock_release_recursive>
 8005416:	bf00      	nop
 8005418:	200003f6 	.word	0x200003f6

0800541c <__sinit>:
 800541c:	b510      	push	{r4, lr}
 800541e:	4604      	mov	r4, r0
 8005420:	f7ff fff0 	bl	8005404 <__sinit_lock_acquire>
 8005424:	69a3      	ldr	r3, [r4, #24]
 8005426:	b11b      	cbz	r3, 8005430 <__sinit+0x14>
 8005428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800542c:	f7ff bff0 	b.w	8005410 <__sinit_lock_release>
 8005430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005434:	6523      	str	r3, [r4, #80]	; 0x50
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <__sinit+0x68>)
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <__sinit+0x6c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	62a2      	str	r2, [r4, #40]	; 0x28
 800543e:	42a3      	cmp	r3, r4
 8005440:	bf04      	itt	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	61a3      	streq	r3, [r4, #24]
 8005446:	4620      	mov	r0, r4
 8005448:	f000 f820 	bl	800548c <__sfp>
 800544c:	6060      	str	r0, [r4, #4]
 800544e:	4620      	mov	r0, r4
 8005450:	f000 f81c 	bl	800548c <__sfp>
 8005454:	60a0      	str	r0, [r4, #8]
 8005456:	4620      	mov	r0, r4
 8005458:	f000 f818 	bl	800548c <__sfp>
 800545c:	2200      	movs	r2, #0
 800545e:	60e0      	str	r0, [r4, #12]
 8005460:	2104      	movs	r1, #4
 8005462:	6860      	ldr	r0, [r4, #4]
 8005464:	f7ff ff82 	bl	800536c <std>
 8005468:	68a0      	ldr	r0, [r4, #8]
 800546a:	2201      	movs	r2, #1
 800546c:	2109      	movs	r1, #9
 800546e:	f7ff ff7d 	bl	800536c <std>
 8005472:	68e0      	ldr	r0, [r4, #12]
 8005474:	2202      	movs	r2, #2
 8005476:	2112      	movs	r1, #18
 8005478:	f7ff ff78 	bl	800536c <std>
 800547c:	2301      	movs	r3, #1
 800547e:	61a3      	str	r3, [r4, #24]
 8005480:	e7d2      	b.n	8005428 <__sinit+0xc>
 8005482:	bf00      	nop
 8005484:	080062bc 	.word	0x080062bc
 8005488:	080053b5 	.word	0x080053b5

0800548c <__sfp>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	4607      	mov	r7, r0
 8005490:	f7ff ffac 	bl	80053ec <__sfp_lock_acquire>
 8005494:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <__sfp+0x84>)
 8005496:	681e      	ldr	r6, [r3, #0]
 8005498:	69b3      	ldr	r3, [r6, #24]
 800549a:	b913      	cbnz	r3, 80054a2 <__sfp+0x16>
 800549c:	4630      	mov	r0, r6
 800549e:	f7ff ffbd 	bl	800541c <__sinit>
 80054a2:	3648      	adds	r6, #72	; 0x48
 80054a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	d503      	bpl.n	80054b4 <__sfp+0x28>
 80054ac:	6833      	ldr	r3, [r6, #0]
 80054ae:	b30b      	cbz	r3, 80054f4 <__sfp+0x68>
 80054b0:	6836      	ldr	r6, [r6, #0]
 80054b2:	e7f7      	b.n	80054a4 <__sfp+0x18>
 80054b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054b8:	b9d5      	cbnz	r5, 80054f0 <__sfp+0x64>
 80054ba:	4b16      	ldr	r3, [pc, #88]	; (8005514 <__sfp+0x88>)
 80054bc:	60e3      	str	r3, [r4, #12]
 80054be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054c2:	6665      	str	r5, [r4, #100]	; 0x64
 80054c4:	f000 f847 	bl	8005556 <__retarget_lock_init_recursive>
 80054c8:	f7ff ff96 	bl	80053f8 <__sfp_lock_release>
 80054cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054d4:	6025      	str	r5, [r4, #0]
 80054d6:	61a5      	str	r5, [r4, #24]
 80054d8:	2208      	movs	r2, #8
 80054da:	4629      	mov	r1, r5
 80054dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054e0:	f7ff ff24 	bl	800532c <memset>
 80054e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054ec:	4620      	mov	r0, r4
 80054ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f0:	3468      	adds	r4, #104	; 0x68
 80054f2:	e7d9      	b.n	80054a8 <__sfp+0x1c>
 80054f4:	2104      	movs	r1, #4
 80054f6:	4638      	mov	r0, r7
 80054f8:	f7ff ff62 	bl	80053c0 <__sfmoreglue>
 80054fc:	4604      	mov	r4, r0
 80054fe:	6030      	str	r0, [r6, #0]
 8005500:	2800      	cmp	r0, #0
 8005502:	d1d5      	bne.n	80054b0 <__sfp+0x24>
 8005504:	f7ff ff78 	bl	80053f8 <__sfp_lock_release>
 8005508:	230c      	movs	r3, #12
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	e7ee      	b.n	80054ec <__sfp+0x60>
 800550e:	bf00      	nop
 8005510:	080062bc 	.word	0x080062bc
 8005514:	ffff0001 	.word	0xffff0001

08005518 <_fwalk_reent>:
 8005518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800551c:	4606      	mov	r6, r0
 800551e:	4688      	mov	r8, r1
 8005520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005524:	2700      	movs	r7, #0
 8005526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800552a:	f1b9 0901 	subs.w	r9, r9, #1
 800552e:	d505      	bpl.n	800553c <_fwalk_reent+0x24>
 8005530:	6824      	ldr	r4, [r4, #0]
 8005532:	2c00      	cmp	r4, #0
 8005534:	d1f7      	bne.n	8005526 <_fwalk_reent+0xe>
 8005536:	4638      	mov	r0, r7
 8005538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800553c:	89ab      	ldrh	r3, [r5, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d907      	bls.n	8005552 <_fwalk_reent+0x3a>
 8005542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005546:	3301      	adds	r3, #1
 8005548:	d003      	beq.n	8005552 <_fwalk_reent+0x3a>
 800554a:	4629      	mov	r1, r5
 800554c:	4630      	mov	r0, r6
 800554e:	47c0      	blx	r8
 8005550:	4307      	orrs	r7, r0
 8005552:	3568      	adds	r5, #104	; 0x68
 8005554:	e7e9      	b.n	800552a <_fwalk_reent+0x12>

08005556 <__retarget_lock_init_recursive>:
 8005556:	4770      	bx	lr

08005558 <__retarget_lock_acquire_recursive>:
 8005558:	4770      	bx	lr

0800555a <__retarget_lock_release_recursive>:
 800555a:	4770      	bx	lr

0800555c <sbrk_aligned>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4e0e      	ldr	r6, [pc, #56]	; (8005598 <sbrk_aligned+0x3c>)
 8005560:	460c      	mov	r4, r1
 8005562:	6831      	ldr	r1, [r6, #0]
 8005564:	4605      	mov	r5, r0
 8005566:	b911      	cbnz	r1, 800556e <sbrk_aligned+0x12>
 8005568:	f000 fb7a 	bl	8005c60 <_sbrk_r>
 800556c:	6030      	str	r0, [r6, #0]
 800556e:	4621      	mov	r1, r4
 8005570:	4628      	mov	r0, r5
 8005572:	f000 fb75 	bl	8005c60 <_sbrk_r>
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	d00a      	beq.n	8005590 <sbrk_aligned+0x34>
 800557a:	1cc4      	adds	r4, r0, #3
 800557c:	f024 0403 	bic.w	r4, r4, #3
 8005580:	42a0      	cmp	r0, r4
 8005582:	d007      	beq.n	8005594 <sbrk_aligned+0x38>
 8005584:	1a21      	subs	r1, r4, r0
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fb6a 	bl	8005c60 <_sbrk_r>
 800558c:	3001      	adds	r0, #1
 800558e:	d101      	bne.n	8005594 <sbrk_aligned+0x38>
 8005590:	f04f 34ff 	mov.w	r4, #4294967295
 8005594:	4620      	mov	r0, r4
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	200003fc 	.word	0x200003fc

0800559c <_malloc_r>:
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	1ccd      	adds	r5, r1, #3
 80055a2:	f025 0503 	bic.w	r5, r5, #3
 80055a6:	3508      	adds	r5, #8
 80055a8:	2d0c      	cmp	r5, #12
 80055aa:	bf38      	it	cc
 80055ac:	250c      	movcc	r5, #12
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	4607      	mov	r7, r0
 80055b2:	db01      	blt.n	80055b8 <_malloc_r+0x1c>
 80055b4:	42a9      	cmp	r1, r5
 80055b6:	d905      	bls.n	80055c4 <_malloc_r+0x28>
 80055b8:	230c      	movs	r3, #12
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	2600      	movs	r6, #0
 80055be:	4630      	mov	r0, r6
 80055c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c4:	4e2e      	ldr	r6, [pc, #184]	; (8005680 <_malloc_r+0xe4>)
 80055c6:	f000 fdbb 	bl	8006140 <__malloc_lock>
 80055ca:	6833      	ldr	r3, [r6, #0]
 80055cc:	461c      	mov	r4, r3
 80055ce:	bb34      	cbnz	r4, 800561e <_malloc_r+0x82>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4638      	mov	r0, r7
 80055d4:	f7ff ffc2 	bl	800555c <sbrk_aligned>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	4604      	mov	r4, r0
 80055dc:	d14d      	bne.n	800567a <_malloc_r+0xde>
 80055de:	6834      	ldr	r4, [r6, #0]
 80055e0:	4626      	mov	r6, r4
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	d140      	bne.n	8005668 <_malloc_r+0xcc>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	4631      	mov	r1, r6
 80055ea:	4638      	mov	r0, r7
 80055ec:	eb04 0803 	add.w	r8, r4, r3
 80055f0:	f000 fb36 	bl	8005c60 <_sbrk_r>
 80055f4:	4580      	cmp	r8, r0
 80055f6:	d13a      	bne.n	800566e <_malloc_r+0xd2>
 80055f8:	6821      	ldr	r1, [r4, #0]
 80055fa:	3503      	adds	r5, #3
 80055fc:	1a6d      	subs	r5, r5, r1
 80055fe:	f025 0503 	bic.w	r5, r5, #3
 8005602:	3508      	adds	r5, #8
 8005604:	2d0c      	cmp	r5, #12
 8005606:	bf38      	it	cc
 8005608:	250c      	movcc	r5, #12
 800560a:	4629      	mov	r1, r5
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff ffa5 	bl	800555c <sbrk_aligned>
 8005612:	3001      	adds	r0, #1
 8005614:	d02b      	beq.n	800566e <_malloc_r+0xd2>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	442b      	add	r3, r5
 800561a:	6023      	str	r3, [r4, #0]
 800561c:	e00e      	b.n	800563c <_malloc_r+0xa0>
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	1b52      	subs	r2, r2, r5
 8005622:	d41e      	bmi.n	8005662 <_malloc_r+0xc6>
 8005624:	2a0b      	cmp	r2, #11
 8005626:	d916      	bls.n	8005656 <_malloc_r+0xba>
 8005628:	1961      	adds	r1, r4, r5
 800562a:	42a3      	cmp	r3, r4
 800562c:	6025      	str	r5, [r4, #0]
 800562e:	bf18      	it	ne
 8005630:	6059      	strne	r1, [r3, #4]
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	bf08      	it	eq
 8005636:	6031      	streq	r1, [r6, #0]
 8005638:	5162      	str	r2, [r4, r5]
 800563a:	604b      	str	r3, [r1, #4]
 800563c:	4638      	mov	r0, r7
 800563e:	f104 060b 	add.w	r6, r4, #11
 8005642:	f000 fd83 	bl	800614c <__malloc_unlock>
 8005646:	f026 0607 	bic.w	r6, r6, #7
 800564a:	1d23      	adds	r3, r4, #4
 800564c:	1af2      	subs	r2, r6, r3
 800564e:	d0b6      	beq.n	80055be <_malloc_r+0x22>
 8005650:	1b9b      	subs	r3, r3, r6
 8005652:	50a3      	str	r3, [r4, r2]
 8005654:	e7b3      	b.n	80055be <_malloc_r+0x22>
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	42a3      	cmp	r3, r4
 800565a:	bf0c      	ite	eq
 800565c:	6032      	streq	r2, [r6, #0]
 800565e:	605a      	strne	r2, [r3, #4]
 8005660:	e7ec      	b.n	800563c <_malloc_r+0xa0>
 8005662:	4623      	mov	r3, r4
 8005664:	6864      	ldr	r4, [r4, #4]
 8005666:	e7b2      	b.n	80055ce <_malloc_r+0x32>
 8005668:	4634      	mov	r4, r6
 800566a:	6876      	ldr	r6, [r6, #4]
 800566c:	e7b9      	b.n	80055e2 <_malloc_r+0x46>
 800566e:	230c      	movs	r3, #12
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4638      	mov	r0, r7
 8005674:	f000 fd6a 	bl	800614c <__malloc_unlock>
 8005678:	e7a1      	b.n	80055be <_malloc_r+0x22>
 800567a:	6025      	str	r5, [r4, #0]
 800567c:	e7de      	b.n	800563c <_malloc_r+0xa0>
 800567e:	bf00      	nop
 8005680:	200003f8 	.word	0x200003f8

08005684 <__sfputc_r>:
 8005684:	6893      	ldr	r3, [r2, #8]
 8005686:	3b01      	subs	r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	b410      	push	{r4}
 800568c:	6093      	str	r3, [r2, #8]
 800568e:	da08      	bge.n	80056a2 <__sfputc_r+0x1e>
 8005690:	6994      	ldr	r4, [r2, #24]
 8005692:	42a3      	cmp	r3, r4
 8005694:	db01      	blt.n	800569a <__sfputc_r+0x16>
 8005696:	290a      	cmp	r1, #10
 8005698:	d103      	bne.n	80056a2 <__sfputc_r+0x1e>
 800569a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800569e:	f000 bb33 	b.w	8005d08 <__swbuf_r>
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	1c58      	adds	r0, r3, #1
 80056a6:	6010      	str	r0, [r2, #0]
 80056a8:	7019      	strb	r1, [r3, #0]
 80056aa:	4608      	mov	r0, r1
 80056ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <__sfputs_r>:
 80056b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b4:	4606      	mov	r6, r0
 80056b6:	460f      	mov	r7, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	18d5      	adds	r5, r2, r3
 80056bc:	42ac      	cmp	r4, r5
 80056be:	d101      	bne.n	80056c4 <__sfputs_r+0x12>
 80056c0:	2000      	movs	r0, #0
 80056c2:	e007      	b.n	80056d4 <__sfputs_r+0x22>
 80056c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c8:	463a      	mov	r2, r7
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7ff ffda 	bl	8005684 <__sfputc_r>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d1f3      	bne.n	80056bc <__sfputs_r+0xa>
 80056d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056d8 <_vfiprintf_r>:
 80056d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	460d      	mov	r5, r1
 80056de:	b09d      	sub	sp, #116	; 0x74
 80056e0:	4614      	mov	r4, r2
 80056e2:	4698      	mov	r8, r3
 80056e4:	4606      	mov	r6, r0
 80056e6:	b118      	cbz	r0, 80056f0 <_vfiprintf_r+0x18>
 80056e8:	6983      	ldr	r3, [r0, #24]
 80056ea:	b90b      	cbnz	r3, 80056f0 <_vfiprintf_r+0x18>
 80056ec:	f7ff fe96 	bl	800541c <__sinit>
 80056f0:	4b89      	ldr	r3, [pc, #548]	; (8005918 <_vfiprintf_r+0x240>)
 80056f2:	429d      	cmp	r5, r3
 80056f4:	d11b      	bne.n	800572e <_vfiprintf_r+0x56>
 80056f6:	6875      	ldr	r5, [r6, #4]
 80056f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056fa:	07d9      	lsls	r1, r3, #31
 80056fc:	d405      	bmi.n	800570a <_vfiprintf_r+0x32>
 80056fe:	89ab      	ldrh	r3, [r5, #12]
 8005700:	059a      	lsls	r2, r3, #22
 8005702:	d402      	bmi.n	800570a <_vfiprintf_r+0x32>
 8005704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005706:	f7ff ff27 	bl	8005558 <__retarget_lock_acquire_recursive>
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	071b      	lsls	r3, r3, #28
 800570e:	d501      	bpl.n	8005714 <_vfiprintf_r+0x3c>
 8005710:	692b      	ldr	r3, [r5, #16]
 8005712:	b9eb      	cbnz	r3, 8005750 <_vfiprintf_r+0x78>
 8005714:	4629      	mov	r1, r5
 8005716:	4630      	mov	r0, r6
 8005718:	f000 fb5a 	bl	8005dd0 <__swsetup_r>
 800571c:	b1c0      	cbz	r0, 8005750 <_vfiprintf_r+0x78>
 800571e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005720:	07dc      	lsls	r4, r3, #31
 8005722:	d50e      	bpl.n	8005742 <_vfiprintf_r+0x6a>
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	b01d      	add	sp, #116	; 0x74
 800572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572e:	4b7b      	ldr	r3, [pc, #492]	; (800591c <_vfiprintf_r+0x244>)
 8005730:	429d      	cmp	r5, r3
 8005732:	d101      	bne.n	8005738 <_vfiprintf_r+0x60>
 8005734:	68b5      	ldr	r5, [r6, #8]
 8005736:	e7df      	b.n	80056f8 <_vfiprintf_r+0x20>
 8005738:	4b79      	ldr	r3, [pc, #484]	; (8005920 <_vfiprintf_r+0x248>)
 800573a:	429d      	cmp	r5, r3
 800573c:	bf08      	it	eq
 800573e:	68f5      	ldreq	r5, [r6, #12]
 8005740:	e7da      	b.n	80056f8 <_vfiprintf_r+0x20>
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	0598      	lsls	r0, r3, #22
 8005746:	d4ed      	bmi.n	8005724 <_vfiprintf_r+0x4c>
 8005748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800574a:	f7ff ff06 	bl	800555a <__retarget_lock_release_recursive>
 800574e:	e7e9      	b.n	8005724 <_vfiprintf_r+0x4c>
 8005750:	2300      	movs	r3, #0
 8005752:	9309      	str	r3, [sp, #36]	; 0x24
 8005754:	2320      	movs	r3, #32
 8005756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800575a:	f8cd 800c 	str.w	r8, [sp, #12]
 800575e:	2330      	movs	r3, #48	; 0x30
 8005760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005924 <_vfiprintf_r+0x24c>
 8005764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005768:	f04f 0901 	mov.w	r9, #1
 800576c:	4623      	mov	r3, r4
 800576e:	469a      	mov	sl, r3
 8005770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005774:	b10a      	cbz	r2, 800577a <_vfiprintf_r+0xa2>
 8005776:	2a25      	cmp	r2, #37	; 0x25
 8005778:	d1f9      	bne.n	800576e <_vfiprintf_r+0x96>
 800577a:	ebba 0b04 	subs.w	fp, sl, r4
 800577e:	d00b      	beq.n	8005798 <_vfiprintf_r+0xc0>
 8005780:	465b      	mov	r3, fp
 8005782:	4622      	mov	r2, r4
 8005784:	4629      	mov	r1, r5
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ff93 	bl	80056b2 <__sfputs_r>
 800578c:	3001      	adds	r0, #1
 800578e:	f000 80aa 	beq.w	80058e6 <_vfiprintf_r+0x20e>
 8005792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005794:	445a      	add	r2, fp
 8005796:	9209      	str	r2, [sp, #36]	; 0x24
 8005798:	f89a 3000 	ldrb.w	r3, [sl]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a2 	beq.w	80058e6 <_vfiprintf_r+0x20e>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057ac:	f10a 0a01 	add.w	sl, sl, #1
 80057b0:	9304      	str	r3, [sp, #16]
 80057b2:	9307      	str	r3, [sp, #28]
 80057b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057b8:	931a      	str	r3, [sp, #104]	; 0x68
 80057ba:	4654      	mov	r4, sl
 80057bc:	2205      	movs	r2, #5
 80057be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c2:	4858      	ldr	r0, [pc, #352]	; (8005924 <_vfiprintf_r+0x24c>)
 80057c4:	f7fa fd04 	bl	80001d0 <memchr>
 80057c8:	9a04      	ldr	r2, [sp, #16]
 80057ca:	b9d8      	cbnz	r0, 8005804 <_vfiprintf_r+0x12c>
 80057cc:	06d1      	lsls	r1, r2, #27
 80057ce:	bf44      	itt	mi
 80057d0:	2320      	movmi	r3, #32
 80057d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d6:	0713      	lsls	r3, r2, #28
 80057d8:	bf44      	itt	mi
 80057da:	232b      	movmi	r3, #43	; 0x2b
 80057dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057e0:	f89a 3000 	ldrb.w	r3, [sl]
 80057e4:	2b2a      	cmp	r3, #42	; 0x2a
 80057e6:	d015      	beq.n	8005814 <_vfiprintf_r+0x13c>
 80057e8:	9a07      	ldr	r2, [sp, #28]
 80057ea:	4654      	mov	r4, sl
 80057ec:	2000      	movs	r0, #0
 80057ee:	f04f 0c0a 	mov.w	ip, #10
 80057f2:	4621      	mov	r1, r4
 80057f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f8:	3b30      	subs	r3, #48	; 0x30
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	d94e      	bls.n	800589c <_vfiprintf_r+0x1c4>
 80057fe:	b1b0      	cbz	r0, 800582e <_vfiprintf_r+0x156>
 8005800:	9207      	str	r2, [sp, #28]
 8005802:	e014      	b.n	800582e <_vfiprintf_r+0x156>
 8005804:	eba0 0308 	sub.w	r3, r0, r8
 8005808:	fa09 f303 	lsl.w	r3, r9, r3
 800580c:	4313      	orrs	r3, r2
 800580e:	9304      	str	r3, [sp, #16]
 8005810:	46a2      	mov	sl, r4
 8005812:	e7d2      	b.n	80057ba <_vfiprintf_r+0xe2>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	1d19      	adds	r1, r3, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	9103      	str	r1, [sp, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	bfbb      	ittet	lt
 8005820:	425b      	neglt	r3, r3
 8005822:	f042 0202 	orrlt.w	r2, r2, #2
 8005826:	9307      	strge	r3, [sp, #28]
 8005828:	9307      	strlt	r3, [sp, #28]
 800582a:	bfb8      	it	lt
 800582c:	9204      	strlt	r2, [sp, #16]
 800582e:	7823      	ldrb	r3, [r4, #0]
 8005830:	2b2e      	cmp	r3, #46	; 0x2e
 8005832:	d10c      	bne.n	800584e <_vfiprintf_r+0x176>
 8005834:	7863      	ldrb	r3, [r4, #1]
 8005836:	2b2a      	cmp	r3, #42	; 0x2a
 8005838:	d135      	bne.n	80058a6 <_vfiprintf_r+0x1ce>
 800583a:	9b03      	ldr	r3, [sp, #12]
 800583c:	1d1a      	adds	r2, r3, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	9203      	str	r2, [sp, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	bfb8      	it	lt
 8005846:	f04f 33ff 	movlt.w	r3, #4294967295
 800584a:	3402      	adds	r4, #2
 800584c:	9305      	str	r3, [sp, #20]
 800584e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005934 <_vfiprintf_r+0x25c>
 8005852:	7821      	ldrb	r1, [r4, #0]
 8005854:	2203      	movs	r2, #3
 8005856:	4650      	mov	r0, sl
 8005858:	f7fa fcba 	bl	80001d0 <memchr>
 800585c:	b140      	cbz	r0, 8005870 <_vfiprintf_r+0x198>
 800585e:	2340      	movs	r3, #64	; 0x40
 8005860:	eba0 000a 	sub.w	r0, r0, sl
 8005864:	fa03 f000 	lsl.w	r0, r3, r0
 8005868:	9b04      	ldr	r3, [sp, #16]
 800586a:	4303      	orrs	r3, r0
 800586c:	3401      	adds	r4, #1
 800586e:	9304      	str	r3, [sp, #16]
 8005870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005874:	482c      	ldr	r0, [pc, #176]	; (8005928 <_vfiprintf_r+0x250>)
 8005876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800587a:	2206      	movs	r2, #6
 800587c:	f7fa fca8 	bl	80001d0 <memchr>
 8005880:	2800      	cmp	r0, #0
 8005882:	d03f      	beq.n	8005904 <_vfiprintf_r+0x22c>
 8005884:	4b29      	ldr	r3, [pc, #164]	; (800592c <_vfiprintf_r+0x254>)
 8005886:	bb1b      	cbnz	r3, 80058d0 <_vfiprintf_r+0x1f8>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	3307      	adds	r3, #7
 800588c:	f023 0307 	bic.w	r3, r3, #7
 8005890:	3308      	adds	r3, #8
 8005892:	9303      	str	r3, [sp, #12]
 8005894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005896:	443b      	add	r3, r7
 8005898:	9309      	str	r3, [sp, #36]	; 0x24
 800589a:	e767      	b.n	800576c <_vfiprintf_r+0x94>
 800589c:	fb0c 3202 	mla	r2, ip, r2, r3
 80058a0:	460c      	mov	r4, r1
 80058a2:	2001      	movs	r0, #1
 80058a4:	e7a5      	b.n	80057f2 <_vfiprintf_r+0x11a>
 80058a6:	2300      	movs	r3, #0
 80058a8:	3401      	adds	r4, #1
 80058aa:	9305      	str	r3, [sp, #20]
 80058ac:	4619      	mov	r1, r3
 80058ae:	f04f 0c0a 	mov.w	ip, #10
 80058b2:	4620      	mov	r0, r4
 80058b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058b8:	3a30      	subs	r2, #48	; 0x30
 80058ba:	2a09      	cmp	r2, #9
 80058bc:	d903      	bls.n	80058c6 <_vfiprintf_r+0x1ee>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0c5      	beq.n	800584e <_vfiprintf_r+0x176>
 80058c2:	9105      	str	r1, [sp, #20]
 80058c4:	e7c3      	b.n	800584e <_vfiprintf_r+0x176>
 80058c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058ca:	4604      	mov	r4, r0
 80058cc:	2301      	movs	r3, #1
 80058ce:	e7f0      	b.n	80058b2 <_vfiprintf_r+0x1da>
 80058d0:	ab03      	add	r3, sp, #12
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	462a      	mov	r2, r5
 80058d6:	4b16      	ldr	r3, [pc, #88]	; (8005930 <_vfiprintf_r+0x258>)
 80058d8:	a904      	add	r1, sp, #16
 80058da:	4630      	mov	r0, r6
 80058dc:	f3af 8000 	nop.w
 80058e0:	4607      	mov	r7, r0
 80058e2:	1c78      	adds	r0, r7, #1
 80058e4:	d1d6      	bne.n	8005894 <_vfiprintf_r+0x1bc>
 80058e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058e8:	07d9      	lsls	r1, r3, #31
 80058ea:	d405      	bmi.n	80058f8 <_vfiprintf_r+0x220>
 80058ec:	89ab      	ldrh	r3, [r5, #12]
 80058ee:	059a      	lsls	r2, r3, #22
 80058f0:	d402      	bmi.n	80058f8 <_vfiprintf_r+0x220>
 80058f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f4:	f7ff fe31 	bl	800555a <__retarget_lock_release_recursive>
 80058f8:	89ab      	ldrh	r3, [r5, #12]
 80058fa:	065b      	lsls	r3, r3, #25
 80058fc:	f53f af12 	bmi.w	8005724 <_vfiprintf_r+0x4c>
 8005900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005902:	e711      	b.n	8005728 <_vfiprintf_r+0x50>
 8005904:	ab03      	add	r3, sp, #12
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	462a      	mov	r2, r5
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <_vfiprintf_r+0x258>)
 800590c:	a904      	add	r1, sp, #16
 800590e:	4630      	mov	r0, r6
 8005910:	f000 f880 	bl	8005a14 <_printf_i>
 8005914:	e7e4      	b.n	80058e0 <_vfiprintf_r+0x208>
 8005916:	bf00      	nop
 8005918:	080062e0 	.word	0x080062e0
 800591c:	08006300 	.word	0x08006300
 8005920:	080062c0 	.word	0x080062c0
 8005924:	08006320 	.word	0x08006320
 8005928:	0800632a 	.word	0x0800632a
 800592c:	00000000 	.word	0x00000000
 8005930:	080056b3 	.word	0x080056b3
 8005934:	08006326 	.word	0x08006326

08005938 <_printf_common>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	4616      	mov	r6, r2
 800593e:	4699      	mov	r9, r3
 8005940:	688a      	ldr	r2, [r1, #8]
 8005942:	690b      	ldr	r3, [r1, #16]
 8005944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005948:	4293      	cmp	r3, r2
 800594a:	bfb8      	it	lt
 800594c:	4613      	movlt	r3, r2
 800594e:	6033      	str	r3, [r6, #0]
 8005950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005954:	4607      	mov	r7, r0
 8005956:	460c      	mov	r4, r1
 8005958:	b10a      	cbz	r2, 800595e <_printf_common+0x26>
 800595a:	3301      	adds	r3, #1
 800595c:	6033      	str	r3, [r6, #0]
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	0699      	lsls	r1, r3, #26
 8005962:	bf42      	ittt	mi
 8005964:	6833      	ldrmi	r3, [r6, #0]
 8005966:	3302      	addmi	r3, #2
 8005968:	6033      	strmi	r3, [r6, #0]
 800596a:	6825      	ldr	r5, [r4, #0]
 800596c:	f015 0506 	ands.w	r5, r5, #6
 8005970:	d106      	bne.n	8005980 <_printf_common+0x48>
 8005972:	f104 0a19 	add.w	sl, r4, #25
 8005976:	68e3      	ldr	r3, [r4, #12]
 8005978:	6832      	ldr	r2, [r6, #0]
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	42ab      	cmp	r3, r5
 800597e:	dc26      	bgt.n	80059ce <_printf_common+0x96>
 8005980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005984:	1e13      	subs	r3, r2, #0
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	bf18      	it	ne
 800598a:	2301      	movne	r3, #1
 800598c:	0692      	lsls	r2, r2, #26
 800598e:	d42b      	bmi.n	80059e8 <_printf_common+0xb0>
 8005990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005994:	4649      	mov	r1, r9
 8005996:	4638      	mov	r0, r7
 8005998:	47c0      	blx	r8
 800599a:	3001      	adds	r0, #1
 800599c:	d01e      	beq.n	80059dc <_printf_common+0xa4>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	68e5      	ldr	r5, [r4, #12]
 80059a2:	6832      	ldr	r2, [r6, #0]
 80059a4:	f003 0306 	and.w	r3, r3, #6
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	bf08      	it	eq
 80059ac:	1aad      	subeq	r5, r5, r2
 80059ae:	68a3      	ldr	r3, [r4, #8]
 80059b0:	6922      	ldr	r2, [r4, #16]
 80059b2:	bf0c      	ite	eq
 80059b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059b8:	2500      	movne	r5, #0
 80059ba:	4293      	cmp	r3, r2
 80059bc:	bfc4      	itt	gt
 80059be:	1a9b      	subgt	r3, r3, r2
 80059c0:	18ed      	addgt	r5, r5, r3
 80059c2:	2600      	movs	r6, #0
 80059c4:	341a      	adds	r4, #26
 80059c6:	42b5      	cmp	r5, r6
 80059c8:	d11a      	bne.n	8005a00 <_printf_common+0xc8>
 80059ca:	2000      	movs	r0, #0
 80059cc:	e008      	b.n	80059e0 <_printf_common+0xa8>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4652      	mov	r2, sl
 80059d2:	4649      	mov	r1, r9
 80059d4:	4638      	mov	r0, r7
 80059d6:	47c0      	blx	r8
 80059d8:	3001      	adds	r0, #1
 80059da:	d103      	bne.n	80059e4 <_printf_common+0xac>
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e4:	3501      	adds	r5, #1
 80059e6:	e7c6      	b.n	8005976 <_printf_common+0x3e>
 80059e8:	18e1      	adds	r1, r4, r3
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	2030      	movs	r0, #48	; 0x30
 80059ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059f2:	4422      	add	r2, r4
 80059f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059fc:	3302      	adds	r3, #2
 80059fe:	e7c7      	b.n	8005990 <_printf_common+0x58>
 8005a00:	2301      	movs	r3, #1
 8005a02:	4622      	mov	r2, r4
 8005a04:	4649      	mov	r1, r9
 8005a06:	4638      	mov	r0, r7
 8005a08:	47c0      	blx	r8
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d0e6      	beq.n	80059dc <_printf_common+0xa4>
 8005a0e:	3601      	adds	r6, #1
 8005a10:	e7d9      	b.n	80059c6 <_printf_common+0x8e>
	...

08005a14 <_printf_i>:
 8005a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	7e0f      	ldrb	r7, [r1, #24]
 8005a1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a1c:	2f78      	cmp	r7, #120	; 0x78
 8005a1e:	4691      	mov	r9, r2
 8005a20:	4680      	mov	r8, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	469a      	mov	sl, r3
 8005a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a2a:	d807      	bhi.n	8005a3c <_printf_i+0x28>
 8005a2c:	2f62      	cmp	r7, #98	; 0x62
 8005a2e:	d80a      	bhi.n	8005a46 <_printf_i+0x32>
 8005a30:	2f00      	cmp	r7, #0
 8005a32:	f000 80d8 	beq.w	8005be6 <_printf_i+0x1d2>
 8005a36:	2f58      	cmp	r7, #88	; 0x58
 8005a38:	f000 80a3 	beq.w	8005b82 <_printf_i+0x16e>
 8005a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a44:	e03a      	b.n	8005abc <_printf_i+0xa8>
 8005a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a4a:	2b15      	cmp	r3, #21
 8005a4c:	d8f6      	bhi.n	8005a3c <_printf_i+0x28>
 8005a4e:	a101      	add	r1, pc, #4	; (adr r1, 8005a54 <_printf_i+0x40>)
 8005a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a54:	08005aad 	.word	0x08005aad
 8005a58:	08005ac1 	.word	0x08005ac1
 8005a5c:	08005a3d 	.word	0x08005a3d
 8005a60:	08005a3d 	.word	0x08005a3d
 8005a64:	08005a3d 	.word	0x08005a3d
 8005a68:	08005a3d 	.word	0x08005a3d
 8005a6c:	08005ac1 	.word	0x08005ac1
 8005a70:	08005a3d 	.word	0x08005a3d
 8005a74:	08005a3d 	.word	0x08005a3d
 8005a78:	08005a3d 	.word	0x08005a3d
 8005a7c:	08005a3d 	.word	0x08005a3d
 8005a80:	08005bcd 	.word	0x08005bcd
 8005a84:	08005af1 	.word	0x08005af1
 8005a88:	08005baf 	.word	0x08005baf
 8005a8c:	08005a3d 	.word	0x08005a3d
 8005a90:	08005a3d 	.word	0x08005a3d
 8005a94:	08005bef 	.word	0x08005bef
 8005a98:	08005a3d 	.word	0x08005a3d
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005a3d 	.word	0x08005a3d
 8005aa4:	08005a3d 	.word	0x08005a3d
 8005aa8:	08005bb7 	.word	0x08005bb7
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	1d1a      	adds	r2, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	602a      	str	r2, [r5, #0]
 8005ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0a3      	b.n	8005c08 <_printf_i+0x1f4>
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	6829      	ldr	r1, [r5, #0]
 8005ac4:	0606      	lsls	r6, r0, #24
 8005ac6:	f101 0304 	add.w	r3, r1, #4
 8005aca:	d50a      	bpl.n	8005ae2 <_printf_i+0xce>
 8005acc:	680e      	ldr	r6, [r1, #0]
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	2e00      	cmp	r6, #0
 8005ad2:	da03      	bge.n	8005adc <_printf_i+0xc8>
 8005ad4:	232d      	movs	r3, #45	; 0x2d
 8005ad6:	4276      	negs	r6, r6
 8005ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005adc:	485e      	ldr	r0, [pc, #376]	; (8005c58 <_printf_i+0x244>)
 8005ade:	230a      	movs	r3, #10
 8005ae0:	e019      	b.n	8005b16 <_printf_i+0x102>
 8005ae2:	680e      	ldr	r6, [r1, #0]
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005aea:	bf18      	it	ne
 8005aec:	b236      	sxthne	r6, r6
 8005aee:	e7ef      	b.n	8005ad0 <_printf_i+0xbc>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	1d19      	adds	r1, r3, #4
 8005af6:	6029      	str	r1, [r5, #0]
 8005af8:	0601      	lsls	r1, r0, #24
 8005afa:	d501      	bpl.n	8005b00 <_printf_i+0xec>
 8005afc:	681e      	ldr	r6, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <_printf_i+0xf2>
 8005b00:	0646      	lsls	r6, r0, #25
 8005b02:	d5fb      	bpl.n	8005afc <_printf_i+0xe8>
 8005b04:	881e      	ldrh	r6, [r3, #0]
 8005b06:	4854      	ldr	r0, [pc, #336]	; (8005c58 <_printf_i+0x244>)
 8005b08:	2f6f      	cmp	r7, #111	; 0x6f
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2308      	moveq	r3, #8
 8005b0e:	230a      	movne	r3, #10
 8005b10:	2100      	movs	r1, #0
 8005b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b16:	6865      	ldr	r5, [r4, #4]
 8005b18:	60a5      	str	r5, [r4, #8]
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	bfa2      	ittt	ge
 8005b1e:	6821      	ldrge	r1, [r4, #0]
 8005b20:	f021 0104 	bicge.w	r1, r1, #4
 8005b24:	6021      	strge	r1, [r4, #0]
 8005b26:	b90e      	cbnz	r6, 8005b2c <_printf_i+0x118>
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	d04d      	beq.n	8005bc8 <_printf_i+0x1b4>
 8005b2c:	4615      	mov	r5, r2
 8005b2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b32:	fb03 6711 	mls	r7, r3, r1, r6
 8005b36:	5dc7      	ldrb	r7, [r0, r7]
 8005b38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b3c:	4637      	mov	r7, r6
 8005b3e:	42bb      	cmp	r3, r7
 8005b40:	460e      	mov	r6, r1
 8005b42:	d9f4      	bls.n	8005b2e <_printf_i+0x11a>
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d10b      	bne.n	8005b60 <_printf_i+0x14c>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	07de      	lsls	r6, r3, #31
 8005b4c:	d508      	bpl.n	8005b60 <_printf_i+0x14c>
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	6861      	ldr	r1, [r4, #4]
 8005b52:	4299      	cmp	r1, r3
 8005b54:	bfde      	ittt	le
 8005b56:	2330      	movle	r3, #48	; 0x30
 8005b58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b60:	1b52      	subs	r2, r2, r5
 8005b62:	6122      	str	r2, [r4, #16]
 8005b64:	f8cd a000 	str.w	sl, [sp]
 8005b68:	464b      	mov	r3, r9
 8005b6a:	aa03      	add	r2, sp, #12
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f7ff fee2 	bl	8005938 <_printf_common>
 8005b74:	3001      	adds	r0, #1
 8005b76:	d14c      	bne.n	8005c12 <_printf_i+0x1fe>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	b004      	add	sp, #16
 8005b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b82:	4835      	ldr	r0, [pc, #212]	; (8005c58 <_printf_i+0x244>)
 8005b84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b88:	6829      	ldr	r1, [r5, #0]
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b90:	6029      	str	r1, [r5, #0]
 8005b92:	061d      	lsls	r5, r3, #24
 8005b94:	d514      	bpl.n	8005bc0 <_printf_i+0x1ac>
 8005b96:	07df      	lsls	r7, r3, #31
 8005b98:	bf44      	itt	mi
 8005b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b9e:	6023      	strmi	r3, [r4, #0]
 8005ba0:	b91e      	cbnz	r6, 8005baa <_printf_i+0x196>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	f023 0320 	bic.w	r3, r3, #32
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	2310      	movs	r3, #16
 8005bac:	e7b0      	b.n	8005b10 <_printf_i+0xfc>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	f043 0320 	orr.w	r3, r3, #32
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	2378      	movs	r3, #120	; 0x78
 8005bb8:	4828      	ldr	r0, [pc, #160]	; (8005c5c <_printf_i+0x248>)
 8005bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bbe:	e7e3      	b.n	8005b88 <_printf_i+0x174>
 8005bc0:	0659      	lsls	r1, r3, #25
 8005bc2:	bf48      	it	mi
 8005bc4:	b2b6      	uxthmi	r6, r6
 8005bc6:	e7e6      	b.n	8005b96 <_printf_i+0x182>
 8005bc8:	4615      	mov	r5, r2
 8005bca:	e7bb      	b.n	8005b44 <_printf_i+0x130>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	6826      	ldr	r6, [r4, #0]
 8005bd0:	6961      	ldr	r1, [r4, #20]
 8005bd2:	1d18      	adds	r0, r3, #4
 8005bd4:	6028      	str	r0, [r5, #0]
 8005bd6:	0635      	lsls	r5, r6, #24
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	d501      	bpl.n	8005be0 <_printf_i+0x1cc>
 8005bdc:	6019      	str	r1, [r3, #0]
 8005bde:	e002      	b.n	8005be6 <_printf_i+0x1d2>
 8005be0:	0670      	lsls	r0, r6, #25
 8005be2:	d5fb      	bpl.n	8005bdc <_printf_i+0x1c8>
 8005be4:	8019      	strh	r1, [r3, #0]
 8005be6:	2300      	movs	r3, #0
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	4615      	mov	r5, r2
 8005bec:	e7ba      	b.n	8005b64 <_printf_i+0x150>
 8005bee:	682b      	ldr	r3, [r5, #0]
 8005bf0:	1d1a      	adds	r2, r3, #4
 8005bf2:	602a      	str	r2, [r5, #0]
 8005bf4:	681d      	ldr	r5, [r3, #0]
 8005bf6:	6862      	ldr	r2, [r4, #4]
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f7fa fae8 	bl	80001d0 <memchr>
 8005c00:	b108      	cbz	r0, 8005c06 <_printf_i+0x1f2>
 8005c02:	1b40      	subs	r0, r0, r5
 8005c04:	6060      	str	r0, [r4, #4]
 8005c06:	6863      	ldr	r3, [r4, #4]
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c10:	e7a8      	b.n	8005b64 <_printf_i+0x150>
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	462a      	mov	r2, r5
 8005c16:	4649      	mov	r1, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	47d0      	blx	sl
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d0ab      	beq.n	8005b78 <_printf_i+0x164>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	079b      	lsls	r3, r3, #30
 8005c24:	d413      	bmi.n	8005c4e <_printf_i+0x23a>
 8005c26:	68e0      	ldr	r0, [r4, #12]
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	4298      	cmp	r0, r3
 8005c2c:	bfb8      	it	lt
 8005c2e:	4618      	movlt	r0, r3
 8005c30:	e7a4      	b.n	8005b7c <_printf_i+0x168>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4632      	mov	r2, r6
 8005c36:	4649      	mov	r1, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	47d0      	blx	sl
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d09b      	beq.n	8005b78 <_printf_i+0x164>
 8005c40:	3501      	adds	r5, #1
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	9903      	ldr	r1, [sp, #12]
 8005c46:	1a5b      	subs	r3, r3, r1
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	dcf2      	bgt.n	8005c32 <_printf_i+0x21e>
 8005c4c:	e7eb      	b.n	8005c26 <_printf_i+0x212>
 8005c4e:	2500      	movs	r5, #0
 8005c50:	f104 0619 	add.w	r6, r4, #25
 8005c54:	e7f5      	b.n	8005c42 <_printf_i+0x22e>
 8005c56:	bf00      	nop
 8005c58:	08006331 	.word	0x08006331
 8005c5c:	08006342 	.word	0x08006342

08005c60 <_sbrk_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d06      	ldr	r5, [pc, #24]	; (8005c7c <_sbrk_r+0x1c>)
 8005c64:	2300      	movs	r3, #0
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	602b      	str	r3, [r5, #0]
 8005c6c:	f7fb fb2a 	bl	80012c4 <_sbrk>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d102      	bne.n	8005c7a <_sbrk_r+0x1a>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	b103      	cbz	r3, 8005c7a <_sbrk_r+0x1a>
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
 8005c7c:	20000400 	.word	0x20000400

08005c80 <__sread>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	460c      	mov	r4, r1
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	f000 fab2 	bl	80061f0 <_read_r>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	bfab      	itete	ge
 8005c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c92:	89a3      	ldrhlt	r3, [r4, #12]
 8005c94:	181b      	addge	r3, r3, r0
 8005c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c9a:	bfac      	ite	ge
 8005c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c9e:	81a3      	strhlt	r3, [r4, #12]
 8005ca0:	bd10      	pop	{r4, pc}

08005ca2 <__swrite>:
 8005ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	461f      	mov	r7, r3
 8005ca8:	898b      	ldrh	r3, [r1, #12]
 8005caa:	05db      	lsls	r3, r3, #23
 8005cac:	4605      	mov	r5, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4616      	mov	r6, r2
 8005cb2:	d505      	bpl.n	8005cc0 <__swrite+0x1e>
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	2302      	movs	r3, #2
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f000 f9c8 	bl	8006050 <_lseek_r>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	4632      	mov	r2, r6
 8005cce:	463b      	mov	r3, r7
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	f000 b869 	b.w	8005dac <_write_r>

08005cda <__sseek>:
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	460c      	mov	r4, r1
 8005cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce2:	f000 f9b5 	bl	8006050 <_lseek_r>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	bf15      	itete	ne
 8005cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cf6:	81a3      	strheq	r3, [r4, #12]
 8005cf8:	bf18      	it	ne
 8005cfa:	81a3      	strhne	r3, [r4, #12]
 8005cfc:	bd10      	pop	{r4, pc}

08005cfe <__sclose>:
 8005cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d02:	f000 b8d3 	b.w	8005eac <_close_r>
	...

08005d08 <__swbuf_r>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	460e      	mov	r6, r1
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	4605      	mov	r5, r0
 8005d10:	b118      	cbz	r0, 8005d1a <__swbuf_r+0x12>
 8005d12:	6983      	ldr	r3, [r0, #24]
 8005d14:	b90b      	cbnz	r3, 8005d1a <__swbuf_r+0x12>
 8005d16:	f7ff fb81 	bl	800541c <__sinit>
 8005d1a:	4b21      	ldr	r3, [pc, #132]	; (8005da0 <__swbuf_r+0x98>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d12b      	bne.n	8005d78 <__swbuf_r+0x70>
 8005d20:	686c      	ldr	r4, [r5, #4]
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	071a      	lsls	r2, r3, #28
 8005d2a:	d52f      	bpl.n	8005d8c <__swbuf_r+0x84>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	b36b      	cbz	r3, 8005d8c <__swbuf_r+0x84>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	1ac0      	subs	r0, r0, r3
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	b2f6      	uxtb	r6, r6
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	4637      	mov	r7, r6
 8005d3e:	dc04      	bgt.n	8005d4a <__swbuf_r+0x42>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f948 	bl	8005fd8 <_fflush_r>
 8005d48:	bb30      	cbnz	r0, 8005d98 <__swbuf_r+0x90>
 8005d4a:	68a3      	ldr	r3, [r4, #8]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	60a3      	str	r3, [r4, #8]
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	701e      	strb	r6, [r3, #0]
 8005d58:	6963      	ldr	r3, [r4, #20]
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	4283      	cmp	r3, r0
 8005d5e:	d004      	beq.n	8005d6a <__swbuf_r+0x62>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	07db      	lsls	r3, r3, #31
 8005d64:	d506      	bpl.n	8005d74 <__swbuf_r+0x6c>
 8005d66:	2e0a      	cmp	r6, #10
 8005d68:	d104      	bne.n	8005d74 <__swbuf_r+0x6c>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f000 f933 	bl	8005fd8 <_fflush_r>
 8005d72:	b988      	cbnz	r0, 8005d98 <__swbuf_r+0x90>
 8005d74:	4638      	mov	r0, r7
 8005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <__swbuf_r+0x9c>)
 8005d7a:	429c      	cmp	r4, r3
 8005d7c:	d101      	bne.n	8005d82 <__swbuf_r+0x7a>
 8005d7e:	68ac      	ldr	r4, [r5, #8]
 8005d80:	e7cf      	b.n	8005d22 <__swbuf_r+0x1a>
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <__swbuf_r+0xa0>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	bf08      	it	eq
 8005d88:	68ec      	ldreq	r4, [r5, #12]
 8005d8a:	e7ca      	b.n	8005d22 <__swbuf_r+0x1a>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f81e 	bl	8005dd0 <__swsetup_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d0cb      	beq.n	8005d30 <__swbuf_r+0x28>
 8005d98:	f04f 37ff 	mov.w	r7, #4294967295
 8005d9c:	e7ea      	b.n	8005d74 <__swbuf_r+0x6c>
 8005d9e:	bf00      	nop
 8005da0:	080062e0 	.word	0x080062e0
 8005da4:	08006300 	.word	0x08006300
 8005da8:	080062c0 	.word	0x080062c0

08005dac <_write_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d07      	ldr	r5, [pc, #28]	; (8005dcc <_write_r+0x20>)
 8005db0:	4604      	mov	r4, r0
 8005db2:	4608      	mov	r0, r1
 8005db4:	4611      	mov	r1, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	602a      	str	r2, [r5, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f7fb fa31 	bl	8001222 <_write>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_write_r+0x1e>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_write_r+0x1e>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000400 	.word	0x20000400

08005dd0 <__swsetup_r>:
 8005dd0:	4b32      	ldr	r3, [pc, #200]	; (8005e9c <__swsetup_r+0xcc>)
 8005dd2:	b570      	push	{r4, r5, r6, lr}
 8005dd4:	681d      	ldr	r5, [r3, #0]
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460c      	mov	r4, r1
 8005dda:	b125      	cbz	r5, 8005de6 <__swsetup_r+0x16>
 8005ddc:	69ab      	ldr	r3, [r5, #24]
 8005dde:	b913      	cbnz	r3, 8005de6 <__swsetup_r+0x16>
 8005de0:	4628      	mov	r0, r5
 8005de2:	f7ff fb1b 	bl	800541c <__sinit>
 8005de6:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <__swsetup_r+0xd0>)
 8005de8:	429c      	cmp	r4, r3
 8005dea:	d10f      	bne.n	8005e0c <__swsetup_r+0x3c>
 8005dec:	686c      	ldr	r4, [r5, #4]
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005df4:	0719      	lsls	r1, r3, #28
 8005df6:	d42c      	bmi.n	8005e52 <__swsetup_r+0x82>
 8005df8:	06dd      	lsls	r5, r3, #27
 8005dfa:	d411      	bmi.n	8005e20 <__swsetup_r+0x50>
 8005dfc:	2309      	movs	r3, #9
 8005dfe:	6033      	str	r3, [r6, #0]
 8005e00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e04:	81a3      	strh	r3, [r4, #12]
 8005e06:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0a:	e03e      	b.n	8005e8a <__swsetup_r+0xba>
 8005e0c:	4b25      	ldr	r3, [pc, #148]	; (8005ea4 <__swsetup_r+0xd4>)
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	d101      	bne.n	8005e16 <__swsetup_r+0x46>
 8005e12:	68ac      	ldr	r4, [r5, #8]
 8005e14:	e7eb      	b.n	8005dee <__swsetup_r+0x1e>
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <__swsetup_r+0xd8>)
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	bf08      	it	eq
 8005e1c:	68ec      	ldreq	r4, [r5, #12]
 8005e1e:	e7e6      	b.n	8005dee <__swsetup_r+0x1e>
 8005e20:	0758      	lsls	r0, r3, #29
 8005e22:	d512      	bpl.n	8005e4a <__swsetup_r+0x7a>
 8005e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e26:	b141      	cbz	r1, 8005e3a <__swsetup_r+0x6a>
 8005e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	d002      	beq.n	8005e36 <__swsetup_r+0x66>
 8005e30:	4630      	mov	r0, r6
 8005e32:	f000 f991 	bl	8006158 <_free_r>
 8005e36:	2300      	movs	r3, #0
 8005e38:	6363      	str	r3, [r4, #52]	; 0x34
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	2300      	movs	r3, #0
 8005e44:	6063      	str	r3, [r4, #4]
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f043 0308 	orr.w	r3, r3, #8
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	b94b      	cbnz	r3, 8005e6a <__swsetup_r+0x9a>
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e60:	d003      	beq.n	8005e6a <__swsetup_r+0x9a>
 8005e62:	4621      	mov	r1, r4
 8005e64:	4630      	mov	r0, r6
 8005e66:	f000 f92b 	bl	80060c0 <__smakebuf_r>
 8005e6a:	89a0      	ldrh	r0, [r4, #12]
 8005e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e70:	f010 0301 	ands.w	r3, r0, #1
 8005e74:	d00a      	beq.n	8005e8c <__swsetup_r+0xbc>
 8005e76:	2300      	movs	r3, #0
 8005e78:	60a3      	str	r3, [r4, #8]
 8005e7a:	6963      	ldr	r3, [r4, #20]
 8005e7c:	425b      	negs	r3, r3
 8005e7e:	61a3      	str	r3, [r4, #24]
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	b943      	cbnz	r3, 8005e96 <__swsetup_r+0xc6>
 8005e84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e88:	d1ba      	bne.n	8005e00 <__swsetup_r+0x30>
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	0781      	lsls	r1, r0, #30
 8005e8e:	bf58      	it	pl
 8005e90:	6963      	ldrpl	r3, [r4, #20]
 8005e92:	60a3      	str	r3, [r4, #8]
 8005e94:	e7f4      	b.n	8005e80 <__swsetup_r+0xb0>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e7f7      	b.n	8005e8a <__swsetup_r+0xba>
 8005e9a:	bf00      	nop
 8005e9c:	20000010 	.word	0x20000010
 8005ea0:	080062e0 	.word	0x080062e0
 8005ea4:	08006300 	.word	0x08006300
 8005ea8:	080062c0 	.word	0x080062c0

08005eac <_close_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d06      	ldr	r5, [pc, #24]	; (8005ec8 <_close_r+0x1c>)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	f7fb f9cf 	bl	800125a <_close>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_close_r+0x1a>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_close_r+0x1a>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	20000400 	.word	0x20000400

08005ecc <__sflush_r>:
 8005ecc:	898a      	ldrh	r2, [r1, #12]
 8005ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	0710      	lsls	r0, r2, #28
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	d458      	bmi.n	8005f8c <__sflush_r+0xc0>
 8005eda:	684b      	ldr	r3, [r1, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dc05      	bgt.n	8005eec <__sflush_r+0x20>
 8005ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dc02      	bgt.n	8005eec <__sflush_r+0x20>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	d0f9      	beq.n	8005ee6 <__sflush_r+0x1a>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ef8:	682f      	ldr	r7, [r5, #0]
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	d032      	beq.n	8005f64 <__sflush_r+0x98>
 8005efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	075a      	lsls	r2, r3, #29
 8005f04:	d505      	bpl.n	8005f12 <__sflush_r+0x46>
 8005f06:	6863      	ldr	r3, [r4, #4]
 8005f08:	1ac0      	subs	r0, r0, r3
 8005f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f0c:	b10b      	cbz	r3, 8005f12 <__sflush_r+0x46>
 8005f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f10:	1ac0      	subs	r0, r0, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	4602      	mov	r2, r0
 8005f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f18:	6a21      	ldr	r1, [r4, #32]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b0      	blx	r6
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	d106      	bne.n	8005f32 <__sflush_r+0x66>
 8005f24:	6829      	ldr	r1, [r5, #0]
 8005f26:	291d      	cmp	r1, #29
 8005f28:	d82c      	bhi.n	8005f84 <__sflush_r+0xb8>
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <__sflush_r+0x108>)
 8005f2c:	40ca      	lsrs	r2, r1
 8005f2e:	07d6      	lsls	r6, r2, #31
 8005f30:	d528      	bpl.n	8005f84 <__sflush_r+0xb8>
 8005f32:	2200      	movs	r2, #0
 8005f34:	6062      	str	r2, [r4, #4]
 8005f36:	04d9      	lsls	r1, r3, #19
 8005f38:	6922      	ldr	r2, [r4, #16]
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	d504      	bpl.n	8005f48 <__sflush_r+0x7c>
 8005f3e:	1c42      	adds	r2, r0, #1
 8005f40:	d101      	bne.n	8005f46 <__sflush_r+0x7a>
 8005f42:	682b      	ldr	r3, [r5, #0]
 8005f44:	b903      	cbnz	r3, 8005f48 <__sflush_r+0x7c>
 8005f46:	6560      	str	r0, [r4, #84]	; 0x54
 8005f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f4a:	602f      	str	r7, [r5, #0]
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d0ca      	beq.n	8005ee6 <__sflush_r+0x1a>
 8005f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f54:	4299      	cmp	r1, r3
 8005f56:	d002      	beq.n	8005f5e <__sflush_r+0x92>
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 f8fd 	bl	8006158 <_free_r>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	6360      	str	r0, [r4, #52]	; 0x34
 8005f62:	e7c1      	b.n	8005ee8 <__sflush_r+0x1c>
 8005f64:	6a21      	ldr	r1, [r4, #32]
 8005f66:	2301      	movs	r3, #1
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b0      	blx	r6
 8005f6c:	1c41      	adds	r1, r0, #1
 8005f6e:	d1c7      	bne.n	8005f00 <__sflush_r+0x34>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0c4      	beq.n	8005f00 <__sflush_r+0x34>
 8005f76:	2b1d      	cmp	r3, #29
 8005f78:	d001      	beq.n	8005f7e <__sflush_r+0xb2>
 8005f7a:	2b16      	cmp	r3, #22
 8005f7c:	d101      	bne.n	8005f82 <__sflush_r+0xb6>
 8005f7e:	602f      	str	r7, [r5, #0]
 8005f80:	e7b1      	b.n	8005ee6 <__sflush_r+0x1a>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	e7ad      	b.n	8005ee8 <__sflush_r+0x1c>
 8005f8c:	690f      	ldr	r7, [r1, #16]
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	d0a9      	beq.n	8005ee6 <__sflush_r+0x1a>
 8005f92:	0793      	lsls	r3, r2, #30
 8005f94:	680e      	ldr	r6, [r1, #0]
 8005f96:	bf08      	it	eq
 8005f98:	694b      	ldreq	r3, [r1, #20]
 8005f9a:	600f      	str	r7, [r1, #0]
 8005f9c:	bf18      	it	ne
 8005f9e:	2300      	movne	r3, #0
 8005fa0:	eba6 0807 	sub.w	r8, r6, r7
 8005fa4:	608b      	str	r3, [r1, #8]
 8005fa6:	f1b8 0f00 	cmp.w	r8, #0
 8005faa:	dd9c      	ble.n	8005ee6 <__sflush_r+0x1a>
 8005fac:	6a21      	ldr	r1, [r4, #32]
 8005fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fb0:	4643      	mov	r3, r8
 8005fb2:	463a      	mov	r2, r7
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b0      	blx	r6
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	dc06      	bgt.n	8005fca <__sflush_r+0xfe>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	e78e      	b.n	8005ee8 <__sflush_r+0x1c>
 8005fca:	4407      	add	r7, r0
 8005fcc:	eba8 0800 	sub.w	r8, r8, r0
 8005fd0:	e7e9      	b.n	8005fa6 <__sflush_r+0xda>
 8005fd2:	bf00      	nop
 8005fd4:	20400001 	.word	0x20400001

08005fd8 <_fflush_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	4605      	mov	r5, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	b913      	cbnz	r3, 8005fe8 <_fflush_r+0x10>
 8005fe2:	2500      	movs	r5, #0
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	b118      	cbz	r0, 8005ff2 <_fflush_r+0x1a>
 8005fea:	6983      	ldr	r3, [r0, #24]
 8005fec:	b90b      	cbnz	r3, 8005ff2 <_fflush_r+0x1a>
 8005fee:	f7ff fa15 	bl	800541c <__sinit>
 8005ff2:	4b14      	ldr	r3, [pc, #80]	; (8006044 <_fflush_r+0x6c>)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	d11b      	bne.n	8006030 <_fflush_r+0x58>
 8005ff8:	686c      	ldr	r4, [r5, #4]
 8005ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0ef      	beq.n	8005fe2 <_fflush_r+0xa>
 8006002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006004:	07d0      	lsls	r0, r2, #31
 8006006:	d404      	bmi.n	8006012 <_fflush_r+0x3a>
 8006008:	0599      	lsls	r1, r3, #22
 800600a:	d402      	bmi.n	8006012 <_fflush_r+0x3a>
 800600c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800600e:	f7ff faa3 	bl	8005558 <__retarget_lock_acquire_recursive>
 8006012:	4628      	mov	r0, r5
 8006014:	4621      	mov	r1, r4
 8006016:	f7ff ff59 	bl	8005ecc <__sflush_r>
 800601a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601c:	07da      	lsls	r2, r3, #31
 800601e:	4605      	mov	r5, r0
 8006020:	d4e0      	bmi.n	8005fe4 <_fflush_r+0xc>
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	059b      	lsls	r3, r3, #22
 8006026:	d4dd      	bmi.n	8005fe4 <_fflush_r+0xc>
 8006028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800602a:	f7ff fa96 	bl	800555a <__retarget_lock_release_recursive>
 800602e:	e7d9      	b.n	8005fe4 <_fflush_r+0xc>
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <_fflush_r+0x70>)
 8006032:	429c      	cmp	r4, r3
 8006034:	d101      	bne.n	800603a <_fflush_r+0x62>
 8006036:	68ac      	ldr	r4, [r5, #8]
 8006038:	e7df      	b.n	8005ffa <_fflush_r+0x22>
 800603a:	4b04      	ldr	r3, [pc, #16]	; (800604c <_fflush_r+0x74>)
 800603c:	429c      	cmp	r4, r3
 800603e:	bf08      	it	eq
 8006040:	68ec      	ldreq	r4, [r5, #12]
 8006042:	e7da      	b.n	8005ffa <_fflush_r+0x22>
 8006044:	080062e0 	.word	0x080062e0
 8006048:	08006300 	.word	0x08006300
 800604c:	080062c0 	.word	0x080062c0

08006050 <_lseek_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4d07      	ldr	r5, [pc, #28]	; (8006070 <_lseek_r+0x20>)
 8006054:	4604      	mov	r4, r0
 8006056:	4608      	mov	r0, r1
 8006058:	4611      	mov	r1, r2
 800605a:	2200      	movs	r2, #0
 800605c:	602a      	str	r2, [r5, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	f7fb f922 	bl	80012a8 <_lseek>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_lseek_r+0x1e>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_lseek_r+0x1e>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20000400 	.word	0x20000400

08006074 <__swhatbuf_r>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	460e      	mov	r6, r1
 8006078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607c:	2900      	cmp	r1, #0
 800607e:	b096      	sub	sp, #88	; 0x58
 8006080:	4614      	mov	r4, r2
 8006082:	461d      	mov	r5, r3
 8006084:	da08      	bge.n	8006098 <__swhatbuf_r+0x24>
 8006086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	602a      	str	r2, [r5, #0]
 800608e:	061a      	lsls	r2, r3, #24
 8006090:	d410      	bmi.n	80060b4 <__swhatbuf_r+0x40>
 8006092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006096:	e00e      	b.n	80060b6 <__swhatbuf_r+0x42>
 8006098:	466a      	mov	r2, sp
 800609a:	f000 f8bb 	bl	8006214 <_fstat_r>
 800609e:	2800      	cmp	r0, #0
 80060a0:	dbf1      	blt.n	8006086 <__swhatbuf_r+0x12>
 80060a2:	9a01      	ldr	r2, [sp, #4]
 80060a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060ac:	425a      	negs	r2, r3
 80060ae:	415a      	adcs	r2, r3
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	e7ee      	b.n	8006092 <__swhatbuf_r+0x1e>
 80060b4:	2340      	movs	r3, #64	; 0x40
 80060b6:	2000      	movs	r0, #0
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	b016      	add	sp, #88	; 0x58
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080060c0 <__smakebuf_r>:
 80060c0:	898b      	ldrh	r3, [r1, #12]
 80060c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060c4:	079d      	lsls	r5, r3, #30
 80060c6:	4606      	mov	r6, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	d507      	bpl.n	80060dc <__smakebuf_r+0x1c>
 80060cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	2301      	movs	r3, #1
 80060d6:	6163      	str	r3, [r4, #20]
 80060d8:	b002      	add	sp, #8
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	ab01      	add	r3, sp, #4
 80060de:	466a      	mov	r2, sp
 80060e0:	f7ff ffc8 	bl	8006074 <__swhatbuf_r>
 80060e4:	9900      	ldr	r1, [sp, #0]
 80060e6:	4605      	mov	r5, r0
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff fa57 	bl	800559c <_malloc_r>
 80060ee:	b948      	cbnz	r0, 8006104 <__smakebuf_r+0x44>
 80060f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060f4:	059a      	lsls	r2, r3, #22
 80060f6:	d4ef      	bmi.n	80060d8 <__smakebuf_r+0x18>
 80060f8:	f023 0303 	bic.w	r3, r3, #3
 80060fc:	f043 0302 	orr.w	r3, r3, #2
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	e7e3      	b.n	80060cc <__smakebuf_r+0xc>
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <__smakebuf_r+0x7c>)
 8006106:	62b3      	str	r3, [r6, #40]	; 0x28
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	6020      	str	r0, [r4, #0]
 800610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	9b00      	ldr	r3, [sp, #0]
 8006114:	6163      	str	r3, [r4, #20]
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	6120      	str	r0, [r4, #16]
 800611a:	b15b      	cbz	r3, 8006134 <__smakebuf_r+0x74>
 800611c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006120:	4630      	mov	r0, r6
 8006122:	f000 f889 	bl	8006238 <_isatty_r>
 8006126:	b128      	cbz	r0, 8006134 <__smakebuf_r+0x74>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	89a0      	ldrh	r0, [r4, #12]
 8006136:	4305      	orrs	r5, r0
 8006138:	81a5      	strh	r5, [r4, #12]
 800613a:	e7cd      	b.n	80060d8 <__smakebuf_r+0x18>
 800613c:	080053b5 	.word	0x080053b5

08006140 <__malloc_lock>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__malloc_lock+0x8>)
 8006142:	f7ff ba09 	b.w	8005558 <__retarget_lock_acquire_recursive>
 8006146:	bf00      	nop
 8006148:	200003f4 	.word	0x200003f4

0800614c <__malloc_unlock>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__malloc_unlock+0x8>)
 800614e:	f7ff ba04 	b.w	800555a <__retarget_lock_release_recursive>
 8006152:	bf00      	nop
 8006154:	200003f4 	.word	0x200003f4

08006158 <_free_r>:
 8006158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800615a:	2900      	cmp	r1, #0
 800615c:	d044      	beq.n	80061e8 <_free_r+0x90>
 800615e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006162:	9001      	str	r0, [sp, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f1a1 0404 	sub.w	r4, r1, #4
 800616a:	bfb8      	it	lt
 800616c:	18e4      	addlt	r4, r4, r3
 800616e:	f7ff ffe7 	bl	8006140 <__malloc_lock>
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <_free_r+0x94>)
 8006174:	9801      	ldr	r0, [sp, #4]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	b933      	cbnz	r3, 8006188 <_free_r+0x30>
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	b003      	add	sp, #12
 8006180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006184:	f7ff bfe2 	b.w	800614c <__malloc_unlock>
 8006188:	42a3      	cmp	r3, r4
 800618a:	d908      	bls.n	800619e <_free_r+0x46>
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1961      	adds	r1, r4, r5
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1949      	addeq	r1, r1, r5
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	e7ed      	b.n	800617a <_free_r+0x22>
 800619e:	461a      	mov	r2, r3
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b10b      	cbz	r3, 80061a8 <_free_r+0x50>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d9fa      	bls.n	800619e <_free_r+0x46>
 80061a8:	6811      	ldr	r1, [r2, #0]
 80061aa:	1855      	adds	r5, r2, r1
 80061ac:	42a5      	cmp	r5, r4
 80061ae:	d10b      	bne.n	80061c8 <_free_r+0x70>
 80061b0:	6824      	ldr	r4, [r4, #0]
 80061b2:	4421      	add	r1, r4
 80061b4:	1854      	adds	r4, r2, r1
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	d1e0      	bne.n	800617e <_free_r+0x26>
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	6053      	str	r3, [r2, #4]
 80061c2:	4421      	add	r1, r4
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	e7da      	b.n	800617e <_free_r+0x26>
 80061c8:	d902      	bls.n	80061d0 <_free_r+0x78>
 80061ca:	230c      	movs	r3, #12
 80061cc:	6003      	str	r3, [r0, #0]
 80061ce:	e7d6      	b.n	800617e <_free_r+0x26>
 80061d0:	6825      	ldr	r5, [r4, #0]
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf04      	itt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	6063      	str	r3, [r4, #4]
 80061de:	bf04      	itt	eq
 80061e0:	1949      	addeq	r1, r1, r5
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6054      	str	r4, [r2, #4]
 80061e6:	e7ca      	b.n	800617e <_free_r+0x26>
 80061e8:	b003      	add	sp, #12
 80061ea:	bd30      	pop	{r4, r5, pc}
 80061ec:	200003f8 	.word	0x200003f8

080061f0 <_read_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	; (8006210 <_read_r+0x20>)
 80061f4:	4604      	mov	r4, r0
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fa fff2 	bl	80011e8 <_read>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_read_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_read_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	20000400 	.word	0x20000400

08006214 <_fstat_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	; (8006234 <_fstat_r+0x20>)
 8006218:	2300      	movs	r3, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	4611      	mov	r1, r2
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	f7fb f826 	bl	8001272 <_fstat>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	d102      	bne.n	8006230 <_fstat_r+0x1c>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	b103      	cbz	r3, 8006230 <_fstat_r+0x1c>
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	bd38      	pop	{r3, r4, r5, pc}
 8006232:	bf00      	nop
 8006234:	20000400 	.word	0x20000400

08006238 <_isatty_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4d06      	ldr	r5, [pc, #24]	; (8006254 <_isatty_r+0x1c>)
 800623c:	2300      	movs	r3, #0
 800623e:	4604      	mov	r4, r0
 8006240:	4608      	mov	r0, r1
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	f7fb f825 	bl	8001292 <_isatty>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_isatty_r+0x1a>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_isatty_r+0x1a>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	20000400 	.word	0x20000400

08006258 <_init>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

08006264 <_fini>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr
